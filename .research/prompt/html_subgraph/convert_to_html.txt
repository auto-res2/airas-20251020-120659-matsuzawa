
LLM Name: gpt-5-2025-08-07
Input:
Convert research paper sections to clean, semantic HTML for GitHub Pages publication.

## Input Data:

**title:**
Confidence-Weighted Entropy Minimization for One-Step Test-Time Adaptation


**abstract:**
Test-time adaptation (TTA) updates a model on the incoming data stream to counteract distribution shift without requiring labels. Entropy-minimization methods such as TENT restrict adaptation to the affine parameters of Batch Normalization and achieve good accuracy, yet they typically run three to ten gradient steps per mini-batch, inflating latency. We revisit the core obstacle—noisy gradients dominated by high-entropy samples early in adaptation—and propose Confidence-Weighted TENT (CW-TENT). CW-TENT rescales each sample’s entropy by the confidence weight w = 1 – H(p)/log C and minimizes the normalized weighted loss with a single stochastic-gradient step per batch, aiming to preserve accuracy while cutting computation. We implement CW-TENT for a pre-trained ResNet-18 and evaluate it on CIFAR-10-C at corruption severity 5 against the 10-step TENT baseline. Contrary to expectation, the logged run shows severe degradation: CW-TENT reaches only 10.11 percent final top-1 accuracy versus 37.41 percent for TENT, although it reduces back-propagation steps by a factor of ten. Learning-curve analysis attributes the collapse to weight saturation, unstable Batch-Norm statistics, and an oversized learning rate. We dissect these failure modes and outline concrete stabilisation strategies—temperature-scaled weights, adaptive step sizes, and hybrid updates—thereby providing a data-backed cautionary tale for confidence-aware objectives in fast TTA.


**introduction:**
Deep neural networks often encounter distribution shift once deployed, suffering dramatic performance losses. Test-time adaptation (TTA) addresses this problem by updating a subset of parameters online using the unlabeled test stream. Among the many variants, entropy minimisation with Batch-Norm (BN)–only updates, popularised by TENT, stands out for its simplicity: it keeps most weights frozen, relies solely on the model’s own predictions, and delivers substantial gains under common corruptions. Despite these advantages, TENT typically needs multiple inner gradient steps per mini-batch to stabilise noisy gradients, which increases inference latency—a critical drawback for real-time applications.  This work explores whether a minimal change to the loss can eliminate the inner-loop while retaining accuracy. The central intuition is straightforward: high-confidence predictions are more reliable indicators of the target distribution than low-confidence ones. If their gradients are emphasised, fewer optimisation steps may suffice. We therefore introduce Confidence-Weighted TENT (CW-TENT), which multiplies each sample’s entropy by the confidence weight w = 1 – H(p)/log C and minimises the average weighted entropy using a single stochastic-gradient step per batch.  The idea appears promising. It preserves the BN-only parameter footprint, requires just four extra lines of code, and, in principle, reduces per-batch computation by an order of magnitude. To test the hypothesis we conduct a controlled study on CIFAR-10-C at corruption severity 5 with a pre-trained ResNet-18. We compare CW-TENT to the standard 10-step TENT baseline and analyse online accuracy, convergence speed, and computational cost. Contrary to our initial expectation, CW-TENT collapses within the first few batches, finishing at 10.11 percent top-1 accuracy—27.3 percentage points below TENT. Diagnostics reveal that aggressive down-weighting of high-entropy samples shrinks the effective batch size, destabilises BN statistics, and interacts unfavourably with the learning rate inherited from multi-step TENT.  These negative results are nonetheless instructive. They delineate the boundary conditions under which confidence weighting harms rather than helps, highlight the delicate interplay between loss shaping and normalisation, and resonate with recent reports that stabilising BN statistics is crucial for fully test-time adaptation \cite{zhao-2023-delta}. Similar lessons emerge in other vision domains, where regularised losses at test time must be carefully balanced to prevent degenerate minima \cite{author-year-test}.  Contributions • We propose confidence-weighted entropy minimisation as a drop-in modification to BN-only TTA aimed at enabling one-step updates. • We provide the first empirical evaluation of this idea on CIFAR-10-C, contrasting CW-TENT with a strong multi-step TENT baseline. • We present a thorough negative result, diagnosing failure modes tied to weight saturation, learning-rate overshoot, and unreliable BN statistics. • We outline concrete stabilisation tactics—temperature scaling, adaptive step sizes, and hybrid updates—that future work can test.  By exposing the pitfalls of confidence weighting in the single-step regime, our study refines the design space for fast TTA and underscores the need to couple objective modifications with robust normalisation and optimisation control.


**related_work:**
Entropy-based TTA. The original TENT framework adapts BN affine parameters by minimising prediction entropy, achieving strong gains across synthetic corruptions but incurring multiple inner-loop steps. Several works refine this recipe through additional regularisers or second-order updates. Our work differs by retaining the core entropy objective yet re-weighting it to prioritise confident samples in a single step.  Normalisation-centric approaches. DELTA augments TENT with Test-time Batch Renormalisation and Dynamic Online re-weighting to mitigate inaccurate BN statistics and class-bias in the updates \cite{zhao-2023-delta}. Whereas DELTA changes the normaliser and adds class-level weighting, CW-TENT leaves normalisation untouched and operates at the sample level. The two strategies are therefore complementary; however, our logs do not include DELTA, so direct comparison is left for future work.  Loss regularisation in related tasks. In weakly supervised salient object detection, tailored test-time regularisers have been shown to boost performance while maintaining stability \cite{author-year-test}. These studies emphasise the risk of objective functions that over-amplify certain signals, a concern manifested in our collapse under aggressive confidence weighting.  In summary, prior work typically improves TTA by enhancing BN statistics or adding balanced regularisers. Our attempt to accelerate convergence via confidence-based loss shaping unmasks new stability challenges, highlighting the importance of joint design across loss, optimiser, and normalisation.


**background:**
Problem setting. Let f_θ denote a classifier trained on a source distribution and deployed on a target stream with unknown shift. Labels are unavailable at test time. The model processes each mini-batch sequentially and may update a designated subset of parameters before predicting the next batch.  Standard TENT. TENT keeps only the BN affine parameters (γ, β) trainable. For a batch B of size N with class-probability vectors p_i, TENT minimises the unweighted entropy loss L = Σ_i H(p_i), where H(p) = −Σ_c p_c log p_c. It performs K inner SGD steps (typically 3–10) and relies on current-batch statistics for BN.  Confidence-weighted modification. We hypothesise that noisy gradients arising from high-entropy samples hamper one-step convergence. Defining the confidence weight w_i = 1 – H(p_i)/log C in the range , we construct the weighted loss L_w = (Σ_i w_i H(p_i)) / (Σ_i w_i). When many samples are high-entropy, most weights shrink toward zero, potentially reducing gradient noise but also the effective batch size used by BN. This trade-off lies at the heart of our empirical investigation.  Challenges. (1) BN statistics depend on the full batch; if weighting effectively discards many samples, mean and variance estimates become unreliable. (2) A learning rate chosen for multi-step optimisation may overshoot in the single-step setting. (3) Weight saturation may nullify stabilising gradients early in adaptation, permitting a single unreliable update to derail the model. Addressing these issues requires mechanisms beyond loss shaping, as will be revisited in Section Results.


**method:**
CW-TENT retains the TENT optimisation pipeline with two minimal changes: a confidence-weighted loss and a single inner step. For each incoming batch: 1 Set the model to training mode so BN uses batch statistics. 2 Compute logits, probabilities p_i, entropies H_i, and weights w_i = 1 – H_i/log C. 3 Form the loss L_w = (Σ_i w_i H_i)/(Σ_i w_i). 4 Back-propagate L_w and update γ, β with one SGD step (learning rate 1 × 10⁻³, momentum 0.9). 5 Return the model to evaluation mode.  Implementation consists of enabling gradients on BN affine parameters and adding four lines to compute w and the weighted loss. Theoretical intuition predicts that emphasising low-entropy samples improves the signal-to-noise ratio of the gradient, permitting large steps or fewer iterations. Yet the same weighting reduces the sample count contributing to BN, potentially destabilising mean–variance estimates. Our experiments evaluate which effect dominates in practice.


**experimental_setup:**
Dataset and model. We follow the canonical TTA benchmark of CIFAR-10-C at corruption severity 5. The evaluation stream contains 10 000 images delivered sequentially. The backbone is a pre-trained ResNet-18 (11.7 million parameters).  Adapters. (i) Vanilla TENT: unweighted entropy, 10 SGD steps per batch. (ii) CW-TENT: confidence-weighted entropy, 1 SGD step per batch. Both adapters modify only BN affine parameters and employ SGD with learning rate 1 × 10⁻³, momentum 0.9.  Metrics. Primary: online top-1 accuracy on each batch and after the full stream (higher is better). Secondary: per-batch latency measured on a single NVIDIA A100, and qualitative diagnostics from learning curves and batch-level accuracy histograms.  Hardware and execution. All runs execute on one A100; latency is recorded with torch.cuda.Event timers.  Logged runs. The analysis draws on two complete logs: • proposed-ResNet-18-11-7M--CIFAR-10-C-severity-5 (CW-TENT, final accuracy 0.1011). • comparative-1-ResNet-18-11-7M--CIFAR-10-C-severity-5 (TENT, final accuracy 0.3741). The source-only adapter was planned but not executed, so it is omitted from the quantitative tables.


**results:**
Overall accuracy. After processing the full 10 000-image stream, CW-TENT attains 10.11 percent top-1 accuracy, whereas vanilla TENT reaches 37.41 percent. The gap of 27.3 points indicates a substantial failure of the confidence-weighted objective to maintain accuracy.  Convergence behaviour. Figure 2 shows that CW-TENT begins near the source checkpoint’s accuracy but collapses within ten batches, stabilising at chance-level performance. Vanilla TENT, while noisy, improves steadily over the stream. Batch-level accuracy histograms in Figure 3 reveal a bimodal distribution for CW-TENT, dominated by a low-accuracy mode, confirming widespread misclassification.  Computational cost. One gradient step per batch yields a 10× reduction in back-propagation and cuts per-batch latency from 7.1 ms (TENT) to 0.8 ms (CW-TENT). However, the accuracy deficit outweighs this benefit for most applications.  Failure analysis. Three interacting factors emerge: 1 Normalisation instability: down-weighting discards many samples, so BN statistics are estimated from a handful of confident examples, leading to unreliable γ, β updates. 2 Learning-rate overshoot: the step size suitable for 10-step optimisation proves too large for a single step on a sharper loss surface. 3 Weight saturation: for CIFAR-10, entropy above 1.84 assigns w < 0.2, eliminating stabilising gradients from the majority of early-stream samples.  Suggested mitigations include scaling the learning rate by the batch-mean weight, introducing a temperature τ > 1 in the weight definition, appending a tiny unweighted micro-step, and clipping large BN updates; none are tested in the present logs.  Fairness considerations. Both runs share architecture, data stream, optimiser, and evaluation code; only the loss definition and number of inner steps differ.  Figures.  Figure 1: Final accuracy comparison between CW-TENT and TENT; higher is better (filename: final_accuracy_comparison.pdf).  Figure 2: Online accuracy over the 10 000-sample stream; higher is better (filename: learning_curve.pdf).  Figure 3: Batch-level accuracy distribution for both adapters; higher is better (filename: batch_acc_distribution.pdf).  Figure 4: Confusion matrices of the evaluated models; higher diagonal values are better (filename: confusion_matrix.pdf).  Figure 5: Aggregated metrics file used to generate summary plots (filename: aggregated_metrics.json).  Figure 6: Per-run metrics JSON with detailed logs (filename: metrics.json).  Figure 7: Statistical significance tests comparing adapters (filename: significance_tests.json).


**conclusion:**
We introduced confidence-weighted entropy minimisation to accelerate BN-only test-time adaptation by collapsing the inner loop to a single gradient step. An empirical study on CIFAR-10-C reveals that, in its naïve form, the method dramatically underperforms the multi-step TENT baseline, achieving 10.11 percent versus 37.41 percent final accuracy. Detailed diagnostics attribute the collapse to unstable Batch-Norm statistics, learning-rate overshoot, and excessive weight saturation. Although CW-TENT delivers a ten-fold reduction in computation, its accuracy deficit currently precludes practical deployment.  Our findings contribute a carefully documented negative result that sharpens understanding of loss shaping in TTA. They stress that objective modifications must be co-designed with normalisation and optimisation mechanisms, echoing lessons from DELTA’s focus on robust statistics \cite{zhao-2023-delta} and from regularised test-time training in related tasks \cite{author-year-test}. Future work should implement temperature-scaled weights, adaptive learning rates proportional to the batch-mean weight, hybrid weighted-plus-unweighted updates, and improved normalisers to recover stability while retaining single-step efficiency.



**Available Images:**

- confusion_matrix.pdf

- learning_curve.pdf

- metrics.json

- confusion_matrix.pdf

- learning_curve.pdf

- metrics.json

- aggregated_metrics.json

- batch_acc_distribution.pdf

- final_accuracy_comparison.pdf

- significance_tests.json



## HTML Requirements:

### Section Structure:
- **Title section**: Use `<h2 class="paper-title">Title Text</h2>` (no wrapper)
- **Other sections**: Use `<section><h2>Section Name</h2>...</section>`
- **Paragraphs**: Use `<p>` for each logical paragraph
- **Lists**: Use `<ul><li><strong>Key:</strong> Description</li></ul>`

### Figures (Results section only):
- Use `<figure><img src="images/filename.png"><figcaption>Figure N: Description</figcaption></figure>`
- Convert .pdf to .png in src paths (e.g., `plot1.pdf` → `images/plot1.png`)
- **Width rules:**
  - Paired images (*_pair1.png, *_pair2.png): `<figure class="img-pair">` with `style="width:48%"` each
  - Single images: `style="width:70%"`

### Code (Method section only):
- Use `<pre><code>` for pseudocode/code blocks

### General Rules:
- No `<html>`, `<head>`, `<body>` tags
- All links need `target="_blank"`
- Only use content from input - don't invent anything
- Citations in [key] format will be converted to links automatically

## Output:
Generate only the HTML content as shown:

```html
<h2 class="paper-title">Title Text</h2>

<section>
  <h2>Abstract</h2>
  <p>Abstract content...</p>
</section>

<section>
  <h2>Introduction</h2>
  <p>Introduction content...</p>
</section>
```
Output:
{
    "generated_html_text": "<h2 class=\"paper-title\">Confidence-Weighted Entropy Minimization for One-Step Test-Time Adaptation</h2>\n\n<section>\n  <h2>Abstract</h2>\n  <p>Test-time adaptation (TTA) updates a model on the incoming data stream to counteract distribution shift without requiring labels. Entropy-minimization methods such as TENT restrict adaptation to the affine parameters of Batch Normalization and achieve good accuracy, yet they typically run three to ten gradient steps per mini-batch, inflating latency. We revisit the core obstacle—noisy gradients dominated by high-entropy samples early in adaptation—and propose Confidence-Weighted TENT (CW-TENT). CW-TENT rescales each sample’s entropy by the confidence weight w = 1 – H(p)/log C and minimizes the normalized weighted loss with a single stochastic-gradient step per batch, aiming to preserve accuracy while cutting computation. We implement CW-TENT for a pre-trained ResNet-18 and evaluate it on CIFAR-10-C at corruption severity 5 against the 10-step TENT baseline. Contrary to expectation, the logged run shows severe degradation: CW-TENT reaches only 10.11 percent final top-1 accuracy versus 37.41 percent for TENT, although it reduces back-propagation steps by a factor of ten. Learning-curve analysis attributes the collapse to weight saturation, unstable Batch-Norm statistics, and an oversized learning rate. We dissect these failure modes and outline concrete stabilisation strategies—temperature-scaled weights, adaptive step sizes, and hybrid updates—thereby providing a data-backed cautionary tale for confidence-aware objectives in fast TTA.</p>\n</section>\n\n<section>\n  <h2>Introduction</h2>\n  <p>Deep neural networks often encounter distribution shift once deployed, suffering dramatic performance losses. Test-time adaptation (TTA) addresses this problem by updating a subset of parameters online using the unlabeled test stream. Among the many variants, entropy minimisation with Batch-Norm (BN)–only updates, popularised by TENT, stands out for its simplicity: it keeps most weights frozen, relies solely on the model’s own predictions, and delivers substantial gains under common corruptions. Despite these advantages, TENT typically needs multiple inner gradient steps per mini-batch to stabilise noisy gradients, which increases inference latency—a critical drawback for real-time applications.</p>\n  <p>This work explores whether a minimal change to the loss can eliminate the inner-loop while retaining accuracy. The central intuition is straightforward: high-confidence predictions are more reliable indicators of the target distribution than low-confidence ones. If their gradients are emphasised, fewer optimisation steps may suffice. We therefore introduce Confidence-Weighted TENT (CW-TENT), which multiplies each sample’s entropy by the confidence weight w = 1 – H(p)/log C and minimises the average weighted entropy using a single stochastic-gradient step per batch.</p>\n  <p>The idea appears promising. It preserves the BN-only parameter footprint, requires just four extra lines of code, and, in principle, reduces per-batch computation by an order of magnitude. To test the hypothesis we conduct a controlled study on CIFAR-10-C at corruption severity 5 with a pre-trained ResNet-18. We compare CW-TENT to the standard 10-step TENT baseline and analyse online accuracy, convergence speed, and computational cost. Contrary to our initial expectation, CW-TENT collapses within the first few batches, finishing at 10.11 percent top-1 accuracy—27.3 percentage points below TENT. Diagnostics reveal that aggressive down-weighting of high-entropy samples shrinks the effective batch size, destabilises BN statistics, and interacts unfavourably with the learning rate inherited from multi-step TENT.</p>\n  <p>These negative results are nonetheless instructive. They delineate the boundary conditions under which confidence weighting harms rather than helps, highlight the delicate interplay between loss shaping and normalisation, and resonate with recent reports that stabilising BN statistics is crucial for fully test-time adaptation [zhao-2023-delta]. Similar lessons emerge in other vision domains, where regularised losses at test time must be carefully balanced to prevent degenerate minima [author-year-test].</p>\n  <ul>\n    <li><strong>We propose:</strong> confidence-weighted entropy minimisation as a drop-in modification to BN-only TTA aimed at enabling one-step updates.</li>\n    <li><strong>We provide:</strong> the first empirical evaluation of this idea on CIFAR-10-C, contrasting CW-TENT with a strong multi-step TENT baseline.</li>\n    <li><strong>We present:</strong> a thorough negative result, diagnosing failure modes tied to weight saturation, learning-rate overshoot, and unreliable BN statistics.</li>\n    <li><strong>We outline:</strong> concrete stabilisation tactics—temperature scaling, adaptive step sizes, and hybrid updates—that future work can test.</li>\n  </ul>\n  <p>By exposing the pitfalls of confidence weighting in the single-step regime, our study refines the design space for fast TTA and underscores the need to couple objective modifications with robust normalisation and optimisation control.</p>\n</section>\n\n<section>\n  <h2>Related Work</h2>\n  <p>Entropy-based TTA. The original TENT framework adapts BN affine parameters by minimising prediction entropy, achieving strong gains across synthetic corruptions but incurring multiple inner-loop steps. Several works refine this recipe through additional regularisers or second-order updates. Our work differs by retaining the core entropy objective yet re-weighting it to prioritise confident samples in a single step.</p>\n  <p>Normalisation-centric approaches. DELTA augments TENT with Test-time Batch Renormalisation and Dynamic Online re-weighting to mitigate inaccurate BN statistics and class-bias in the updates [zhao-2023-delta]. Whereas DELTA changes the normaliser and adds class-level weighting, CW-TENT leaves normalisation untouched and operates at the sample level. The two strategies are therefore complementary; however, our logs do not include DELTA, so direct comparison is left for future work.</p>\n  <p>Loss regularisation in related tasks. In weakly supervised salient object detection, tailored test-time regularisers have been shown to boost performance while maintaining stability [author-year-test]. These studies emphasise the risk of objective functions that over-amplify certain signals, a concern manifested in our collapse under aggressive confidence weighting.</p>\n  <p>In summary, prior work typically improves TTA by enhancing BN statistics or adding balanced regularisers. Our attempt to accelerate convergence via confidence-based loss shaping unmasks new stability challenges, highlighting the importance of joint design across loss, optimiser, and normalisation.</p>\n</section>\n\n<section>\n  <h2>Background</h2>\n  <p>Problem setting. Let f_θ denote a classifier trained on a source distribution and deployed on a target stream with unknown shift. Labels are unavailable at test time. The model processes each mini-batch sequentially and may update a designated subset of parameters before predicting the next batch.</p>\n  <p>Standard TENT. TENT keeps only the BN affine parameters (γ, β) trainable. For a batch B of size N with class-probability vectors p_i, TENT minimises the unweighted entropy loss L = Σ_i H(p_i), where H(p) = −Σ_c p_c log p_c. It performs K inner SGD steps (typically 3–10) and relies on current-batch statistics for BN.</p>\n  <p>Confidence-weighted modification. We hypothesise that noisy gradients arising from high-entropy samples hamper one-step convergence. Defining the confidence weight w_i = 1 – H(p_i)/log C in the range , we construct the weighted loss L_w = (Σ_i w_i H(p_i)) / (Σ_i w_i). When many samples are high-entropy, most weights shrink toward zero, potentially reducing gradient noise but also the effective batch size used by BN. This trade-off lies at the heart of our empirical investigation.</p>\n  <ul>\n    <li><strong>BN statistics:</strong> BN statistics depend on the full batch; if weighting effectively discards many samples, mean and variance estimates become unreliable.</li>\n    <li><strong>Learning rate:</strong> A learning rate chosen for multi-step optimisation may overshoot in the single-step setting.</li>\n    <li><strong>Weight saturation:</strong> Weight saturation may nullify stabilising gradients early in adaptation, permitting a single unreliable update to derail the model.</li>\n  </ul>\n  <p>Addressing these issues requires mechanisms beyond loss shaping, as will be revisited in Section Results.</p>\n</section>\n\n<section>\n  <h2>Method</h2>\n  <p>CW-TENT retains the TENT optimisation pipeline with two minimal changes: a confidence-weighted loss and a single inner step. For each incoming batch: 1 Set the model to training mode so BN uses batch statistics. 2 Compute logits, probabilities p_i, entropies H_i, and weights w_i = 1 – H_i/log C. 3 Form the loss L_w = (Σ_i w_i H_i)/(Σ_i w_i). 4 Back-propagate L_w and update γ, β with one SGD step (learning rate 1 × 10⁻³, momentum 0.9). 5 Return the model to evaluation mode.</p>\n  <pre><code># CW-TENT (one-step) update per incoming batch\n# Trainable params: BN affine (gamma, beta) only\n\nset_model_mode(\"train\")  # BN uses batch statistics\n\nlogits = model(batch)\nprobs  = softmax(logits)\nH_i    = entropy(probs)                 # H_i = -sum_c p_ic * log(p_ic)\nw_i    = 1.0 - H_i / log(C)\n\nL_w = sum(w_i * H_i) / sum(w_i)\n\nL_w.backward()\nsgd_update(params=[BN.gamma, BN.beta], lr=1e-3, momentum=0.9)\n\nset_model_mode(\"eval\")\n</code></pre>\n  <p>Implementation consists of enabling gradients on BN affine parameters and adding four lines to compute w and the weighted loss. Theoretical intuition predicts that emphasising low-entropy samples improves the signal-to-noise ratio of the gradient, permitting large steps or fewer iterations. Yet the same weighting reduces the sample count contributing to BN, potentially destabilising mean–variance estimates. Our experiments evaluate which effect dominates in practice.</p>\n</section>\n\n<section>\n  <h2>Experimental Setup</h2>\n  <p>Dataset and model. We follow the canonical TTA benchmark of CIFAR-10-C at corruption severity 5. The evaluation stream contains 10 000 images delivered sequentially. The backbone is a pre-trained ResNet-18 (11.7 million parameters).</p>\n  <ul>\n    <li><strong>Vanilla TENT:</strong> unweighted entropy, 10 SGD steps per batch.</li>\n    <li><strong>CW-TENT:</strong> confidence-weighted entropy, 1 SGD step per batch.</li>\n  </ul>\n  <p>Both adapters modify only BN affine parameters and employ SGD with learning rate 1 × 10⁻³, momentum 0.9.</p>\n  <p>Metrics. Primary: online top-1 accuracy on each batch and after the full stream (higher is better). Secondary: per-batch latency measured on a single NVIDIA A100, and qualitative diagnostics from learning curves and batch-level accuracy histograms.</p>\n  <p>Hardware and execution. All runs execute on one A100; latency is recorded with torch.cuda.Event timers.</p>\n  <p>Logged runs. The analysis draws on two complete logs: • proposed-ResNet-18-11-7M--CIFAR-10-C-severity-5 (CW-TENT, final accuracy 0.1011). • comparative-1-ResNet-18-11-7M--CIFAR-10-C-severity-5 (TENT, final accuracy 0.3741). The source-only adapter was planned but not executed, so it is omitted from the quantitative tables.</p>\n</section>\n\n<section>\n  <h2>Results</h2>\n  <p>Overall accuracy. After processing the full 10 000-image stream, CW-TENT attains 10.11 percent top-1 accuracy, whereas vanilla TENT reaches 37.41 percent. The gap of 27.3 points indicates a substantial failure of the confidence-weighted objective to maintain accuracy.</p>\n  <p>Convergence behaviour. Figure 2 shows that CW-TENT begins near the source checkpoint’s accuracy but collapses within ten batches, stabilising at chance-level performance. Vanilla TENT, while noisy, improves steadily over the stream. Batch-level accuracy histograms in Figure 3 reveal a bimodal distribution for CW-TENT, dominated by a low-accuracy mode, confirming widespread misclassification.</p>\n  <p>Computational cost. One gradient step per batch yields a 10× reduction in back-propagation and cuts per-batch latency from 7.1 ms (TENT) to 0.8 ms (CW-TENT). However, the accuracy deficit outweighs this benefit for most applications.</p>\n  <ul>\n    <li><strong>Normalisation instability:</strong> down-weighting discards many samples, so BN statistics are estimated from a handful of confident examples, leading to unreliable γ, β updates.</li>\n    <li><strong>Learning-rate overshoot:</strong> the step size suitable for 10-step optimisation proves too large for a single step on a sharper loss surface.</li>\n    <li><strong>Weight saturation:</strong> for CIFAR-10, entropy above 1.84 assigns w &lt; 0.2, eliminating stabilising gradients from the majority of early-stream samples.</li>\n  </ul>\n  <ul>\n    <li><strong>Suggested mitigations:</strong> scaling the learning rate by the batch-mean weight, introducing a temperature τ &gt; 1 in the weight definition, appending a tiny unweighted micro-step, and clipping large BN updates; none are tested in the present logs.</li>\n  </ul>\n  <p>Fairness considerations. Both runs share architecture, data stream, optimiser, and evaluation code; only the loss definition and number of inner steps differ.</p>\n  <figure>\n    <img src=\"images/final_accuracy_comparison.png\" style=\"width:70%\">\n    <figcaption>Figure 1: Final accuracy comparison between CW-TENT and TENT; higher is better.</figcaption>\n  </figure>\n  <figure>\n    <img src=\"images/learning_curve.png\" style=\"width:70%\">\n    <figcaption>Figure 2: Online accuracy over the 10 000-sample stream; higher is better.</figcaption>\n  </figure>\n  <figure>\n    <img src=\"images/batch_acc_distribution.png\" style=\"width:70%\">\n    <figcaption>Figure 3: Batch-level accuracy distribution for both adapters; higher is better.</figcaption>\n  </figure>\n  <figure>\n    <img src=\"images/confusion_matrix.png\" style=\"width:70%\">\n    <figcaption>Figure 4: Confusion matrices of the evaluated models; higher diagonal values are better.</figcaption>\n  </figure>\n  <p>Figure 5: Aggregated metrics file used to generate summary plots (filename: aggregated_metrics.json).</p>\n  <p>Figure 6: Per-run metrics JSON with detailed logs (filename: metrics.json).</p>\n  <p>Figure 7: Statistical significance tests comparing adapters (filename: significance_tests.json).</p>\n</section>\n\n<section>\n  <h2>Conclusion</h2>\n  <p>We introduced confidence-weighted entropy minimisation to accelerate BN-only test-time adaptation by collapsing the inner loop to a single gradient step. An empirical study on CIFAR-10-C reveals that, in its naïve form, the method dramatically underperforms the multi-step TENT baseline, achieving 10.11 percent versus 37.41 percent final accuracy. Detailed diagnostics attribute the collapse to unstable Batch-Norm statistics, learning-rate overshoot, and excessive weight saturation. Although CW-TENT delivers a ten-fold reduction in computation, its accuracy deficit currently precludes practical deployment.</p>\n  <p>Our findings contribute a carefully documented negative result that sharpens understanding of loss shaping in TTA. They stress that objective modifications must be co-designed with normalisation and optimisation mechanisms, echoing lessons from DELTA’s focus on robust statistics [zhao-2023-delta] and from regularised test-time training in related tasks [author-year-test]. Future work should implement temperature-scaled weights, adaptive learning rates proportional to the batch-mean weight, hybrid weighted-plus-unweighted updates, and improved normalisers to recover stability while retaining single-step efficiency.</p>\n</section>"
}
