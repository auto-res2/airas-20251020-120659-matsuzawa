
LLM Name: o3-2025-04-16
Input:
You are a cutting-edge AI researcher generating complete, executable code for research paper experiments with Hydra configuration management.

Based on the research method in # Current Research Method and experimental design in # Experimental Design, generate production-ready experiment code that integrates with Hydra for configuration management.

# Instructions: Complete Experiment Code Generation

## Core Requirements
- COMPLETE IMPLEMENTATION: Every component must be fully functional, production-ready, publication-worthy code. No "omitted for brevity", no "simplified version", no TODO, PLACEHOLDER, pass, or ...
- PYTORCH EXCLUSIVELY: Use PyTorch as the deep learning framework
- HYDRA INTEGRATION: Use Hydra to manage all experiment configurations from `config/run/*.yaml` files. Use `config_path="../config"` in all @hydra.main decorators
- COMPLETE DATA PIPELINE: Full data loading and preprocessing implementation. Use `.cache/` as the cache directory for all datasets and models (e.g., for HuggingFace, set `cache_dir=".cache/"`)
- WANDB REQUIRED: WandB is mandatory for metrics logging (except trial_mode validation)

## Hydra Configuration Structure
Each run config file (`config/run/{run_id}.yaml`) contains:
- run_id: Unique identifier for this run
- method: The method name (baseline, proposed, ablation, etc.)
- model: Model-specific parameters (name, architecture details, hyperparameters)
- dataset: Dataset-specific parameters (name, preprocessing settings, split ratios)
- training: Training hyperparameters (learning rate, batch size, epochs, optimizer settings, validation split)
- optuna: Hyperparameter search space definition for Optuna optimization

## Command Line Interface
The generated code must support the following CLI:

**Training (main.py):**
```bash
# Full experiment with WandB logging
uv run python -u -m src.main run={run_id} results_dir={path}

# Trial mode (validation only, WandB disabled)
uv run python -u -m src.main run={run_id} results_dir={path} trial_mode=true
```
- `run`: Experiment run_id (matching a run_id from config/run/*.yaml)
- `results_dir`: Output directory (passed from GitHub Actions workflow)
- `trial_mode=true` (optional): Lightweight execution for validation (epochs=1, batches limited to 1-2, disable Optuna n_trials=0, **WandB disabled**)

**Evaluation (evaluate.py, independent execution):**
```bash
uv run python -m src.evaluate results_dir={path} run_ids='["run-1", "run-2", ...]'
```
- `results_dir`: Directory containing experiment metadata and where outputs will be saved
- `run_ids`: JSON string list of run IDs to evaluate (e.g., '["run-1-proposed-bert-glue", "run-2-baseline-bert-glue"]')
- Executed as a separate workflow after all training runs complete
- **NOT called from main.py**

## Script Structure (ExperimentCode format)
Generate complete code for these files ONLY. Do not create any additional files beyond this structure:

**`src/train.py`**: Single experiment run executor
- Uses Hydra config to load all parameters
- Called as subprocess by main.py
- Responsibilities:
  * Train model with given configuration
  * Initialize WandB: `wandb.init(entity=cfg.wandb.entity, project=cfg.wandb.project, id=cfg.run.run_id, config=OmegaConf.to_container(cfg, resolve=True), resume="allow")`
  * Skip `wandb.init()` if `cfg.wandb.mode == "disabled"` (trial_mode)
  * Log ALL metrics to WandB: `wandb.log({"train_loss": 0.5, "val_acc": 0.85, "epoch": 1, ...})`
  * Print WandB run URL to stdout
- **NO results.json, no stdout JSON output, no figure generation**

**`src/evaluate.py`**: Independent evaluation and visualization script
- **Execution**: Run independently via `uv run python -m src.evaluate results_dir={path} run_ids='["run-1", "run-2"]'`
- **NOT called from main.py** - executes as separate workflow after all training completes
- **Responsibilities**:
  * Parse command line arguments:
    - `results_dir`: Output directory path
    - `run_ids`: JSON string list of run IDs (parse with `json.loads(args.run_ids)`)
  * Load WandB config from `{results_dir}/config.yaml`
  * Retrieve experimental data from WandB API for specified run_ids:
    ```python
    import json
    api = wandb.Api()
    run_ids = json.loads(args.run_ids)  # Parse JSON string to list
    for run_id in run_ids:
        run = api.run(f"{entity}/{project}/{run_id}")
        metrics_df = run.history()  # pandas DataFrame with all logged metrics
    ```
  * **STEP 1: Per-Run Processing** (for each run_id):
    - Export run-specific metrics to: `{results_dir}/{run_id}/metrics.json`
    - Generate run-specific figures (learning curves, confusion matrices) to: `{results_dir}/{run_id}/`
    - Each run should have its own subdirectory with its metrics and figures
  * **STEP 2: Aggregated Analysis** (after processing all runs):
    - Export aggregated metrics to: `{results_dir}/comparison/aggregated_metrics.json`
    - Compute secondary/derived metrics (e.g., improvement rate: (proposed - baseline) / baseline)
    - Generate comparison figures to: `{results_dir}/comparison/`:
      * Cross-run comparison charts (bar charts, box plots)
      * Performance metrics tables
      * Statistical significance tests
  * **Figure Generation Guidelines**:
    - Use matplotlib or seaborn with proper legends, annotations, tight_layout
    - For line graphs: annotate significant values (final/best values)
    - For bar graphs: annotate values above each bar
    - Follow naming convention: `<figure_topic>[_<condition>][_pairN].pdf`
  * Print all generated file paths to stdout (both per-run and comparison)

**`src/preprocess.py`**: Complete preprocessing pipeline implementation for the specified datasets

**`src/model.py`**: Complete model architecture implementations for all methods (proposed and comparative methods)

**`src/main.py`**: Main orchestrator
- Receives run_id via Hydra, launches train.py as subprocess, manages logs
- **DOES NOT call evaluate.py** (evaluate.py runs independently in separate workflow)
- Use `@hydra.main(config_path="../config")` since execution is from repository root
- Pass all Hydra overrides to train.py subprocess (e.g., `wandb.mode=disabled`, `trial_mode=true`)
- In trial_mode, automatically set `wandb.mode=disabled`

**`config/config.yaml`**: Main Hydra configuration file
- MUST include WandB configuration:
  ```yaml
  wandb:
    entity: gengaru617-personal
    project: 251020-test
    mode: online  # Automatically set to "disabled" in trial_mode
  ```

**`pyproject.toml`**: Complete project dependencies
- MUST include: `hydra-core`, `wandb` (required)
- Include as needed: `optuna`, `torch`, `transformers`, `datasets`, etc.


## Key Implementation Focus Areas
1. **Hydra-Driven Configuration**: All parameters loaded from run configs dynamically
2. **Algorithm Core**: Full implementation of the proposed method with proper abstraction
3. **Trial Mode Behavior**: trial_mode=true automatically disables WandB (sets wandb.mode=disabled)
4. **Run Execution**: main.py executes a single run_id passed via CLI (GitHub Actions dispatches multiple runs separately)
5. **WandB Integration**: All metrics logged to WandB; train.py does NOT output JSON to stdout or save results.json
6. **Independent Evaluation**: evaluate.py runs separately, fetches data from WandB API, generates all figures



## Code Validation Feedback


**Previous Validation Issue**: Multiple blocking issues:
1. Package structure vs. import style: train.py and model.py use relative imports (from .preprocess …) which only work if “src” is an installed / explicit package. Because the file-list forbids a src/__init__.py, running “python -m src.train” will raise ImportError.
2. main.py forwards the override "run={cfg.run.run_id}" to the subprocess. Hydra interprets this as a **config group selection**, not as a scalar value, so it will look for a file config/run/<run-id>.yaml whose name literally equals the run_id string with spaces & parentheses and will crash. Correct key should be e.g. "run.run_id={cfg.run.run_id}" or omit altogether.
3. evaluate.py tries to read results_dir/config.yaml via wandb.util.load_yaml (function does not exist) – this raises AttributeError before any evaluation logic runs.
4. Required CLI path “uv run python -u -m src.main run={run_id} …” relies on main.py, but because of #2 subprocess will fail to compose config; thus interface is not functional.
5. Optuna integration claimed but never invoked; trial_mode flag disables it via override in main.py, however cfg.optuna.n_trials is never used anywhere else, so normal (non-trial) runs silently ignore Optuna.
6. Hydra default config (config/config.yaml) lacks mandatory sections (method, model, dataset, training, optuna); code assumes their presence → KeyError unless every field is provided by the run config.
Because of these issues the code is not yet executable or production-ready.
**Action Required**: Address this issue in the implementation.

**Previous Code (for reference)**:
{"config_yaml": "defaults:\n  - _self_\n\n# Global settings that can be overridden by run-specific configs\nrun: {}\ntrial_mode: false\nresults_dir: ./results\n\nwandb:\n  entity: gengaru617-personal\n  project: 251020-test\n  mode: online\n", "evaluate_py": "# src/evaluate.py\n\"\"\"Independent evaluation script.\nFetches metrics from WandB, exports per-run metrics/figures and aggregated comparisons.\"\"\"\n\nimport argparse\nimport json\nfrom pathlib import Path\nimport sys\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport wandb\n\nsns.set(style=\"whitegrid\")\n\n# --------------------------- Helpers ------------------------------------\n\ndef save_learning_curve(metrics_df: pd.DataFrame, out_path: Path, metric: str = \"top1_accuracy\"):\n    plt.figure(figsize=(6, 4))\n    sns.lineplot(x=metrics_df.index, y=metrics_df[metric])\n    best_val = metrics_df[metric].max()\n    plt.scatter(metrics_df[metric].idxmax(), best_val, color=\"red\")\n    plt.text(metrics_df[metric].idxmax(), best_val, f\"{best_val:.2f}\")\n    plt.xlabel(\"Step\")\n    plt.ylabel(metric.replace(\"_\", \" \"))\n    plt.title(f\"{metric} vs Steps\")\n    plt.tight_layout()\n    plt.savefig(out_path)\n    plt.close()\n\n\ndef print_and_collect(path_list, path: Path):\n    path_list.append(str(path))\n    print(str(path))\n\n# --------------------------- Main ---------------------------------------\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Evaluate experiment runs from WandB logs\")\n    parser.add_argument(\"results_dir\", type=str, help=\"Directory to save evaluation artefacts\")\n    parser.add_argument(\"run_ids\", type=str, help=\u0027JSON string list of run IDs e.g. \"[\\\"run1\\\",\\\"run2\\\"]\"\u0027)\n    args = parser.parse_args()\n\n    results_root = Path(args.results_dir)\n    results_root.mkdir(parents=True, exist_ok=True)\n\n    run_ids = json.loads(args.run_ids)\n\n    # Load global wandb config\n    config_path = results_root / \"config.yaml\"\n    if config_path.exists():\n        cfg_global = wandb.util.load_yaml(str(config_path))\n        entity = cfg_global.get(\"wandb\", {}).get(\"entity\")\n        project = cfg_global.get(\"wandb\", {}).get(\"project\")\n    else:\n        print(f\"Config file {config_path} not found. Please place config.yaml in results_dir.\")\n        sys.exit(1)\n\n    api = wandb.Api()\n\n    aggregated_metrics = {}\n    generated_files = []\n\n    for run_id in run_ids:\n        run_dir = results_root / run_id\n        run_dir.mkdir(parents=True, exist_ok=True)\n        try:\n            run = api.run(f\"{entity}/{project}/{run_id}\")\n        except wandb.errors.CommError:\n            print(f\"WandB Run {run_id} not found. Skipping.\")\n            continue\n\n        history_df = run.history(samples=100000)\n        metrics_json_path = run_dir / \"metrics.json\"\n        history_df.to_json(metrics_json_path, orient=\"records\")\n        print_and_collect(generated_files, metrics_json_path)\n\n        # Learning curve\n        lc_path = run_dir / \"learning_curve_top1_accuracy.pdf\"\n        save_learning_curve(history_df, lc_path, metric=\"top1_accuracy\")\n        print_and_collect(generated_files, lc_path)\n\n        # Store final metrics for aggregation\n        if \"top1_accuracy\" in history_df.columns:\n            final_acc = history_df[\"top1_accuracy\"].dropna().iloc[-1]\n            aggregated_metrics[run_id] = {\n                \"top1_accuracy\": float(final_acc)\n            }\n\n    # --------------------- Aggregated analysis -------------------------\n    comparison_dir = results_root / \"comparison\"\n    comparison_dir.mkdir(exist_ok=True)\n\n    agg_json_path = comparison_dir / \"aggregated_metrics.json\"\n    with open(agg_json_path, \"w\") as f:\n        json.dump(aggregated_metrics, f, indent=2)\n    print_and_collect(generated_files, agg_json_path)\n\n    # Bar chart comparison\n    if aggregated_metrics:\n        labels = list(aggregated_metrics.keys())\n        values = [v[\"top1_accuracy\"] for v in aggregated_metrics.values()]\n        plt.figure(figsize=(8, 4))\n        ax = sns.barplot(x=labels, y=values)\n        for p, val in zip(ax.patches, values):\n            ax.annotate(f\"{val:.2f}\", (p.get_x() + p.get_width() / 2.0, val),\n                        ha=\u0027center\u0027, va=\u0027bottom\u0027)\n        plt.xticks(rotation=45, ha=\"right\")\n        plt.ylabel(\"Top-1 Accuracy (%)\")\n        plt.title(\"Final Top-1 Accuracy Comparison\")\n        plt.tight_layout()\n        bar_path = comparison_dir / \"top1_accuracy_comparison.pdf\"\n        plt.savefig(bar_path)\n        plt.close()\n        print_and_collect(generated_files, bar_path)\n\n    # Print summary of generated paths\n    print(\"\\nGenerated artefacts:\")\n    for p in generated_files:\n        print(p)\n\n\nif __name__ == \"__main__\":\n    main()\n", "main_py": "# src/main.py\n\"\"\"Main orchestrator that launches a single experiment run.\nThis script is called by CLI and spawns train.py as a subprocess.\"\"\"\n\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom typing import List\n\nimport hydra\nfrom omegaconf import OmegaConf\n\n\n@hydra.main(config_path=\"../config\", config_name=\"config\", version_base=\"1.3\")\ndef main(cfg):\n    # Construct command to call train.py with the same overrides\n    python_exec = sys.executable\n    script_module = \"src.train\"\n\n    overrides: List[str] = []\n    # Mandatory\n    overrides.append(f\"run={cfg.run.run_id}\")\n    overrides.append(f\"results_dir={cfg.results_dir}\")\n\n    if cfg.get(\"trial_mode\", False):\n        overrides.append(\"trial_mode=true\")\n        overrides.append(\"wandb.mode=disabled\")\n        overrides.append(\"optuna.n_trials=0\")\n\n    # Maintain additional CLI overrides passed by user (after + sign)\n    # Hydra passes unknown overrides through cfg.keys so we rely on sys.argv filtering\n    additional_overrides = [arg for arg in sys.argv[1:] if \u0027=\u0027 in arg and not arg.startswith(\u0027hydra.\u0027)]\n    overrides.extend(additional_overrides)\n\n    cmd = [python_exec, \"-u\", \"-m\", script_module] + overrides\n    print(\"Launching: \", \" \".join(cmd))\n    subprocess.check_call(cmd)\n\n\nif __name__ == \"__main__\":\n    main()\n", "model_py": "# src/model.py\n\"\"\"Model construction and adaptation-specific utilities.\"\"\"\nfrom typing import List\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport timm\n\n# --------------------------- Model builder ------------------------------\n\ndef build_model(model_cfg):\n    model_name = model_cfg.checkpoint if hasattr(model_cfg, \u0027checkpoint\u0027) else model_cfg.name\n    model = timm.create_model(model_name, pretrained=model_cfg.pretrained, num_classes=10)\n    return model\n\n# --------------------------- Freeze utilities ---------------------------\n\ndef freeze_non_bn_parameters(model: nn.Module):\n    \"\"\"Freeze all parameters except BatchNorm affine scales/biases.\"\"\"\n    for param in model.parameters():\n        param.requires_grad = False\n    for m in model.modules():\n        if isinstance(m, (nn.BatchNorm2d, nn.BatchNorm1d)):\n            if m.weight is not None:\n                m.weight.requires_grad = True\n            if m.bias is not None:\n                m.bias.requires_grad = True\n\n\ndef initialize_bn_adaptation(model: nn.Module):\n    \"\"\"Set BatchNorm layers to eval mode but keep running stats frozen as in TENT.\"\"\"\n    for m in model.modules():\n        if isinstance(m, (nn.BatchNorm2d, nn.BatchNorm1d)):\n            m.track_running_stats = False  # use batch stats\n            m.eval()\n\n# --------------------------- Losses -------------------------------------\n\nclass EntropyLoss(nn.Module):\n    \"\"\"Unweighted prediction entropy.\"\"\"\n\n    def forward(self, logits: torch.Tensor) -\u003e torch.Tensor:\n        probs = F.softmax(logits, dim=1)\n        ent = -(probs * probs.clamp_min(1e-12).log()).sum(dim=1)\n        return ent.mean()\n\n\nclass ConfidenceWeightedEntropyLoss(nn.Module):\n    \"\"\"Confidence-weighted entropy where weight_i = 1 \u2212 H_i / log(C).\"\"\"\n\n    def forward(self, logits: torch.Tensor) -\u003e torch.Tensor:\n        probs = F.softmax(logits, dim=1)\n        ent = -(probs * probs.clamp_min(1e-12).log()).sum(dim=1)\n        num_classes = logits.size(1)\n        w = 1.0 - ent / torch.log(torch.tensor(num_classes, device=logits.device, dtype=ent.dtype))\n        loss = (w * ent).sum() / w.sum().clamp_min(1e-12)\n        return loss\n", "preprocess_py": "# src/preprocess.py\n\"\"\"Data loading \u0026 preprocessing utilities.\"\"\"\nimport os\nimport tarfile\nfrom pathlib import Path\nfrom typing import Tuple, List, Union\n\nimport numpy as np\nfrom PIL import Image\nimport requests\nfrom tqdm import tqdm\n\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms\n\n# --------------------------- CIFAR-10-C constants ------------------------\nCIFAR10C_URL = \"https://zenodo.org/record/3555552/files/CIFAR-10-C.tar?download=1\"\nCORRUPTIONS = [\n    \u0027gaussian_noise\u0027, \u0027shot_noise\u0027, \u0027impulse_noise\u0027, \u0027defocus_blur\u0027, \u0027glass_blur\u0027,\n    \u0027motion_blur\u0027, \u0027zoom_blur\u0027, \u0027snow\u0027, \u0027frost\u0027, \u0027fog\u0027, \u0027brightness\u0027, \u0027contrast\u0027,\n    \u0027elastic_transform\u0027, \u0027pixelate\u0027, \u0027jpeg_compression\u0027\n]\n\n# --------------------------- Utilities ----------------------------------\n\ndef download_and_extract(url: str, dest: Path):\n    \"\"\"Download and extract a tar file to destination.\"\"\"\n    dest.mkdir(parents=True, exist_ok=True)\n    filename = dest / \"CIFAR-10-C.tar\"\n    if not filename.exists():\n        print(f\"Downloading CIFAR-10-C to {filename} ...\")\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n        total = int(response.headers.get(\u0027content-length\u0027, 0))\n        with open(filename, \u0027wb\u0027) as file, tqdm(\n                desc=\"CIFAR-10-C\", total=total, unit=\u0027iB\u0027, unit_scale=True) as bar:\n            for data in response.iter_content(chunk_size=1024 * 1024):\n                size = file.write(data)\n                bar.update(size)\n    extract_dir = dest / \"CIFAR-10-C\"\n    if not extract_dir.exists():\n        print(f\"Extracting {filename} ...\")\n        with tarfile.open(filename) as tar:\n            tar.extractall(path=dest)\n    return extract_dir\n\n# --------------------------- Dataset ------------------------------------\n\nclass NumpyArrayDataset(Dataset):\n    def __init__(self, images: np.ndarray, labels: np.ndarray, transform=None):\n        assert len(images) == len(labels)\n        self.images = images\n        self.labels = labels\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.images)\n\n    def __getitem__(self, idx):\n        img = Image.fromarray(self.images[idx])\n        target = int(self.labels[idx])\n        if self.transform:\n            img = self.transform(img)\n        return img, target\n\n# --------------------------- Loader builder -----------------------------\n\ndef load_cifar10c(severity: int = 5, corruption_types: Union[str, List[str]] = \u0027all\u0027,\n                  cache_dir: Path = Path(\u0027.cache/datasets/cifar10_c\u0027)) -\u003e Tuple[np.ndarray, np.ndarray]:\n    if severity \u003c 1 or severity \u003e 5:\n        raise ValueError(\"Severity must be in [1,5]\")\n    extract_dir = download_and_extract(CIFAR10C_URL, cache_dir)\n\n    if corruption_types == \u0027all\u0027:\n        corruption_types = CORRUPTIONS\n    images_list = []\n    labels = np.load(extract_dir / \u0027labels.npy\u0027)\n\n    for corr in corruption_types:\n        data = np.load(extract_dir / f\u0027{corr}.npy\u0027)\n        start = (severity - 1) * 10000\n        end = severity * 10000\n        images_list.append(data[start:end])\n    images = np.concatenate(images_list, axis=0)\n    labels_full = np.tile(labels, len(corruption_types))\n    return images, labels_full\n\n\ndef build_dataloader(dataset_cfg, split: str = \u0027test\u0027, cache_dir: str = \u0027.cache/\u0027) -\u003e DataLoader:\n    cache_dir_path = Path(cache_dir)\n\n    if dataset_cfg.name.lower() == \u0027cifar-10-c\u0027:\n        images, labels = load_cifar10c(\n            severity=dataset_cfg.severity,\n            corruption_types=dataset_cfg.corruption_types,\n            cache_dir=cache_dir_path / \u0027cifar10_c\u0027\n        )\n        transform = transforms.Compose([\n            transforms.ToTensor(),\n            transforms.Normalize(mean=dataset_cfg.normalization.mean,\n                                 std=dataset_cfg.normalization.std),\n        ])\n        ds = NumpyArrayDataset(images, labels, transform=transform)\n        loader = DataLoader(ds, batch_size=dataset_cfg.batch_size, shuffle=False,\n                            num_workers=4, pin_memory=True)\n        return loader\n    else:\n        raise ValueError(f\"Unsupported dataset {dataset_cfg.name}\")\n", "pyproject_toml": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"cw_tent_experiments\"\nversion = \"0.1.0\"\ndescription = \"Confidence-Weighted TENT experiments with Hydra configuration management\"\nreadme = \"README.md\"\nauthors = [\n  {name = \"AI Autogenerated\", email = \"noreply@example.com\"}\n]\nrequires-python = \"\u003e=3.8\"\n\n[project.dependencies]\ntorch = \"*\"\ntorchvision = \"*\"\n# timm provides model zoo\n# Hydra \u0026 config management\nhydra-core = \"*\"\n# optimisation\noptuna = \"*\"\n# logging\nwandb = \"*\"\n# data \u0026 utils\nnumpy = \"*\"\npandas = \"*\"\nmatplotlib = \"*\"\nseaborn = \"*\"\nscikit-learn = \"*\"\nrequests = \"*\"\nPillow = \"*\"\ntqdm = \"*\"\n", "train_py": "# src/train.py\nimport os\nimport sys\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport torch\nimport torch.nn.functional as F\nfrom omegaconf import OmegaConf\nimport hydra\nfrom hydra.utils import instantiate\n\nimport wandb\n\nfrom .preprocess import build_dataloader\nfrom .model import (build_model, freeze_non_bn_parameters, initialize_bn_adaptation,\n                    EntropyLoss, ConfidenceWeightedEntropyLoss)\n\n# --------------------------- Utility ------------------------------------\n\ndef accuracy(output: torch.Tensor, target: torch.Tensor, topk=(1,)):\n    \"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"\n    maxk = max(topk)\n    batch_size = target.size(0)\n    _, pred = output.topk(maxk, 1, True, True)\n    pred = pred.t()\n    correct = pred.eq(target.view(1, -1).expand_as(pred))\n\n    res = []\n    for k in topk:\n        correct_k = correct[:k].reshape(-1).float().sum(0, keepdim=True)\n        res.append(correct_k.mul_(100.0 / batch_size))\n    return res\n\n# --------------------------- Main Train ---------------------------------\n\n@hydra.main(config_path=\"../config\", config_name=\"config\", version_base=\"1.3\")\ndef main(cfg):\n    # ------------------------------------------------------------------\n    # Trial-mode shortcuts ------------------------------------------------\n    trial_mode = bool(cfg.get(\"trial_mode\", False))\n    if trial_mode:\n        cfg.wandb.mode = \"disabled\"\n        cfg.optuna.n_trials = 0\n        cfg.training.epochs = 1\n\n    # -------------------------- Device --------------------------------\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    # --------------------------- WANDB -------------------------------\n    if cfg.wandb.mode == \"disabled\":\n        os.environ[\"WANDB_MODE\"] = \"disabled\"\n\n    if cfg.wandb.mode != \"disabled\":\n        wandb_run = wandb.init(\n            entity=cfg.wandb.entity,\n            project=cfg.wandb.project,\n            id=cfg.run.run_id,\n            config=OmegaConf.to_container(cfg, resolve=True),\n            resume=\"allow\",\n            reinit=True,\n        )\n        print(f\"WandB URL: {wandb_run.url}\")\n    else:\n        wandb_run = None\n\n    # --------------------------- Data ---------------------------------\n    dataloader = build_dataloader(cfg.dataset, split=\"test\", cache_dir=\".cache/\")\n\n    # --------------------------- Model --------------------------------\n    model = build_model(cfg.model).to(device)\n    model.eval()\n\n    # Freeze everything except BN affine params.\n    freeze_non_bn_parameters(model)\n    initialize_bn_adaptation(model)\n\n    # --------------------------- Optimizer ---------------------------\n    opt_name = cfg.training.optimizer.lower()\n    if opt_name == \"sgd\":\n        optimizer = torch.optim.SGD(\n            filter(lambda p: p.requires_grad, model.parameters()),\n            lr=cfg.training.learning_rate,\n            momentum=cfg.training.momentum,\n            weight_decay=cfg.training.weight_decay,\n        )\n    elif opt_name == \"adam\":\n        optimizer = torch.optim.Adam(\n            filter(lambda p: p.requires_grad, model.parameters()),\n            lr=cfg.training.learning_rate,\n            weight_decay=cfg.training.weight_decay,\n        )\n    else:\n        raise ValueError(f\"Unsupported optimizer: {opt_name}\")\n\n    # --------------------------- Loss ---------------------------------\n    if cfg.training.loss == \"entropy\":\n        criterion = EntropyLoss()\n    elif cfg.training.loss == \"confidence_weighted_entropy\":\n        criterion = ConfidenceWeightedEntropyLoss()\n    else:\n        raise ValueError(f\"Unsupported loss {cfg.training.loss}\")\n\n    # -------------------------- Adaptation Loop ----------------------\n    global_step = 0\n    correct_tot = 0\n    total = 0\n    loss_avg = 0.0\n\n    for epoch in range(cfg.training.epochs):\n        for batch_idx, (inputs, targets) in enumerate(dataloader):\n            if trial_mode and batch_idx \u003e= 2:\n                break  # run only two batches in trial mode\n\n            inputs = inputs.to(device, non_blocking=True)\n            targets = targets.to(device, non_blocking=True)\n\n            # Forward before adaptation (prediction w/o grad for metric)\n            with torch.no_grad():\n                logits = model(inputs)\n            acc1, = accuracy(logits, targets, topk=(1,))\n\n            # ------------------ Adaptation ---------------------------\n            model.train()  # use batch statistics\n            for _ in range(cfg.training.inner_steps):\n                optimizer.zero_grad()\n                outputs = model(inputs)\n                loss = criterion(outputs)\n                loss.backward()\n                optimizer.step()\n            model.eval()\n            # --------------------------------------------------------\n\n            loss_avg = (loss_avg * global_step + loss.item()) / (global_step + 1)\n            correct_tot += acc1.item() * targets.size(0) / 100.0\n            total += targets.size(0)\n\n            if wandb_run is not None:\n                wandb.log({\n                    \"step\": global_step,\n                    \"train_loss\": loss.item(),\n                    \"top1_batch_acc\": acc1.item(),\n                }, step=global_step)\n\n            global_step += 1\n\n    # --------------------------- Summary -----------------------------\n    top1_final = correct_tot / total * 100.0\n    print(f\"Run {cfg.run.run_id}: Top-1 accuracy {top1_final:.2f}%\")\n    if wandb_run is not None:\n        wandb.log({\"top1_accuracy\": top1_final})\n        wandb_run.finish()\n\n\nif __name__ == \"__main__\":\n    main()\n"}

Fix the issues identified above while preserving the correct parts of the implementation.



# Experimental Environment
NVIDIA A100×8
VRAM：80GB×8
RAM：2048 GB

# Current Research Method
{
    "Open Problems": "Most popular test-time adaptation (TTA) methods such as TENT adapt only BatchNorm affine parameters by minimizing prediction entropy on the incoming test stream. Although very effective, they often require 3-10 gradient steps for each incoming mini-batch to reach their best performance. The slow convergence mainly comes from noisy gradients produced by low-confidence (high-entropy) samples that dominate early in adaptation. A simple mechanism to down-weight these uncertain samples during optimization is missing.",
    "Methods": "Confidence-Weighted Entropy Minimization (CW-TENT).\n1. Keep the original TENT objective L = Σ_i H(p_i) where H is entropy.\n2. Introduce a scalar weight per sample w_i = 1 – H(p_i)/log(C)  (ranges in [0,1]; C = #classes).\n3. Replace the loss with the weighted variant  L_w = Σ_i w_i · H(p_i) / Σ_i w_i.\n4. Use the same SGD update of BatchNorm affine parameters, but with a single gradient step per mini-batch (optionally with momentum=0.9).\nTheoretical intuition: high-confidence samples (low entropy) are already close to the target domain optimum and provide reliable gradients; amplifying their contribution yields a cleaner gradient direction, allowing larger learning rate or fewer steps, hence faster convergence.",
    "Experimental Setup": "Dataset: CIFAR-10-C with 15 corruption types, severity 5 (standard TTA benchmark).\nModel: Pre-trained ResNet-18.\nBaselines: 1) Source model (no adaptation). 2) Original TENT (default 10 inner steps). 3) CW-TENT (1 inner step).\nMetric: Top-1 accuracy after processing the full test stream; also accuracy after first K (e.g., 1, 3) adaptation steps to measure convergence speed.",
    "Experimental Code": "import torch, torch.nn.functional as F\n\ndef entropy(p):\n    return -(p * p.log()).sum(1)\n\nclass CWTentAdapter:\n    def __init__(self, model, lr=1e-3, momentum=0.9):\n        self.model = model.eval()\n        self.model.requires_grad_(False)\n        # enable gradients for affine BN params only\n        for m in model.modules():\n            if isinstance(m, torch.nn.BatchNorm2d):\n                m.weight.requires_grad_(True)\n                m.bias.requires_grad_(True)\n        self.optimizer = torch.optim.SGD(filter(lambda p: p.requires_grad, model.parameters()), lr=lr, momentum=momentum)\n\n    @torch.no_grad()\n    def predict(self, x):\n        return self.model(x).softmax(1)\n\n    def adapt(self, x):\n        self.model.train()        # BN uses batch statistics\n        self.optimizer.zero_grad()\n        logits = self.model(x)\n        probs = logits.softmax(1)\n        H = entropy(probs)\n        w = 1 - H / torch.log(torch.tensor(probs.size(1), device=x.device))\n        loss = (w * H).sum() / w.sum()\n        loss.backward()\n        self.optimizer.step()\n        self.model.eval()\n        return probs.detach()\n",
    "Expected Result": "With only one gradient step per mini-batch, CW-TENT is expected to match or surpass the accuracy of TENT that uses 5–10 steps. For example on CIFAR-10-C severity 5: Source 58.7%, TENT (10 steps) 71.0%, CW-TENT (1 step) ≈71.5%. Convergence plot should show CW-TENT reaching peak accuracy after the first step, whereas TENT needs several.",
    "Expected Conclusion": "A tiny modification—confidence-weighted entropy—suppresses noisy gradients from uncertain samples and lets TENT converge in a single step. The change is trivial to implement (four extra lines) yet meaningfully cuts computation and latency at test time, making TTA more practical for real-time deployment."
}

# Experimental Design
- Summary: The experiment demonstrates that Confidence-Weighted TENT (CW-TENT) enables fast, one-step test-time adaptation by down-weighting high-entropy (low-confidence) samples in the classic entropy-minimisation objective used by TENT. A pre-trained ResNet-18 is sequentially exposed to the CIFAR-10-C corruption stream (severity-5). At every incoming mini-batch the model first produces predictions, then performs one SGD update on BatchNorm affine parameters using the confidence-weighted entropy loss. Performance is evaluated as the stream proceeds and compared against: (1) the frozen source model (no adaptation) and (2) the original TENT that applies 10 inner optimisation steps. All runs share identical data order, initial weights and hardware (8×H200, 144 GB each). Hyper-parameter sweeps on learning-rate, momentum and weight-decay are carried out with random search (30 trials) on a held-out corruption set to obtain fair settings for both CW-TENT and the baseline.
- Evaluation metrics: ['Top-1 Accuracy', 'Average Accuracy After First Adaptation Step']

# Experiment Runs

- Run ID: proposed-ResNet-18 (11M)-CIFAR-10-C (severity 5)
  Method: proposed
  Model: ResNet-18 (11M)
  Dataset: CIFAR-10-C (severity 5)
  Config File: config/run/proposed-ResNet-18 (11M)-CIFAR-10-C (severity 5).yaml
  
  Config Content:
  ```yaml
  run_id: "proposed-ResNet-18 (11M)-CIFAR-10-C (severity 5)"
method: proposed
model:
  name: ResNet-18
  provider: timm
  checkpoint: resnet18.a1_in1k
  num_parameters: 11700000
  pretrained: true
  trainable_parameters:
    - BatchNorm2d.weight
    - BatchNorm2d.bias
dataset:
  name: CIFAR-10-C
  severity: 5
  corruption_types: all            # 15 standard corruptions
  normalization:
    mean: [0.4914, 0.4822, 0.4465]
    std:  [0.2470, 0.2435, 0.2616]
  batch_size: 64
training:
  adaptation: true                 # test-time adaptation instead of full training
  inner_steps: 1                   # CW-TENT uses a single gradient step
  loss: confidence_weighted_entropy
  optimizer: sgd
  learning_rate: 0.001
  momentum: 0.9
  weight_decay: 0.0
  epochs: 1                        # one pass over the test stream
  lr_schedule: constant
optuna:
  n_trials: 30
  direction: maximize
  metric: top1_accuracy
  search_space:
    learning_rate:
      type: loguniform
      low: 1e-4
      high: 1e-2
    momentum:
      type: uniform
      low: 0.0
      high: 0.99
    weight_decay:
      type: loguniform
      low: 1e-6
      high: 1e-3
    batch_size:
      type: categorical
      choices: [32, 64, 128]

  ```
  

- Run ID: comparative-1-ResNet-18 (11M)-CIFAR-10-C (severity 5)
  Method: comparative-1
  Model: ResNet-18 (11M)
  Dataset: CIFAR-10-C (severity 5)
  Config File: config/run/comparative-1-ResNet-18 (11M)-CIFAR-10-C (severity 5).yaml
  
  Config Content:
  ```yaml
  run_id: "comparative-1-ResNet-18 (11M)-CIFAR-10-C (severity 5)"
method: comparative-1      # Original TENT baseline
model:
  name: ResNet-18
  provider: timm
  checkpoint: resnet18.a1_in1k
  num_parameters: 11700000
  pretrained: true
  trainable_parameters:
    - BatchNorm2d.weight
    - BatchNorm2d.bias
dataset:
  name: CIFAR-10-C
  severity: 5
  corruption_types: all
  normalization:
    mean: [0.4914, 0.4822, 0.4465]
    std:  [0.2470, 0.2435, 0.2616]
  batch_size: 64
training:
  adaptation: true
  inner_steps: 10                  # classic TENT uses 10 inner optimisation steps
  loss: entropy
  optimizer: sgd
  learning_rate: 0.001
  momentum: 0.9
  weight_decay: 0.0
  epochs: 1
  lr_schedule: constant
optuna:
  n_trials: 30
  direction: maximize
  metric: top1_accuracy
  search_space:
    learning_rate:
      type: loguniform
      low: 1e-4
      high: 1e-2
    momentum:
      type: uniform
      low: 0.0
      high: 0.99
    weight_decay:
      type: loguniform
      low: 1e-6
      high: 1e-3
    batch_size:
      type: categorical
      choices: [32, 64, 128]

  ```
  


# External Resources (Use these for implementation)

**HuggingFace Models:**

- ID: timm/resnet18.a1_in1k

- Code: from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model('resnet18.a1_in1k', pretrained=True)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

top5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet18.a1_in1k',
    pretrained=True,
    features_only=True,
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1

for o in output:
    # print shape of each feature map in output
    # e.g.:
    #  torch.Size([1, 64, 112, 112])
    #  torch.Size([1, 64, 56, 56])
    #  torch.Size([1, 128, 28, 28])
    #  torch.Size([1, 256, 14, 14])
    #  torch.Size([1, 512, 7, 7])

    print(o.shape)

from urllib.request import urlopen
from PIL import Image
import timm

img = Image.open(urlopen(
    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'
))

model = timm.create_model(
    'resnet18.a1_in1k',
    pretrained=True,
    num_classes=0,  # remove classifier nn.Linear
)
model = model.eval()

# get model specific transforms (normalization, resize)
data_config = timm.data.resolve_model_data_config(model)
transforms = timm.data.create_transform(**data_config, is_training=False)

output = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor

# or equivalently (without needing to set num_classes=0)

output = model.forward_features(transforms(img).unsqueeze(0))
# output is unpooled, a (1, 512, 7, 7) shaped tensor

output = model.forward_head(output, pre_logits=True)
# output is a (1, num_features) shaped tensor



**HuggingFace Datasets:**



Generate complete, production-ready experiment code that integrates with Hydra configuration system.
Output:
{
    "train_py": "# src/train.py\n\"\"\"Training script executed as a subprocess by main.py\nImplements (1) single-run CW-TENT / baseline adaptation and (2) optional\nhyper-parameter search with Optuna.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport os\nimport copy\nfrom pathlib import Path\nfrom typing import Dict, Any, List\n\nimport hydra\nfrom hydra.utils import get_original_cwd\nfrom omegaconf import OmegaConf\nimport torch\nimport torch.nn.functional as F\nimport optuna\nimport wandb\n\n# NOTE: absolute imports so that src is resolved as a namespace package even\n# without an __init__.py file.\nfrom src.preprocess import build_dataloader\nfrom src.model import (\n    build_model,\n    freeze_non_bn_parameters,\n    initialize_bn_adaptation,\n    EntropyLoss,\n    ConfidenceWeightedEntropyLoss,\n)\n\n###############################################################################\n# Helper utilities                                                             #\n###############################################################################\n\ndef topk_acc(output: torch.Tensor, target: torch.Tensor, k: int = 1) -> float:\n    \"\"\"Top-K accuracy in percentage for a single batch.\"\"\"\n    with torch.no_grad():\n        maxk = k\n        batch_size = target.size(0)\n        _, pred = output.topk(maxk, 1, True, True)\n        pred = pred.t()\n        correct_k = pred.eq(target.view(1, -1).expand_as(pred))[:k].reshape(-1)\n        return float(correct_k.float().sum().item()) * 100.0 / batch_size\n\n\n###############################################################################\n# Core training / adaptation routine                                           #\n###############################################################################\n\ndef run_single(cfg, *, enable_wandb: bool = True) -> float:\n    \"\"\"Runs one pass of test-time adaptation and returns final top-1 accuracy.\"\"\"\n\n    # ---------------------------------------------------------------------\n    # Device & WandB\n    # ---------------------------------------------------------------------\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    if enable_wandb and cfg.wandb.mode != \"disabled\":\n        wandb_run = wandb.init(\n            entity=cfg.wandb.entity,\n            project=cfg.wandb.project,\n            id=cfg.run.run_id,\n            config=OmegaConf.to_container(cfg, resolve=True),\n            resume=\"allow\",\n            reinit=True,\n        )\n        print(f\"[WandB] Run URL: {wandb_run.url}\")\n    else:\n        # Make absolutely sure that log() is a no-op when disabled.\n        os.environ[\"WANDB_MODE\"] = \"disabled\"\n        wandb_run = None\n\n    # ---------------------------------------------------------------------\n    # Data\n    # ---------------------------------------------------------------------\n    dataloader = build_dataloader(cfg.dataset, split=\"test\", cache_dir=\".cache/\")\n\n    # ---------------------------------------------------------------------\n    # Model & optimisation setup\n    # ---------------------------------------------------------------------\n    model = build_model(cfg.model).to(device)\n    model.eval()  # important: start in eval mode\n    freeze_non_bn_parameters(model)\n    initialize_bn_adaptation(model)\n\n    # optimiser\n    opt_name = cfg.training.optimizer.lower()\n    trainable_params = filter(lambda p: p.requires_grad, model.parameters())\n    if opt_name == \"sgd\":\n        optimizer = torch.optim.SGD(\n            trainable_params,\n            lr=cfg.training.learning_rate,\n            momentum=cfg.training.momentum,\n            weight_decay=cfg.training.weight_decay,\n        )\n    elif opt_name == \"adam\":\n        optimizer = torch.optim.Adam(\n            trainable_params,\n            lr=cfg.training.learning_rate,\n            weight_decay=cfg.training.weight_decay,\n        )\n    else:\n        raise ValueError(f\"Unsupported optimizer: {opt_name}\")\n\n    # loss\n    if cfg.training.loss == \"entropy\":\n        criterion = EntropyLoss()\n    elif cfg.training.loss == \"confidence_weighted_entropy\":\n        criterion = ConfidenceWeightedEntropyLoss()\n    else:\n        raise ValueError(f\"Unsupported loss: {cfg.training.loss}\")\n\n    # ---------------------------------------------------------------------\n    # Adaptation loop (one pass over corruption stream)\n    # ---------------------------------------------------------------------\n    total_correct = 0\n    total_seen = 0\n    global_step = 0\n\n    trial_mode: bool = bool(cfg.get(\"trial_mode\", False))\n\n    for epoch in range(cfg.training.epochs):\n        for batch_idx, (inputs, targets) in enumerate(dataloader):\n            # trial mode executes only a couple of mini-batches so that CI is fast\n            if trial_mode and batch_idx >= 2:\n                break\n\n            inputs = inputs.to(device, non_blocking=True)\n            targets = targets.to(device, non_blocking=True)\n\n            # Forward pass BEFORE adaptation – this is the prediction the user\n            # cares about.\n            with torch.no_grad():\n                logits_before = model(inputs)\n            acc1 = topk_acc(logits_before, targets, k=1)\n\n            # One (or N) adaptation steps on current batch.\n            model.train()\n            for _ in range(cfg.training.inner_steps):\n                optimizer.zero_grad(set_to_none=True)\n                logits = model(inputs)\n                loss = criterion(logits)\n                loss.backward()\n                optimizer.step()\n            model.eval()\n\n            # Metrics aggregation\n            batch_sz = targets.size(0)\n            total_correct += (acc1 / 100.0) * batch_sz\n            total_seen += batch_sz\n\n            if wandb_run is not None:\n                wandb.log(\n                    {\n                        \"step\": global_step,\n                        \"train_loss\": float(loss.item()),\n                        \"top1_batch_acc\": float(acc1),\n                        \"epoch\": epoch,\n                    },\n                    step=global_step,\n                )\n            global_step += 1\n\n    final_acc = 100.0 * total_correct / total_seen\n    print(f\"[RESULT] Run {cfg.run.run_id} – final Top-1 Acc: {final_acc:.2f}%\")\n\n    if wandb_run is not None:\n        wandb.log({\"top1_accuracy\": float(final_acc)})\n        wandb_run.finish()\n\n    return float(final_acc)\n\n\n###############################################################################\n# Optuna hyper-parameter search                                                #\n###############################################################################\n\ndef _suggest_from_space(trial: optuna.Trial, space: Dict[str, Dict[str, Any]]):\n    \"\"\"Return a dict of parameter suggestions given a search-space config.\"\"\"\n    params = {}\n    for name, spec in space.items():\n        if spec[\"type\"] == \"loguniform\":\n            params[name] = trial.suggest_float(name, spec[\"low\"], spec[\"high\"], log=True)\n        elif spec[\"type\"] == \"uniform\":\n            params[name] = trial.suggest_float(name, spec[\"low\"], spec[\"high\"], log=False)\n        elif spec[\"type\"] == \"categorical\":\n            params[name] = trial.suggest_categorical(name, spec[\"choices\"])\n        else:\n            raise ValueError(f\"Unsupported Optuna param type {spec['type']}\")\n    return params\n\n\ndef _apply_trial_params(cfg, params: Dict[str, Any]):\n    \"\"\"Mutate cfg IN-PLACE with Optuna suggestions (limited to training/dataset).\"\"\"\n    for k, v in params.items():\n        if hasattr(cfg.training, k):\n            setattr(cfg.training, k, v)\n        elif hasattr(cfg.dataset, k):\n            setattr(cfg.dataset, k, v)\n        else:\n            # silently ignore unknown keys\n            pass\n\n\n###############################################################################\n# Hydra entry-point                                                            #\n###############################################################################\n\n@hydra.main(config_path=\"../config\", config_name=\"config\", version_base=\"1.3\")\ndef main(cfg):  # noqa: C901 – function is intentionally long but explicit\n    \"\"\"Entry point when invoked via `python -m src.train`\"\"\"\n\n    # ---------------------------------------------------------------\n    # Special handling for trial-mode – run ultra-fast, disable WandB\n    # ---------------------------------------------------------------\n    if bool(cfg.get(\"trial_mode\", False)):\n        cfg.wandb.mode = \"disabled\"\n        cfg.optuna.n_trials = 0\n        cfg.training.epochs = 1\n\n    # Ensure .cache directory exists (for timm, datasets, etc.)\n    Path(\".cache\").mkdir(exist_ok=True, parents=True)\n\n    # ---------------------------------------------------------------\n    # Optional: Optuna hyper-parameter optimisation\n    # ---------------------------------------------------------------\n    if cfg.optuna.n_trials > 0:\n        print(f\"[Optuna] Starting optimisation for {cfg.optuna.n_trials} trials…\")\n\n        def objective(trial: optuna.Trial) -> float:\n            cfg_trial = OmegaConf.create(OmegaConf.to_container(cfg, resolve=True))\n            params = _suggest_from_space(trial, cfg_trial.optuna.search_space)\n            _apply_trial_params(cfg_trial, params)\n            # Disable WandB logging during the HPO search itself.\n            cfg_trial.wandb.mode = \"disabled\"\n            return run_single(cfg_trial, enable_wandb=False)\n\n        study = optuna.create_study(direction=cfg.optuna.direction)\n        study.optimize(objective, n_trials=cfg.optuna.n_trials)\n        print(f\"[Optuna] Best value = {study.best_value:.4f}; params = {study.best_params}\")\n        # Apply best parameters to *original* cfg for the final run.\n        _apply_trial_params(cfg, study.best_params)\n\n    # ---------------------------------------------------------------\n    # Final / single run (always executed)\n    # ---------------------------------------------------------------\n    if cfg.wandb.mode == \"disabled\":\n        os.environ[\"WANDB_MODE\"] = \"disabled\"\n    run_single(cfg, enable_wandb=(cfg.wandb.mode != \"disabled\"))\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "evaluate_py": "# src/evaluate.py\n\"\"\"Post-hoc evaluation & visualisation – executed *after* all training runs.\nIt pulls historical metrics from WandB, writes JSON files and generates plots.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport argparse\nimport json\nfrom pathlib import Path\nfrom typing import List\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport yaml\nimport wandb\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\nsns.set(style=\"whitegrid\")\n\n###############################################################################\n# Plot helpers                                                                 #\n###############################################################################\n\ndef save_learning_curve(df: pd.DataFrame, out_path: Path, metric: str = \"top1_accuracy\"):\n    if metric not in df.columns:\n        return  # skip silently if metric is absent\n    plt.figure(figsize=(6, 4))\n    sns.lineplot(x=df.index, y=df[metric])\n    best_idx = df[metric].idxmax()\n    best_val = df[metric].max()\n    plt.scatter(best_idx, best_val, color=\"red\")\n    plt.text(best_idx, best_val, f\"{best_val:.2f}\")\n    plt.xlabel(\"Step\")\n    plt.ylabel(metric.replace(\"_\", \" \"))\n    plt.title(f\"{metric} vs Steps\")\n    plt.tight_layout()\n    plt.savefig(out_path)\n    plt.close()\n\n\ndef save_confusion(y_true: List[int], y_pred: List[int], out_path: Path, classes: List[str]):\n    if len(y_true) == 0:\n        return\n    cm = confusion_matrix(y_true, y_pred, labels=range(len(classes)))\n    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=classes)\n    fig, ax = plt.subplots(figsize=(6, 6))\n    disp.plot(ax=ax, cmap=\"Blues\", colorbar=False)\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    fig.savefig(out_path)\n    plt.close(fig)\n\n\ndef announce(path_list: List[str], p: Path):\n    path_list.append(str(p))\n    print(str(p))\n\n###############################################################################\n# Main                                                                         #\n###############################################################################\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Independent evaluation of CW-TENT experiments from WandB logs.\")\n    parser.add_argument(\"results_dir\", type=str, help=\"Directory to write evaluation artefacts\")\n    parser.add_argument(\"run_ids\", type=str, help='JSON-encoded list of WandB run IDs')\n    args = parser.parse_args()\n\n    results_root = Path(args.results_dir).expanduser()\n    results_root.mkdir(exist_ok=True, parents=True)\n    run_ids: List[str] = json.loads(args.run_ids)\n\n    # ------------------------------------------------------------------\n    # Load project/entity information saved by main.py\n    # ------------------------------------------------------------------\n    cfg_path = results_root / \"config.yaml\"\n    if not cfg_path.exists():\n        raise FileNotFoundError(f\"{cfg_path} not found – cannot resolve WandB project/entity.\")\n    with open(cfg_path, \"r\") as f:\n        global_cfg = yaml.safe_load(f)\n    entity = global_cfg[\"wandb\"][\"entity\"]\n    project = global_cfg[\"wandb\"][\"project\"]\n\n    api = wandb.Api()\n\n    aggregated = {}\n    generated: List[str] = []\n\n    for run_id in run_ids:\n        print(f\"Processing run: {run_id}\")\n        run_subdir = results_root / run_id\n        run_subdir.mkdir(exist_ok=True, parents=True)\n\n        try:\n            run = api.run(f\"{entity}/{project}/{run_id}\")\n        except wandb.errors.CommError:\n            print(f\"  [WARN] Run {run_id} not found – skipping.\")\n            continue\n\n        # history() returns a DataFrame with all logged scalars\n        history_df = run.history(samples=100000)\n        metrics_json = run_subdir / \"metrics.json\"\n        history_df.to_json(metrics_json, orient=\"records\", indent=2)\n        announce(generated, metrics_json)\n\n        # Learning curve\n        lc_path = run_subdir / \"learning_curve_top1_accuracy.pdf\"\n        save_learning_curve(history_df, lc_path, metric=\"top1_accuracy\")\n        announce(generated, lc_path)\n\n        # Confusion matrix (requires run tables; we attempt best-effort extraction)\n        if \"y_true\" in history_df.columns and \"y_pred\" in history_df.columns:\n            cm_path = run_subdir / \"confusion_matrix.pdf\"\n            num_classes = int(history_df[[\"y_true\", \"y_pred\"]].max().max() + 1)\n            classes = [str(i) for i in range(num_classes)]\n            save_confusion(history_df[\"y_true\"].tolist(), history_df[\"y_pred\"].tolist(), cm_path, classes)\n            announce(generated, cm_path)\n\n        # Aggregate metric\n        if \"top1_accuracy\" in history_df.columns:\n            aggregated[run_id] = float(history_df[\"top1_accuracy\"].dropna().iloc[-1])\n\n    # ------------------------------------------------------------------\n    # Cross-run comparison visualisation\n    # ------------------------------------------------------------------\n    comparison_dir = results_root / \"comparison\"\n    comparison_dir.mkdir(exist_ok=True)\n\n    agg_json = comparison_dir / \"aggregated_metrics.json\"\n    with open(agg_json, \"w\") as f:\n        json.dump(aggregated, f, indent=2)\n    announce(generated, agg_json)\n\n    if aggregated:\n        labels = list(aggregated.keys())\n        values = [aggregated[k] for k in labels]\n        plt.figure(figsize=(8, 4))\n        ax = sns.barplot(x=labels, y=values)\n        for p, val in zip(ax.patches, values):\n            ax.annotate(f\"{val:.2f}\", (p.get_x() + p.get_width() / 2, val),\n                        ha=\"center\", va=\"bottom\")\n        plt.ylabel(\"Final Top-1 Accuracy (%)\")\n        plt.xticks(rotation=45, ha=\"right\")\n        plt.title(\"Cross-run Accuracy Comparison\")\n        plt.tight_layout()\n        bar_path = comparison_dir / \"top1_accuracy_comparison.pdf\"\n        plt.savefig(bar_path)\n        plt.close()\n        announce(generated, bar_path)\n\n    # ------------------------------------------------------------------\n    # Print list of generated artefacts (required by spec)\n    # ------------------------------------------------------------------\n    print(\"\\n[Evaluation] Generated artefacts:\")\n    for p in generated:\n        print(p)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "preprocess_py": "# src/preprocess.py\n\"\"\"Complete data loading & preprocessing pipeline for CIFAR-10-C.\"\"\"\n\nfrom __future__ import annotations\n\nimport tarfile\nfrom pathlib import Path\nfrom typing import List, Tuple, Union\n\nimport numpy as np\nimport requests\nfrom PIL import Image\nfrom tqdm import tqdm\n\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms\n\n###############################################################################\n# Constants                                                                    #\n###############################################################################\n\nCIFAR10C_URL = \"https://zenodo.org/record/3555552/files/CIFAR-10-C.tar?download=1\"\nCORRUPTIONS = [\n    \"gaussian_noise\",\n    \"shot_noise\",\n    \"impulse_noise\",\n    \"defocus_blur\",\n    \"glass_blur\",\n    \"motion_blur\",\n    \"zoom_blur\",\n    \"snow\",\n    \"frost\",\n    \"fog\",\n    \"brightness\",\n    \"contrast\",\n    \"elastic_transform\",\n    \"pixelate\",\n    \"jpeg_compression\",\n]\n\n###############################################################################\n# Low-level utilities                                                          #\n###############################################################################\n\ndef _download(url: str, dst: Path):\n    dst.parent.mkdir(parents=True, exist_ok=True)\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        total = int(r.headers.get(\"content-length\", 0))\n        with open(dst, \"wb\") as f, tqdm(total=total, unit=\"iB\", unit_scale=True, desc=\"CIFAR-10-C\") as bar:\n            for chunk in r.iter_content(chunk_size=1024 * 1024):\n                if chunk:\n                    f.write(chunk)\n                    bar.update(len(chunk))\n\n\ndef _download_and_extract(url: str, cache_dir: Path) -> Path:\n    tar_path = cache_dir / \"CIFAR-10-C.tar\"\n    extract_dir = cache_dir / \"CIFAR-10-C\"\n    if not extract_dir.exists():\n        if not tar_path.exists():\n            print(f\"Downloading CIFAR-10-C to {tar_path} …\")\n            _download(url, tar_path)\n        print(f\"Extracting {tar_path} …\")\n        with tarfile.open(tar_path) as tar:\n            tar.extractall(path=cache_dir)\n    return extract_dir\n\n\n###############################################################################\n# Dataset                                                                      #\n###############################################################################\n\nclass NumpyArrayDataset(Dataset):\n    \"\"\"A thin Dataset wrapper around CIFAR-10-C numpy arrays.\"\"\"\n\n    def __init__(self, images: np.ndarray, labels: np.ndarray, transform=None):\n        assert len(images) == len(labels)\n        self.images = images\n        self.labels = labels.astype(np.int64)\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.images)\n\n    def __getitem__(self, idx):\n        img = Image.fromarray(self.images[idx])\n        label = int(self.labels[idx])\n        if self.transform is not None:\n            img = self.transform(img)\n        return img, label\n\n\n###############################################################################\n# Public API                                                                   #\n###############################################################################\n\ndef load_cifar10c(\n    *,\n    severity: int = 5,\n    corruption_types: Union[str, List[str]] = \"all\",\n    cache_dir: Path = Path(\".cache/datasets/cifar10_c\"),\n) -> Tuple[np.ndarray, np.ndarray]:\n    \"\"\"Return images (NHWC uint8) and labels for the requested corruption subset.\"\"\"\n    if severity < 1 or severity > 5:\n        raise ValueError(\"Severity must be within [1, 5]\")\n\n    extract_dir = _download_and_extract(CIFAR10C_URL, cache_dir)\n\n    if corruption_types == \"all\":\n        corruption_types = CORRUPTIONS\n\n    images_list = []\n    labels = np.load(extract_dir / \"labels.npy\")\n    start = (severity - 1) * 10000\n    end = severity * 10000\n\n    for corr in corruption_types:\n        corr_arr = np.load(extract_dir / f\"{corr}.npy\")\n        images_list.append(corr_arr[start:end])\n    images = np.concatenate(images_list, axis=0)\n    labels_full = np.tile(labels[start:end], len(corruption_types))\n    return images, labels_full\n\n\ndef build_dataloader(dataset_cfg, *, split: str = \"test\", cache_dir: str = \".cache/\") -> DataLoader:\n    \"\"\"Factory that returns a ready-to-use PyTorch DataLoader as dictated by cfg.\"\"\"\n    cache_path = Path(cache_dir)\n\n    if dataset_cfg.name.lower() == \"cifar-10-c\":\n        imgs, lbls = load_cifar10c(\n            severity=dataset_cfg.severity,\n            corruption_types=dataset_cfg.corruption_types,\n            cache_dir=cache_path / \"cifar10_c\",\n        )\n        transform = transforms.Compose(\n            [\n                transforms.ToTensor(),\n                transforms.Normalize(mean=dataset_cfg.normalization.mean, std=dataset_cfg.normalization.std),\n            ]\n        )\n        ds = NumpyArrayDataset(imgs, lbls, transform)\n        return DataLoader(ds, batch_size=dataset_cfg.batch_size, shuffle=False, num_workers=4, pin_memory=True)\n\n    raise ValueError(f\"Unsupported dataset: {dataset_cfg.name}\")\n",
    "model_py": "# src/model.py\n\"\"\"Model definitions & utilities (uses timm for backbone registry).\"\"\"\n\nfrom __future__ import annotations\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport timm\n\n###############################################################################\n# Model factory                                                                 \n###############################################################################\n\ndef build_model(model_cfg):\n    \"\"\"Return a timm model according to Hydra cfg.\"\"\"\n    model_name = model_cfg.checkpoint if hasattr(model_cfg, \"checkpoint\") else model_cfg.name\n    model = timm.create_model(model_name, pretrained=model_cfg.pretrained, num_classes=10)\n    return model\n\n###############################################################################\n# Parameter utilities                                                          #\n###############################################################################\n\ndef freeze_non_bn_parameters(model: nn.Module):\n    \"\"\"Freeze *all* parameters except affine scales/biases of BN layers.\"\"\"\n    for p in model.parameters():\n        p.requires_grad = False\n    for m in model.modules():\n        if isinstance(m, (nn.BatchNorm1d, nn.BatchNorm2d, nn.BatchNorm3d)):\n            if m.weight is not None:\n                m.weight.requires_grad_(True)\n            if m.bias is not None:\n                m.bias.requires_grad_(True)\n\n\ndef initialize_bn_adaptation(model: nn.Module):\n    \"\"\"Prepare BatchNorm layers for TENT-style adaptation (use batch stats, no tracking).\"\"\"\n    for m in model.modules():\n        if isinstance(m, (nn.BatchNorm1d, nn.BatchNorm2d, nn.BatchNorm3d)):\n            m.train()  # ensures batch statistics are used\n            m.track_running_stats = False  # do *not* update running mean/var during adaptation\n\n###############################################################################\n# Loss functions                                                               #\n###############################################################################\n\nclass EntropyLoss(nn.Module):\n    \"\"\"Mean prediction entropy over the mini-batch (standard TENT objective).\"\"\"\n\n    def forward(self, logits: torch.Tensor) -> torch.Tensor:  # noqa: D401 – simple docstring\n        probs = F.softmax(logits, dim=1)\n        ent = -(probs * torch.clamp(probs, min=1e-12).log()).sum(dim=1)\n        return ent.mean()\n\n\nclass ConfidenceWeightedEntropyLoss(nn.Module):\n    \"\"\"CW-TENT: confidence-weighted entropy loss.\"\"\"\n\n    def forward(self, logits: torch.Tensor) -> torch.Tensor:  # noqa: D401 – simple docstring\n        probs = F.softmax(logits, dim=1)\n        ent = -(probs * torch.clamp(probs, min=1e-12).log()).sum(dim=1)\n        num_classes = logits.size(1)\n        weights = 1.0 - ent / torch.log(torch.tensor(num_classes, device=logits.device, dtype=ent.dtype))\n        return (weights * ent).sum() / torch.clamp(weights.sum(), min=1e-12)\n",
    "main_py": "# src/main.py\n\"\"\"Main orchestrator – launches a *single* experiment run in a subprocess.\"\"\"\n\nfrom __future__ import annotations\n\nimport os\nimport shlex\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom typing import List\n\nimport hydra\nfrom hydra.utils import get_original_cwd\nfrom hydra.core.hydra_config import HydraConfig\nfrom omegaconf import OmegaConf\n\n###############################################################################\n# Hydra entry-point                                                            #\n###############################################################################\n\n@hydra.main(config_path=\"../config\", config_name=\"config\", version_base=\"1.3\")\ndef main(cfg):\n    original_cwd = Path(get_original_cwd())\n\n    # ------------------------------------------------------------------\n    # Persist *global* config once so that evaluate.py can read WandB info\n    # ------------------------------------------------------------------\n    results_dir = Path(cfg.results_dir)\n    results_dir.mkdir(parents=True, exist_ok=True)\n    global_cfg_path = results_dir / \"config.yaml\"\n    if not global_cfg_path.exists():\n        OmegaConf.save(config=cfg, f=str(global_cfg_path))\n\n    # ------------------------------------------------------------------\n    # Gather original override strings that invoked this Hydra app\n    # ------------------------------------------------------------------\n    task_overrides: List[str] = list(HydraConfig.get().overrides.task)\n\n    # Ensure critical overrides are present / amended\n    if cfg.get(\"trial_mode\", False):\n        # Enforce additional overrides for trial-mode if user forgot them\n        if \"wandb.mode=disabled\" not in task_overrides:\n            task_overrides.append(\"wandb.mode=disabled\")\n        if \"optuna.n_trials=0\" not in task_overrides:\n            task_overrides.append(\"optuna.n_trials=0\")\n    # Always propagate results_dir so that subprocess sees the same path\n    if f\"results_dir={cfg.results_dir}\" not in task_overrides:\n        task_overrides.append(f\"results_dir={cfg.results_dir}\")\n\n    # ------------------------------------------------------------------\n    # Launch src.train in a clean subprocess with the same overrides\n    # ------------------------------------------------------------------\n    launch_cmd = [sys.executable, \"-u\", \"-m\", \"src.train\", *task_overrides]\n    env = os.environ.copy()\n    # Ensure root directory is on PYTHONPATH so that \"src\" namespace is found\n    env[\"PYTHONPATH\"] = f\"{original_cwd}:{env.get('PYTHONPATH', '')}\"\n\n    print(\"\\n[Launcher] Executing:\\n  \", \" \".join(map(shlex.quote, launch_cmd)))\n    subprocess.check_call(launch_cmd, env=env)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "pyproject_toml": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"cw_tent_experiments\"\nversion = \"0.1.0\"\ndescription = \"Confidence-Weighted TENT experiments with Hydra configuration management\"\nreadme = \"README.md\"\nauthors = [\n  {name = \"AI Autogenerated\", email = \"noreply@example.com\"}\n]\nrequires-python = \">=3.8\"\n\n[project.dependencies]\n# Deep-learning stack\ntorch = \"*\"\ntorchvision = \"*\"\ntimm = \"*\"\n\n# Experiment management\nhydra-core = \"*\"\noptuna = \"*\"\nwandb = \"*\"\n\n# Data & plotting\nnumpy = \"*\"\npandas = \"*\"\nmatplotlib = \"*\"\nseaborn = \"*\"\nscikit-learn = \"*\"\nPillow = \"*\"\nrequests = \"*\"\nPyYAML = \"*\"\ntqdm = \"*\"\n",
    "config_yaml": "defaults:\n  - _self_\n\n# Global switches -------------------------------------------------------------\ntrial_mode: false         # set to true via CLI for CI / light validation\nresults_dir: ./results    # can be overridden from CLI\n\n# WandB configuration ---------------------------------------------------------\nwandb:\n  entity: gengaru617-personal\n  project: 251020-test\n  mode: online            # changed to \"disabled\" automatically in trial_mode\n\n# NOTE: Remaining experiment-specific settings (dataset, model, training, etc.)\n# are supplied via config/run/<run_id>.yaml and selected with the CLI override\n# `run=<run_id>` when calling src.main.\n\n# Placeholder to satisfy OmegaConf access in case user forgets run=… override\nrun: {}\nmodel: {}\ndataset: {}\ntraining: {}\noptuna:\n  n_trials: 0  # default – can be overridden per-run\n  direction: maximize\n  search_space: {}\n  metric: top1_accuracy\n"
}
