
LLM Name: o3-2025-04-16
Input:
You are an AI code reviewer validating production-ready experiment code for research papers.

Analyze the provided experiment code and determine if it meets all requirements for immediate execution in research experiments.

# Instructions

## Core Validation Criteria
Check if the generated experiment code meets ALL of the following requirements:

1. **Complete Implementation**:
   - Every component is fully functional, production-ready, publication-worthy code
   - No "omitted for brevity", no "simplified version", no TODO, PLACEHOLDER, pass, or ...
   - All functions and classes are completely implemented
   - No truncated code sections or incomplete implementations

2. **Hydra Integration**:
   - Uses Hydra to manage all experiment configurations from `config/run/*.yaml` files
   - All parameters are loaded from run configs dynamically
   - Proper configuration structure with run_id, method, model, dataset, training, and optuna sections
   - CLI interface matches:
     * Training: `uv run python -u -m src.main run={run_id} results_dir={path}`
     * Evaluation: `uv run python -m src.evaluate results_dir={path} run_ids='["run-1", "run-2", ...]'` (independent execution)
   - Supports trial_mode=true flag for lightweight validation runs (automatically disables WandB)

3. **Complete Data Pipeline**:
   - Full data loading and preprocessing implementation
   - Dataset-specific preprocessing is properly implemented
   - No placeholder dataset loading code
   - Proper error handling for data operations
   - Uses `.cache/` as the cache directory for all datasets and models

4. **Model Implementation**:
   - Complete model architectures for all methods (proposed and comparative methods)
   - No placeholders (TODO, PLACEHOLDER, pass, or incomplete implementations)
   - When External Resources specify HuggingFace models: properly use and customize them (acceptable to wrap AutoModel, add adapters, etc.)
   - When no external models specified: implement architectures from scratch using PyTorch primitives
   - Model-specific configurations correctly applied
   - Proper PyTorch usage throughout

5. **File Structure Compliance**:
   - Contains EXACTLY these required files (and NO other files):
     * `src/train.py`
     * `src/evaluate.py`
     * `src/preprocess.py`
     * `src/model.py`
     * `src/main.py`
     * `pyproject.toml`
     * `config/config.yaml`
   - NO additional files (e.g., NO `src/__init__.py`, NO `setup.py`, NO other Python files)
   - No missing files from the structure
   - All functionality contained within specified files

6. **WandB Integration**:
   - train.py initializes WandB and logs ALL metrics using `wandb.log()`
   - trial_mode automatically disables WandB (sets wandb.mode=disabled)
   - NO results.json or stdout JSON dumps in train.py
   - config/config.yaml contains mandatory WandB settings (entity/project)

7. **Configuration Files**:
   - The generated code properly references config files via Hydra
   - NOTE: config/run/{run_id}.yaml files are provided separately (not in ExperimentCode)
   - All run configurations match the experiment_runs provided
   - Optuna search spaces are properly defined if applicable

8. **Evaluation Script Independence**:
   - evaluate.py is executed independently via `uv run python -m src.evaluate results_dir={path} run_ids='["run-1", "run-2"]'`
   - Accepts `run_ids` parameter as JSON string list (parse with `json.loads(args.run_ids)`)
   - main.py DOES NOT call evaluate.py
   - evaluate.py retrieves ALL data from WandB API using `wandb.Api()` (not from local files)
   - **STEP 1: Per-Run Processing** (for each run_id):
     * Export run-specific metrics to: `{results_dir}/{run_id}/metrics.json`
     * Generate run-specific figures (learning curves, confusion matrices) to: `{results_dir}/{run_id}/`
     * Each run should have its own subdirectory with its metrics and figures
   - **STEP 2: Aggregated Analysis** (after processing all runs):
     * Export aggregated metrics to: `{results_dir}/comparison/aggregated_metrics.json`
     * Compute secondary/derived metrics (e.g., improvement rate: (proposed - baseline) / baseline)
     * Generate comparison figures to: `{results_dir}/comparison/`
     * Cross-run comparison charts (bar charts, box plots)
     * Performance metrics tables
     * Statistical significance tests
   - Proper figure quality: legends, annotations, tight_layout
   - Follows naming convention: `<figure_topic>[_<condition>][_pairN].pdf`
   - train.py and main.py generate NO figures
   - evaluate.py cannot run in trial_mode (no WandB data available when WandB disabled)

9. **Trial Mode Implementation**:
   - trial_mode=true flag properly reduces computational load
   - Training: epochs=1, batches limited to 1-2, Optuna disabled (n_trials=0), small evaluation subset
   - WandB automatically disabled in trial_mode (wandb.mode=disabled)
   - Purpose: Fast validation that code runs without errors

## Output Format
Respond with a JSON object containing:
- `is_code_ready`: boolean - true if ALL criteria are met, false otherwise
- `code_issue`: string - specific issues found if any criteria are not met, focusing on what needs to be fixed

# Current Research Method
{
    "Open Problems": "Most popular test-time adaptation (TTA) methods such as TENT adapt only BatchNorm affine parameters by minimizing prediction entropy on the incoming test stream. Although very effective, they often require 3-10 gradient steps for each incoming mini-batch to reach their best performance. The slow convergence mainly comes from noisy gradients produced by low-confidence (high-entropy) samples that dominate early in adaptation. A simple mechanism to down-weight these uncertain samples during optimization is missing.",
    "Methods": "Confidence-Weighted Entropy Minimization (CW-TENT).\n1. Keep the original TENT objective L = Σ_i H(p_i) where H is entropy.\n2. Introduce a scalar weight per sample w_i = 1 – H(p_i)/log(C)  (ranges in [0,1]; C = #classes).\n3. Replace the loss with the weighted variant  L_w = Σ_i w_i · H(p_i) / Σ_i w_i.\n4. Use the same SGD update of BatchNorm affine parameters, but with a single gradient step per mini-batch (optionally with momentum=0.9).\nTheoretical intuition: high-confidence samples (low entropy) are already close to the target domain optimum and provide reliable gradients; amplifying their contribution yields a cleaner gradient direction, allowing larger learning rate or fewer steps, hence faster convergence.",
    "Experimental Setup": "Dataset: CIFAR-10-C with 15 corruption types, severity 5 (standard TTA benchmark).\nModel: Pre-trained ResNet-18.\nBaselines: 1) Source model (no adaptation). 2) Original TENT (default 10 inner steps). 3) CW-TENT (1 inner step).\nMetric: Top-1 accuracy after processing the full test stream; also accuracy after first K (e.g., 1, 3) adaptation steps to measure convergence speed.",
    "Experimental Code": "import torch, torch.nn.functional as F\n\ndef entropy(p):\n    return -(p * p.log()).sum(1)\n\nclass CWTentAdapter:\n    def __init__(self, model, lr=1e-3, momentum=0.9):\n        self.model = model.eval()\n        self.model.requires_grad_(False)\n        # enable gradients for affine BN params only\n        for m in model.modules():\n            if isinstance(m, torch.nn.BatchNorm2d):\n                m.weight.requires_grad_(True)\n                m.bias.requires_grad_(True)\n        self.optimizer = torch.optim.SGD(filter(lambda p: p.requires_grad, model.parameters()), lr=lr, momentum=momentum)\n\n    @torch.no_grad()\n    def predict(self, x):\n        return self.model(x).softmax(1)\n\n    def adapt(self, x):\n        self.model.train()        # BN uses batch statistics\n        self.optimizer.zero_grad()\n        logits = self.model(x)\n        probs = logits.softmax(1)\n        H = entropy(probs)\n        w = 1 - H / torch.log(torch.tensor(probs.size(1), device=x.device))\n        loss = (w * H).sum() / w.sum()\n        loss.backward()\n        self.optimizer.step()\n        self.model.eval()\n        return probs.detach()\n",
    "Expected Result": "With only one gradient step per mini-batch, CW-TENT is expected to match or surpass the accuracy of TENT that uses 5–10 steps. For example on CIFAR-10-C severity 5: Source 58.7%, TENT (10 steps) 71.0%, CW-TENT (1 step) ≈71.5%. Convergence plot should show CW-TENT reaching peak accuracy after the first step, whereas TENT needs several.",
    "Expected Conclusion": "A tiny modification—confidence-weighted entropy—suppresses noisy gradients from uncertain samples and lets TENT converge in a single step. The change is trivial to implement (four extra lines) yet meaningfully cuts computation and latency at test time, making TTA more practical for real-time deployment."
}

# Experimental Design
- Strategy: The experiment demonstrates that Confidence-Weighted TENT (CW-TENT) enables fast, one-step test-time adaptation by down-weighting high-entropy (low-confidence) samples in the classic entropy-minimisation objective used by TENT. A pre-trained ResNet-18 is sequentially exposed to the CIFAR-10-C corruption stream (severity-5). At every incoming mini-batch the model first produces predictions, then performs one SGD update on BatchNorm affine parameters using the confidence-weighted entropy loss. Performance is evaluated as the stream proceeds and compared against: (1) the frozen source model (no adaptation) and (2) the original TENT that applies 10 inner optimisation steps. All runs share identical data order, initial weights and hardware (8×H200, 144 GB each). Hyper-parameter sweeps on learning-rate, momentum and weight-decay are carried out with random search (30 trials) on a held-out corruption set to obtain fair settings for both CW-TENT and the baseline.
- Proposed Method: Confidence-Weighted Entropy Minimisation (CW-TENT)
Objective: Accelerate, stabilise and computationally lighten test-time adaptation by re-weighting each sample’s entropy according to its prediction confidence.
Theoretical intuition: Samples with low entropy are nearer to the target optimum and thus deliver cleaner gradient signals. Emphasising them suppresses noise from uncertain samples appearing early in the stream, allowing convergence in a single step.
Algorithm:
1. Observation x → logits z = f_θ(x) (θ frozen except BN γ,β).
2. Compute probabilities p = softmax(z) and entropy H_i = −Σ_c p_{ic} log p_{ic}.
3. Compute weight w_i = 1 − H_i / log C (C = number of classes). Range [0,1].
4. Weighted loss: L_w = Σ_i w_i H_i / Σ_i w_i.
5. Perform one SGD step on BN affine parameters only (lr≈1e-3, momentum≈0.9).
6. Switch model back to eval mode and continue streaming.
Implementation additions over TENT:
• 3 lines to calculate w_i and replace loss.
• Inner-loop steps fixed to 1, cutting compute 10×.
Complexities: O(B) extra operations per batch for weight computation – negligible compared with forward/backward passes.
- Evaluation Metrics: ['Top-1 Accuracy', 'Average Accuracy After First Adaptation Step']

# Experiment Runs

- Run ID: proposed-ResNet-18 (11M)-CIFAR-10-C (severity 5)
  Method: proposed
  Model: ResNet-18 (11M)
  Dataset: CIFAR-10-C (severity 5)
  
  Config Content:
  ```yaml
  run_id: "proposed-ResNet-18 (11M)-CIFAR-10-C (severity 5)"
method: proposed
model:
  name: ResNet-18
  provider: timm
  checkpoint: resnet18.a1_in1k
  num_parameters: 11700000
  pretrained: true
  trainable_parameters:
    - BatchNorm2d.weight
    - BatchNorm2d.bias
dataset:
  name: CIFAR-10-C
  severity: 5
  corruption_types: all            # 15 standard corruptions
  normalization:
    mean: [0.4914, 0.4822, 0.4465]
    std:  [0.2470, 0.2435, 0.2616]
  batch_size: 64
training:
  adaptation: true                 # test-time adaptation instead of full training
  inner_steps: 1                   # CW-TENT uses a single gradient step
  loss: confidence_weighted_entropy
  optimizer: sgd
  learning_rate: 0.001
  momentum: 0.9
  weight_decay: 0.0
  epochs: 1                        # one pass over the test stream
  lr_schedule: constant
optuna:
  n_trials: 30
  direction: maximize
  metric: top1_accuracy
  search_space:
    learning_rate:
      type: loguniform
      low: 1e-4
      high: 1e-2
    momentum:
      type: uniform
      low: 0.0
      high: 0.99
    weight_decay:
      type: loguniform
      low: 1e-6
      high: 1e-3
    batch_size:
      type: categorical
      choices: [32, 64, 128]

  ```
  

- Run ID: comparative-1-ResNet-18 (11M)-CIFAR-10-C (severity 5)
  Method: comparative-1
  Model: ResNet-18 (11M)
  Dataset: CIFAR-10-C (severity 5)
  
  Config Content:
  ```yaml
  run_id: "comparative-1-ResNet-18 (11M)-CIFAR-10-C (severity 5)"
method: comparative-1      # Original TENT baseline
model:
  name: ResNet-18
  provider: timm
  checkpoint: resnet18.a1_in1k
  num_parameters: 11700000
  pretrained: true
  trainable_parameters:
    - BatchNorm2d.weight
    - BatchNorm2d.bias
dataset:
  name: CIFAR-10-C
  severity: 5
  corruption_types: all
  normalization:
    mean: [0.4914, 0.4822, 0.4465]
    std:  [0.2470, 0.2435, 0.2616]
  batch_size: 64
training:
  adaptation: true
  inner_steps: 10                  # classic TENT uses 10 inner optimisation steps
  loss: entropy
  optimizer: sgd
  learning_rate: 0.001
  momentum: 0.9
  weight_decay: 0.0
  epochs: 1
  lr_schedule: constant
optuna:
  n_trials: 30
  direction: maximize
  metric: top1_accuracy
  search_space:
    learning_rate:
      type: loguniform
      low: 1e-4
      high: 1e-2
    momentum:
      type: uniform
      low: 0.0
      high: 0.99
    weight_decay:
      type: loguniform
      low: 1e-6
      high: 1e-3
    batch_size:
      type: categorical
      choices: [32, 64, 128]

  ```
  


# Generated Experiment Code (To be validated)
{"config_yaml": "defaults:\n  - _self_\n\n# Global settings that can be overridden by run-specific configs\nrun: {}\ntrial_mode: false\nresults_dir: ./results\n\nwandb:\n  entity: gengaru617-personal\n  project: 251020-test\n  mode: online\n", "evaluate_py": "# src/evaluate.py\n\"\"\"Independent evaluation script.\nFetches metrics from WandB, exports per-run metrics/figures and aggregated comparisons.\"\"\"\n\nimport argparse\nimport json\nfrom pathlib import Path\nimport sys\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport wandb\n\nsns.set(style=\"whitegrid\")\n\n# --------------------------- Helpers ------------------------------------\n\ndef save_learning_curve(metrics_df: pd.DataFrame, out_path: Path, metric: str = \"top1_accuracy\"):\n    plt.figure(figsize=(6, 4))\n    sns.lineplot(x=metrics_df.index, y=metrics_df[metric])\n    best_val = metrics_df[metric].max()\n    plt.scatter(metrics_df[metric].idxmax(), best_val, color=\"red\")\n    plt.text(metrics_df[metric].idxmax(), best_val, f\"{best_val:.2f}\")\n    plt.xlabel(\"Step\")\n    plt.ylabel(metric.replace(\"_\", \" \"))\n    plt.title(f\"{metric} vs Steps\")\n    plt.tight_layout()\n    plt.savefig(out_path)\n    plt.close()\n\n\ndef print_and_collect(path_list, path: Path):\n    path_list.append(str(path))\n    print(str(path))\n\n# --------------------------- Main ---------------------------------------\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Evaluate experiment runs from WandB logs\")\n    parser.add_argument(\"results_dir\", type=str, help=\"Directory to save evaluation artefacts\")\n    parser.add_argument(\"run_ids\", type=str, help=\u0027JSON string list of run IDs e.g. \"[\\\"run1\\\",\\\"run2\\\"]\"\u0027)\n    args = parser.parse_args()\n\n    results_root = Path(args.results_dir)\n    results_root.mkdir(parents=True, exist_ok=True)\n\n    run_ids = json.loads(args.run_ids)\n\n    # Load global wandb config\n    config_path = results_root / \"config.yaml\"\n    if config_path.exists():\n        cfg_global = wandb.util.load_yaml(str(config_path))\n        entity = cfg_global.get(\"wandb\", {}).get(\"entity\")\n        project = cfg_global.get(\"wandb\", {}).get(\"project\")\n    else:\n        print(f\"Config file {config_path} not found. Please place config.yaml in results_dir.\")\n        sys.exit(1)\n\n    api = wandb.Api()\n\n    aggregated_metrics = {}\n    generated_files = []\n\n    for run_id in run_ids:\n        run_dir = results_root / run_id\n        run_dir.mkdir(parents=True, exist_ok=True)\n        try:\n            run = api.run(f\"{entity}/{project}/{run_id}\")\n        except wandb.errors.CommError:\n            print(f\"WandB Run {run_id} not found. Skipping.\")\n            continue\n\n        history_df = run.history(samples=100000)\n        metrics_json_path = run_dir / \"metrics.json\"\n        history_df.to_json(metrics_json_path, orient=\"records\")\n        print_and_collect(generated_files, metrics_json_path)\n\n        # Learning curve\n        lc_path = run_dir / \"learning_curve_top1_accuracy.pdf\"\n        save_learning_curve(history_df, lc_path, metric=\"top1_accuracy\")\n        print_and_collect(generated_files, lc_path)\n\n        # Store final metrics for aggregation\n        if \"top1_accuracy\" in history_df.columns:\n            final_acc = history_df[\"top1_accuracy\"].dropna().iloc[-1]\n            aggregated_metrics[run_id] = {\n                \"top1_accuracy\": float(final_acc)\n            }\n\n    # --------------------- Aggregated analysis -------------------------\n    comparison_dir = results_root / \"comparison\"\n    comparison_dir.mkdir(exist_ok=True)\n\n    agg_json_path = comparison_dir / \"aggregated_metrics.json\"\n    with open(agg_json_path, \"w\") as f:\n        json.dump(aggregated_metrics, f, indent=2)\n    print_and_collect(generated_files, agg_json_path)\n\n    # Bar chart comparison\n    if aggregated_metrics:\n        labels = list(aggregated_metrics.keys())\n        values = [v[\"top1_accuracy\"] for v in aggregated_metrics.values()]\n        plt.figure(figsize=(8, 4))\n        ax = sns.barplot(x=labels, y=values)\n        for p, val in zip(ax.patches, values):\n            ax.annotate(f\"{val:.2f}\", (p.get_x() + p.get_width() / 2.0, val),\n                        ha=\u0027center\u0027, va=\u0027bottom\u0027)\n        plt.xticks(rotation=45, ha=\"right\")\n        plt.ylabel(\"Top-1 Accuracy (%)\")\n        plt.title(\"Final Top-1 Accuracy Comparison\")\n        plt.tight_layout()\n        bar_path = comparison_dir / \"top1_accuracy_comparison.pdf\"\n        plt.savefig(bar_path)\n        plt.close()\n        print_and_collect(generated_files, bar_path)\n\n    # Print summary of generated paths\n    print(\"\\nGenerated artefacts:\")\n    for p in generated_files:\n        print(p)\n\n\nif __name__ == \"__main__\":\n    main()\n", "main_py": "# src/main.py\n\"\"\"Main orchestrator that launches a single experiment run.\nThis script is called by CLI and spawns train.py as a subprocess.\"\"\"\n\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom typing import List\n\nimport hydra\nfrom omegaconf import OmegaConf\n\n\n@hydra.main(config_path=\"../config\", config_name=\"config\", version_base=\"1.3\")\ndef main(cfg):\n    # Construct command to call train.py with the same overrides\n    python_exec = sys.executable\n    script_module = \"src.train\"\n\n    overrides: List[str] = []\n    # Mandatory\n    overrides.append(f\"run={cfg.run.run_id}\")\n    overrides.append(f\"results_dir={cfg.results_dir}\")\n\n    if cfg.get(\"trial_mode\", False):\n        overrides.append(\"trial_mode=true\")\n        overrides.append(\"wandb.mode=disabled\")\n        overrides.append(\"optuna.n_trials=0\")\n\n    # Maintain additional CLI overrides passed by user (after + sign)\n    # Hydra passes unknown overrides through cfg.keys so we rely on sys.argv filtering\n    additional_overrides = [arg for arg in sys.argv[1:] if \u0027=\u0027 in arg and not arg.startswith(\u0027hydra.\u0027)]\n    overrides.extend(additional_overrides)\n\n    cmd = [python_exec, \"-u\", \"-m\", script_module] + overrides\n    print(\"Launching: \", \" \".join(cmd))\n    subprocess.check_call(cmd)\n\n\nif __name__ == \"__main__\":\n    main()\n", "model_py": "# src/model.py\n\"\"\"Model construction and adaptation-specific utilities.\"\"\"\nfrom typing import List\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport timm\n\n# --------------------------- Model builder ------------------------------\n\ndef build_model(model_cfg):\n    model_name = model_cfg.checkpoint if hasattr(model_cfg, \u0027checkpoint\u0027) else model_cfg.name\n    model = timm.create_model(model_name, pretrained=model_cfg.pretrained, num_classes=10)\n    return model\n\n# --------------------------- Freeze utilities ---------------------------\n\ndef freeze_non_bn_parameters(model: nn.Module):\n    \"\"\"Freeze all parameters except BatchNorm affine scales/biases.\"\"\"\n    for param in model.parameters():\n        param.requires_grad = False\n    for m in model.modules():\n        if isinstance(m, (nn.BatchNorm2d, nn.BatchNorm1d)):\n            if m.weight is not None:\n                m.weight.requires_grad = True\n            if m.bias is not None:\n                m.bias.requires_grad = True\n\n\ndef initialize_bn_adaptation(model: nn.Module):\n    \"\"\"Set BatchNorm layers to eval mode but keep running stats frozen as in TENT.\"\"\"\n    for m in model.modules():\n        if isinstance(m, (nn.BatchNorm2d, nn.BatchNorm1d)):\n            m.track_running_stats = False  # use batch stats\n            m.eval()\n\n# --------------------------- Losses -------------------------------------\n\nclass EntropyLoss(nn.Module):\n    \"\"\"Unweighted prediction entropy.\"\"\"\n\n    def forward(self, logits: torch.Tensor) -\u003e torch.Tensor:\n        probs = F.softmax(logits, dim=1)\n        ent = -(probs * probs.clamp_min(1e-12).log()).sum(dim=1)\n        return ent.mean()\n\n\nclass ConfidenceWeightedEntropyLoss(nn.Module):\n    \"\"\"Confidence-weighted entropy where weight_i = 1 \u2212 H_i / log(C).\"\"\"\n\n    def forward(self, logits: torch.Tensor) -\u003e torch.Tensor:\n        probs = F.softmax(logits, dim=1)\n        ent = -(probs * probs.clamp_min(1e-12).log()).sum(dim=1)\n        num_classes = logits.size(1)\n        w = 1.0 - ent / torch.log(torch.tensor(num_classes, device=logits.device, dtype=ent.dtype))\n        loss = (w * ent).sum() / w.sum().clamp_min(1e-12)\n        return loss\n", "preprocess_py": "# src/preprocess.py\n\"\"\"Data loading \u0026 preprocessing utilities.\"\"\"\nimport os\nimport tarfile\nfrom pathlib import Path\nfrom typing import Tuple, List, Union\n\nimport numpy as np\nfrom PIL import Image\nimport requests\nfrom tqdm import tqdm\n\nimport torch\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms\n\n# --------------------------- CIFAR-10-C constants ------------------------\nCIFAR10C_URL = \"https://zenodo.org/record/3555552/files/CIFAR-10-C.tar?download=1\"\nCORRUPTIONS = [\n    \u0027gaussian_noise\u0027, \u0027shot_noise\u0027, \u0027impulse_noise\u0027, \u0027defocus_blur\u0027, \u0027glass_blur\u0027,\n    \u0027motion_blur\u0027, \u0027zoom_blur\u0027, \u0027snow\u0027, \u0027frost\u0027, \u0027fog\u0027, \u0027brightness\u0027, \u0027contrast\u0027,\n    \u0027elastic_transform\u0027, \u0027pixelate\u0027, \u0027jpeg_compression\u0027\n]\n\n# --------------------------- Utilities ----------------------------------\n\ndef download_and_extract(url: str, dest: Path):\n    \"\"\"Download and extract a tar file to destination.\"\"\"\n    dest.mkdir(parents=True, exist_ok=True)\n    filename = dest / \"CIFAR-10-C.tar\"\n    if not filename.exists():\n        print(f\"Downloading CIFAR-10-C to {filename} ...\")\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n        total = int(response.headers.get(\u0027content-length\u0027, 0))\n        with open(filename, \u0027wb\u0027) as file, tqdm(\n                desc=\"CIFAR-10-C\", total=total, unit=\u0027iB\u0027, unit_scale=True) as bar:\n            for data in response.iter_content(chunk_size=1024 * 1024):\n                size = file.write(data)\n                bar.update(size)\n    extract_dir = dest / \"CIFAR-10-C\"\n    if not extract_dir.exists():\n        print(f\"Extracting {filename} ...\")\n        with tarfile.open(filename) as tar:\n            tar.extractall(path=dest)\n    return extract_dir\n\n# --------------------------- Dataset ------------------------------------\n\nclass NumpyArrayDataset(Dataset):\n    def __init__(self, images: np.ndarray, labels: np.ndarray, transform=None):\n        assert len(images) == len(labels)\n        self.images = images\n        self.labels = labels\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.images)\n\n    def __getitem__(self, idx):\n        img = Image.fromarray(self.images[idx])\n        target = int(self.labels[idx])\n        if self.transform:\n            img = self.transform(img)\n        return img, target\n\n# --------------------------- Loader builder -----------------------------\n\ndef load_cifar10c(severity: int = 5, corruption_types: Union[str, List[str]] = \u0027all\u0027,\n                  cache_dir: Path = Path(\u0027.cache/datasets/cifar10_c\u0027)) -\u003e Tuple[np.ndarray, np.ndarray]:\n    if severity \u003c 1 or severity \u003e 5:\n        raise ValueError(\"Severity must be in [1,5]\")\n    extract_dir = download_and_extract(CIFAR10C_URL, cache_dir)\n\n    if corruption_types == \u0027all\u0027:\n        corruption_types = CORRUPTIONS\n    images_list = []\n    labels = np.load(extract_dir / \u0027labels.npy\u0027)\n\n    for corr in corruption_types:\n        data = np.load(extract_dir / f\u0027{corr}.npy\u0027)\n        start = (severity - 1) * 10000\n        end = severity * 10000\n        images_list.append(data[start:end])\n    images = np.concatenate(images_list, axis=0)\n    labels_full = np.tile(labels, len(corruption_types))\n    return images, labels_full\n\n\ndef build_dataloader(dataset_cfg, split: str = \u0027test\u0027, cache_dir: str = \u0027.cache/\u0027) -\u003e DataLoader:\n    cache_dir_path = Path(cache_dir)\n\n    if dataset_cfg.name.lower() == \u0027cifar-10-c\u0027:\n        images, labels = load_cifar10c(\n            severity=dataset_cfg.severity,\n            corruption_types=dataset_cfg.corruption_types,\n            cache_dir=cache_dir_path / \u0027cifar10_c\u0027\n        )\n        transform = transforms.Compose([\n            transforms.ToTensor(),\n            transforms.Normalize(mean=dataset_cfg.normalization.mean,\n                                 std=dataset_cfg.normalization.std),\n        ])\n        ds = NumpyArrayDataset(images, labels, transform=transform)\n        loader = DataLoader(ds, batch_size=dataset_cfg.batch_size, shuffle=False,\n                            num_workers=4, pin_memory=True)\n        return loader\n    else:\n        raise ValueError(f\"Unsupported dataset {dataset_cfg.name}\")\n", "pyproject_toml": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"cw_tent_experiments\"\nversion = \"0.1.0\"\ndescription = \"Confidence-Weighted TENT experiments with Hydra configuration management\"\nreadme = \"README.md\"\nauthors = [\n  {name = \"AI Autogenerated\", email = \"noreply@example.com\"}\n]\nrequires-python = \"\u003e=3.8\"\n\n[project.dependencies]\ntorch = \"*\"\ntorchvision = \"*\"\n# timm provides model zoo\n# Hydra \u0026 config management\nhydra-core = \"*\"\n# optimisation\noptuna = \"*\"\n# logging\nwandb = \"*\"\n# data \u0026 utils\nnumpy = \"*\"\npandas = \"*\"\nmatplotlib = \"*\"\nseaborn = \"*\"\nscikit-learn = \"*\"\nrequests = \"*\"\nPillow = \"*\"\ntqdm = \"*\"\n", "train_py": "# src/train.py\nimport os\nimport sys\nfrom pathlib import Path\nfrom typing import Dict, Any\n\nimport torch\nimport torch.nn.functional as F\nfrom omegaconf import OmegaConf\nimport hydra\nfrom hydra.utils import instantiate\n\nimport wandb\n\nfrom .preprocess import build_dataloader\nfrom .model import (build_model, freeze_non_bn_parameters, initialize_bn_adaptation,\n                    EntropyLoss, ConfidenceWeightedEntropyLoss)\n\n# --------------------------- Utility ------------------------------------\n\ndef accuracy(output: torch.Tensor, target: torch.Tensor, topk=(1,)):\n    \"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"\n    maxk = max(topk)\n    batch_size = target.size(0)\n    _, pred = output.topk(maxk, 1, True, True)\n    pred = pred.t()\n    correct = pred.eq(target.view(1, -1).expand_as(pred))\n\n    res = []\n    for k in topk:\n        correct_k = correct[:k].reshape(-1).float().sum(0, keepdim=True)\n        res.append(correct_k.mul_(100.0 / batch_size))\n    return res\n\n# --------------------------- Main Train ---------------------------------\n\n@hydra.main(config_path=\"../config\", config_name=\"config\", version_base=\"1.3\")\ndef main(cfg):\n    # ------------------------------------------------------------------\n    # Trial-mode shortcuts ------------------------------------------------\n    trial_mode = bool(cfg.get(\"trial_mode\", False))\n    if trial_mode:\n        cfg.wandb.mode = \"disabled\"\n        cfg.optuna.n_trials = 0\n        cfg.training.epochs = 1\n\n    # -------------------------- Device --------------------------------\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    # --------------------------- WANDB -------------------------------\n    if cfg.wandb.mode == \"disabled\":\n        os.environ[\"WANDB_MODE\"] = \"disabled\"\n\n    if cfg.wandb.mode != \"disabled\":\n        wandb_run = wandb.init(\n            entity=cfg.wandb.entity,\n            project=cfg.wandb.project,\n            id=cfg.run.run_id,\n            config=OmegaConf.to_container(cfg, resolve=True),\n            resume=\"allow\",\n            reinit=True,\n        )\n        print(f\"WandB URL: {wandb_run.url}\")\n    else:\n        wandb_run = None\n\n    # --------------------------- Data ---------------------------------\n    dataloader = build_dataloader(cfg.dataset, split=\"test\", cache_dir=\".cache/\")\n\n    # --------------------------- Model --------------------------------\n    model = build_model(cfg.model).to(device)\n    model.eval()\n\n    # Freeze everything except BN affine params.\n    freeze_non_bn_parameters(model)\n    initialize_bn_adaptation(model)\n\n    # --------------------------- Optimizer ---------------------------\n    opt_name = cfg.training.optimizer.lower()\n    if opt_name == \"sgd\":\n        optimizer = torch.optim.SGD(\n            filter(lambda p: p.requires_grad, model.parameters()),\n            lr=cfg.training.learning_rate,\n            momentum=cfg.training.momentum,\n            weight_decay=cfg.training.weight_decay,\n        )\n    elif opt_name == \"adam\":\n        optimizer = torch.optim.Adam(\n            filter(lambda p: p.requires_grad, model.parameters()),\n            lr=cfg.training.learning_rate,\n            weight_decay=cfg.training.weight_decay,\n        )\n    else:\n        raise ValueError(f\"Unsupported optimizer: {opt_name}\")\n\n    # --------------------------- Loss ---------------------------------\n    if cfg.training.loss == \"entropy\":\n        criterion = EntropyLoss()\n    elif cfg.training.loss == \"confidence_weighted_entropy\":\n        criterion = ConfidenceWeightedEntropyLoss()\n    else:\n        raise ValueError(f\"Unsupported loss {cfg.training.loss}\")\n\n    # -------------------------- Adaptation Loop ----------------------\n    global_step = 0\n    correct_tot = 0\n    total = 0\n    loss_avg = 0.0\n\n    for epoch in range(cfg.training.epochs):\n        for batch_idx, (inputs, targets) in enumerate(dataloader):\n            if trial_mode and batch_idx \u003e= 2:\n                break  # run only two batches in trial mode\n\n            inputs = inputs.to(device, non_blocking=True)\n            targets = targets.to(device, non_blocking=True)\n\n            # Forward before adaptation (prediction w/o grad for metric)\n            with torch.no_grad():\n                logits = model(inputs)\n            acc1, = accuracy(logits, targets, topk=(1,))\n\n            # ------------------ Adaptation ---------------------------\n            model.train()  # use batch statistics\n            for _ in range(cfg.training.inner_steps):\n                optimizer.zero_grad()\n                outputs = model(inputs)\n                loss = criterion(outputs)\n                loss.backward()\n                optimizer.step()\n            model.eval()\n            # --------------------------------------------------------\n\n            loss_avg = (loss_avg * global_step + loss.item()) / (global_step + 1)\n            correct_tot += acc1.item() * targets.size(0) / 100.0\n            total += targets.size(0)\n\n            if wandb_run is not None:\n                wandb.log({\n                    \"step\": global_step,\n                    \"train_loss\": loss.item(),\n                    \"top1_batch_acc\": acc1.item(),\n                }, step=global_step)\n\n            global_step += 1\n\n    # --------------------------- Summary -----------------------------\n    top1_final = correct_tot / total * 100.0\n    print(f\"Run {cfg.run.run_id}: Top-1 accuracy {top1_final:.2f}%\")\n    if wandb_run is not None:\n        wandb.log({\"top1_accuracy\": top1_final})\n        wandb_run.finish()\n\n\nif __name__ == \"__main__\":\n    main()\n"}

Analyze the experiment code thoroughly. Ensure it is complete, executable, and ready for publication-quality research experiments.
Output:
{
    "is_code_ready": false,
    "code_issue": "Multiple blocking issues:\n1. Package structure vs. import style: train.py and model.py use relative imports (from .preprocess …) which only work if “src” is an installed / explicit package. Because the file-list forbids a src/__init__.py, running “python -m src.train” will raise ImportError.\n2. main.py forwards the override \"run={cfg.run.run_id}\" to the subprocess. Hydra interprets this as a **config group selection**, not as a scalar value, so it will look for a file config/run/<run-id>.yaml whose name literally equals the run_id string with spaces & parentheses and will crash. Correct key should be e.g. \"run.run_id={cfg.run.run_id}\" or omit altogether.\n3. evaluate.py tries to read results_dir/config.yaml via wandb.util.load_yaml (function does not exist) – this raises AttributeError before any evaluation logic runs.\n4. Required CLI path “uv run python -u -m src.main run={run_id} …” relies on main.py, but because of #2 subprocess will fail to compose config; thus interface is not functional.\n5. Optuna integration claimed but never invoked; trial_mode flag disables it via override in main.py, however cfg.optuna.n_trials is never used anywhere else, so normal (non-trial) runs silently ignore Optuna.\n6. Hydra default config (config/config.yaml) lacks mandatory sections (method, model, dataset, training, optuna); code assumes their presence → KeyError unless every field is provided by the run config.\nBecause of these issues the code is not yet executable or production-ready."
}
