
LLM Name: o3-2025-04-16
Input:
You are an AI code reviewer validating production-ready experiment code for research papers.

Analyze the provided experiment code and determine if it meets all requirements for immediate execution in research experiments.

# Instructions

## Core Validation Criteria
Check if the generated experiment code meets ALL of the following requirements:

1. **Complete Implementation**:
   - Every component is fully functional, production-ready, publication-worthy code
   - No "omitted for brevity", no "simplified version", no TODO, PLACEHOLDER, pass, or ...
   - All functions and classes are completely implemented
   - No truncated code sections or incomplete implementations

2. **Hydra Integration**:
   - Uses Hydra to manage all experiment configurations from `config/run/*.yaml` files
   - All parameters are loaded from run configs dynamically
   - Proper configuration structure with run_id, method, model, dataset, training, and optuna sections
   - CLI interface matches:
     * Training: `uv run python -u -m src.main run={run_id} results_dir={path}`
     * Evaluation: `uv run python -m src.evaluate results_dir={path} run_ids='["run-1", "run-2", ...]'` (independent execution)
   - Supports trial_mode=true flag for lightweight validation runs (automatically disables WandB)

3. **Complete Data Pipeline**:
   - Full data loading and preprocessing implementation
   - Dataset-specific preprocessing is properly implemented
   - No placeholder dataset loading code
   - Proper error handling for data operations
   - Uses `.cache/` as the cache directory for all datasets and models

4. **Model Implementation**:
   - Complete model architectures for all methods (proposed and comparative methods)
   - No placeholders (TODO, PLACEHOLDER, pass, or incomplete implementations)
   - When External Resources specify HuggingFace models: properly use and customize them (acceptable to wrap AutoModel, add adapters, etc.)
   - When no external models specified: implement architectures from scratch using PyTorch primitives
   - Model-specific configurations correctly applied
   - Proper PyTorch usage throughout

5. **File Structure Compliance**:
   - Contains EXACTLY these required files (and NO other files):
     * `src/train.py`
     * `src/evaluate.py`
     * `src/preprocess.py`
     * `src/model.py`
     * `src/main.py`
     * `pyproject.toml`
     * `config/config.yaml`
   - NO additional files (e.g., NO `src/__init__.py`, NO `setup.py`, NO other Python files)
   - No missing files from the structure
   - All functionality contained within specified files

6. **WandB Integration**:
   - train.py initializes WandB and logs ALL metrics using `wandb.log()`
   - trial_mode automatically disables WandB (sets wandb.mode=disabled)
   - NO results.json or stdout JSON dumps in train.py
   - config/config.yaml contains mandatory WandB settings (entity/project)

7. **Configuration Files**:
   - The generated code properly references config files via Hydra
   - NOTE: config/run/{run_id}.yaml files are provided separately (not in ExperimentCode)
   - All run configurations match the experiment_runs provided
   - Optuna search spaces are properly defined if applicable

8. **Evaluation Script Independence**:
   - evaluate.py is executed independently via `uv run python -m src.evaluate results_dir={path} run_ids='["run-1", "run-2"]'`
   - Accepts `run_ids` parameter as JSON string list (parse with `json.loads(args.run_ids)`)
   - main.py DOES NOT call evaluate.py
   - evaluate.py retrieves ALL data from WandB API using `wandb.Api()` (not from local files)
   - **STEP 1: Per-Run Processing** (for each run_id):
     * Export run-specific metrics to: `{results_dir}/{run_id}/metrics.json`
     * Generate run-specific figures (learning curves, confusion matrices) to: `{results_dir}/{run_id}/`
     * Each run should have its own subdirectory with its metrics and figures
   - **STEP 2: Aggregated Analysis** (after processing all runs):
     * Export aggregated metrics to: `{results_dir}/comparison/aggregated_metrics.json`
     * Compute secondary/derived metrics (e.g., improvement rate: (proposed - baseline) / baseline)
     * Generate comparison figures to: `{results_dir}/comparison/`
     * Cross-run comparison charts (bar charts, box plots)
     * Performance metrics tables
     * Statistical significance tests
   - Proper figure quality: legends, annotations, tight_layout
   - Follows naming convention: `<figure_topic>[_<condition>][_pairN].pdf`
   - train.py and main.py generate NO figures
   - evaluate.py cannot run in trial_mode (no WandB data available when WandB disabled)

9. **Trial Mode Implementation**:
   - trial_mode=true flag properly reduces computational load
   - Training: epochs=1, batches limited to 1-2, Optuna disabled (n_trials=0), small evaluation subset
   - WandB automatically disabled in trial_mode (wandb.mode=disabled)
   - Purpose: Fast validation that code runs without errors

## Output Format
Respond with a JSON object containing:
- `is_code_ready`: boolean - true if ALL criteria are met, false otherwise
- `code_issue`: string - specific issues found if any criteria are not met, focusing on what needs to be fixed

# Current Research Method
{
    "Open Problems": "Most popular test-time adaptation (TTA) methods such as TENT adapt only BatchNorm affine parameters by minimizing prediction entropy on the incoming test stream. Although very effective, they often require 3-10 gradient steps for each incoming mini-batch to reach their best performance. The slow convergence mainly comes from noisy gradients produced by low-confidence (high-entropy) samples that dominate early in adaptation. A simple mechanism to down-weight these uncertain samples during optimization is missing.",
    "Methods": "Confidence-Weighted Entropy Minimization (CW-TENT).\n1. Keep the original TENT objective L = Σ_i H(p_i) where H is entropy.\n2. Introduce a scalar weight per sample w_i = 1 – H(p_i)/log(C)  (ranges in [0,1]; C = #classes).\n3. Replace the loss with the weighted variant  L_w = Σ_i w_i · H(p_i) / Σ_i w_i.\n4. Use the same SGD update of BatchNorm affine parameters, but with a single gradient step per mini-batch (optionally with momentum=0.9).\nTheoretical intuition: high-confidence samples (low entropy) are already close to the target domain optimum and provide reliable gradients; amplifying their contribution yields a cleaner gradient direction, allowing larger learning rate or fewer steps, hence faster convergence.",
    "Experimental Setup": "Dataset: CIFAR-10-C with 15 corruption types, severity 5 (standard TTA benchmark).\nModel: Pre-trained ResNet-18.\nBaselines: 1) Source model (no adaptation). 2) Original TENT (default 10 inner steps). 3) CW-TENT (1 inner step).\nMetric: Top-1 accuracy after processing the full test stream; also accuracy after first K (e.g., 1, 3) adaptation steps to measure convergence speed.",
    "Experimental Code": "import torch, torch.nn.functional as F\n\ndef entropy(p):\n    return -(p * p.log()).sum(1)\n\nclass CWTentAdapter:\n    def __init__(self, model, lr=1e-3, momentum=0.9):\n        self.model = model.eval()\n        self.model.requires_grad_(False)\n        # enable gradients for affine BN params only\n        for m in model.modules():\n            if isinstance(m, torch.nn.BatchNorm2d):\n                m.weight.requires_grad_(True)\n                m.bias.requires_grad_(True)\n        self.optimizer = torch.optim.SGD(filter(lambda p: p.requires_grad, model.parameters()), lr=lr, momentum=momentum)\n\n    @torch.no_grad()\n    def predict(self, x):\n        return self.model(x).softmax(1)\n\n    def adapt(self, x):\n        self.model.train()        # BN uses batch statistics\n        self.optimizer.zero_grad()\n        logits = self.model(x)\n        probs = logits.softmax(1)\n        H = entropy(probs)\n        w = 1 - H / torch.log(torch.tensor(probs.size(1), device=x.device))\n        loss = (w * H).sum() / w.sum()\n        loss.backward()\n        self.optimizer.step()\n        self.model.eval()\n        return probs.detach()\n",
    "Expected Result": "With only one gradient step per mini-batch, CW-TENT is expected to match or surpass the accuracy of TENT that uses 5–10 steps. For example on CIFAR-10-C severity 5: Source 58.7%, TENT (10 steps) 71.0%, CW-TENT (1 step) ≈71.5%. Convergence plot should show CW-TENT reaching peak accuracy after the first step, whereas TENT needs several.",
    "Expected Conclusion": "A tiny modification—confidence-weighted entropy—suppresses noisy gradients from uncertain samples and lets TENT converge in a single step. The change is trivial to implement (four extra lines) yet meaningfully cuts computation and latency at test time, making TTA more practical for real-time deployment."
}

# Experimental Design
- Strategy: The experiment demonstrates that Confidence-Weighted TENT (CW-TENT) enables fast, one-step test-time adaptation by down-weighting high-entropy (low-confidence) samples in the classic entropy-minimisation objective used by TENT. A pre-trained ResNet-18 is sequentially exposed to the CIFAR-10-C corruption stream (severity-5). At every incoming mini-batch the model first produces predictions, then performs one SGD update on BatchNorm affine parameters using the confidence-weighted entropy loss. Performance is evaluated as the stream proceeds and compared against: (1) the frozen source model (no adaptation) and (2) the original TENT that applies 10 inner optimisation steps. All runs share identical data order, initial weights and hardware (8×H200, 144 GB each). Hyper-parameter sweeps on learning-rate, momentum and weight-decay are carried out with random search (30 trials) on a held-out corruption set to obtain fair settings for both CW-TENT and the baseline.
- Proposed Method: Confidence-Weighted Entropy Minimisation (CW-TENT)
Objective: Accelerate, stabilise and computationally lighten test-time adaptation by re-weighting each sample’s entropy according to its prediction confidence.
Theoretical intuition: Samples with low entropy are nearer to the target optimum and thus deliver cleaner gradient signals. Emphasising them suppresses noise from uncertain samples appearing early in the stream, allowing convergence in a single step.
Algorithm:
1. Observation x → logits z = f_θ(x) (θ frozen except BN γ,β).
2. Compute probabilities p = softmax(z) and entropy H_i = −Σ_c p_{ic} log p_{ic}.
3. Compute weight w_i = 1 − H_i / log C (C = number of classes). Range [0,1].
4. Weighted loss: L_w = Σ_i w_i H_i / Σ_i w_i.
5. Perform one SGD step on BN affine parameters only (lr≈1e-3, momentum≈0.9).
6. Switch model back to eval mode and continue streaming.
Implementation additions over TENT:
• 3 lines to calculate w_i and replace loss.
• Inner-loop steps fixed to 1, cutting compute 10×.
Complexities: O(B) extra operations per batch for weight computation – negligible compared with forward/backward passes.
- Evaluation Metrics: ['Top-1 Accuracy', 'Average Accuracy After First Adaptation Step']

# Experiment Runs

- Run ID: proposed-ResNet-18 (11M)-CIFAR-10-C (severity 5)
  Method: proposed
  Model: ResNet-18 (11M)
  Dataset: CIFAR-10-C (severity 5)
  
  Config Content:
  ```yaml
  run_id: 'proposed-ResNet-18 (11M)-CIFAR-10-C (severity 5)'
method: cw-tent
model:
  name: resnet18
  pretrained_checkpoint: timm/resnet18.a1_in1k
  num_parameters_m: 11.7
  num_classes: 10
  freeze_except:
    - BatchNorm.weight
    - BatchNorm.bias
dataset:
  name: cifar10c
  root: /datasets/CIFAR-10-C
  corruption_severity: 5
  corruption_types: all
  split: test
  batch_size: 64
  num_workers: 8
  preprocessing:
    normalize:
      mean: [0.4914, 0.4822, 0.4465]
      std:  [0.2023, 0.1994, 0.2010]
training:
  adaptation: true
  objective: confidence_weighted_entropy
  inner_steps: 1
  learning_rate: 0.001
  momentum: 0.9
  weight_decay: 0.0
  optimizer: sgd
  epochs: 1
  scheduler: none
  gradient_clip: null
  stream_mode: sequential
  log_interval: 50
optuna:
  enabled: true
  n_trials: 30
  direction: maximize
  metric: top1_accuracy
  search_space:
    learning_rate:
      type: loguniform
      low: 1e-4
      high: 1e-2
    momentum:
      type: uniform
      low: 0.0
      high: 0.99
    weight_decay:
      type: loguniform
      low: 1e-6
      high: 1e-3
hardware:
  gpus: 8
  gpu_type: NVIDIA H200
  vram_per_gpu_gb: 144
  mixed_precision: true
seed: 42

  ```
  

- Run ID: comparative-1-ResNet-18 (11M)-CIFAR-10-C (severity 5)
  Method: comparative-1
  Model: ResNet-18 (11M)
  Dataset: CIFAR-10-C (severity 5)
  
  Config Content:
  ```yaml
  run_id: 'comparative-1-ResNet-18 (11M)-CIFAR-10-C (severity 5)'
method: tent
model:
  name: resnet18
  pretrained_checkpoint: timm/resnet18.a1_in1k
  num_parameters_m: 11.7
  num_classes: 10
  freeze_except:
    - BatchNorm.weight
    - BatchNorm.bias
dataset:
  name: cifar10c
  root: /datasets/CIFAR-10-C
  corruption_severity: 5
  corruption_types: all
  split: test
  batch_size: 64
  num_workers: 8
  preprocessing:
    normalize:
      mean: [0.4914, 0.4822, 0.4465]
      std:  [0.2023, 0.1994, 0.2010]
training:
  adaptation: true
  objective: entropy
  inner_steps: 10
  learning_rate: 0.0005
  momentum: 0.9
  weight_decay: 0.0
  optimizer: sgd
  epochs: 1
  scheduler: none
  gradient_clip: null
  stream_mode: sequential
  log_interval: 50
optuna:
  enabled: true
  n_trials: 30
  direction: maximize
  metric: top1_accuracy
  search_space:
    learning_rate:
      type: loguniform
      low: 1e-4
      high: 1e-2
    momentum:
      type: uniform
      low: 0.0
      high: 0.99
    weight_decay:
      type: loguniform
      low: 1e-6
      high: 1e-3
    inner_steps:
      type: categorical
      choices: [1, 3, 5, 10]
hardware:
  gpus: 8
  gpu_type: NVIDIA H200
  vram_per_gpu_gb: 144
  mixed_precision: true
seed: 42

  ```
  


# Generated Experiment Code (To be validated)
{"config_yaml": "", "evaluate_py": "# src/evaluate.py\n\"\"\"Independent evaluation \u0026 visualisation script.\n\nSTEP-1  (per-run):\n  \u2022 Download metrics for every supplied ``run_id`` from WandB\n  \u2022 Dump raw metrics \u2192  \u003cresults_dir\u003e/\u003crun_id\u003e/metrics.json\n  \u2022 Produce learning-curve \u0026 confusion-matrix figures in the same folder\n\nSTEP-2  (aggregated):\n  \u2022 Compute method-level aggregates, relative improvements, statistical\n    significance tests, etc.\n  \u2022 Persist everything \u2192  \u003cresults_dir\u003e/comparison/\n    \u2013 aggregated_metrics.json  (spec below)\n    \u2013 aggregated_metrics_table.csv\n    \u2013 comparison figures  (bar, box, improvement \u2026)\n\nAggregated-JSON schema::\n    {\n        \"per_run\": [  {run-level-stats}, \u2026 ],\n        \"method_mean\": {method: mean-accuracy, \u2026},\n        \"baseline_method\": \"baseline\",\n        \"improvement_over_baseline\": {method: rel-improv, \u2026},\n        \"t_test\": {\"statistic\": value, \"pvalue\": value}\n    }\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nimport sys\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport wandb\nimport yaml\nfrom scipy import stats\n\nsns.set_style(\"whitegrid\")\n\n################################################################################\n# CLI parsing                                                                  #\n################################################################################\n\ndef _parse_kv_cli() -\u003e Dict[str, str]:\n    kv: Dict[str, str] = {}\n    for arg in sys.argv[1:]:\n        if \"=\" not in arg:\n            raise ValueError(\n                f\"Unexpected CLI token \u0027{arg}\u0027. Expected KEY=VALUE pairs only.\")\n        k, v = arg.split(\"=\", 1)\n        kv[k] = v\n    required = {\"results_dir\", \"run_ids\"}\n    missing = required - kv.keys()\n    if missing:\n        raise ValueError(f\"Missing required CLI args: {missing}\")\n    return kv\n\n################################################################################\n# Config helpers                                                               #\n################################################################################\n\ndef _load_wandb_config(results_dir: Path) -\u003e Dict:\n    cfg_file = results_dir / \"config.yaml\"\n    if not cfg_file.exists():\n        raise FileNotFoundError(\n            f\"Cannot locate global config file at {cfg_file}. Did main.py copy it?\")\n    with cfg_file.open(\"r\") as f:\n        return yaml.safe_load(f)\n\n################################################################################\n# Per-run processing                                                           #\n################################################################################\n\ndef _export_metrics(df: pd.DataFrame, out: Path) -\u003e None:\n    df.to_json(out, orient=\"records\", lines=True)\n\n\ndef _plot_learning_curves(df: pd.DataFrame, run_id: str, out_dir: Path) -\u003e List[Path]:\n    figs: List[Path] = []\n    # Select metrics that exist \u0026 are numeric ---------------------------------\n    numeric_cols = [c for c in [\"batch_accuracy\", \"top1_accuracy\"] if c in df.columns]\n    for metric in numeric_cols:\n        plt.figure(figsize=(6, 4))\n        sns.lineplot(x=df.index, y=df[metric])\n        plt.title(f\"{run_id} \u2013 {metric}\")\n        plt.xlabel(\"Step\")\n        plt.ylabel(metric)\n        # Annotate final value -------------------------------------------------\n        if not df[metric].dropna().empty:\n            final_val = df[metric].dropna().iloc[-1]\n            plt.annotate(\n                f\"{final_val:.3f}\",\n                xy=(df.index[-1], final_val),\n                xytext=(-40, 10),\n                textcoords=\"offset points\",\n                fontsize=8,\n            )\n        plt.tight_layout()\n        file = out_dir / f\"learning_curve_{metric}.pdf\"\n        plt.savefig(file)\n        plt.close()\n        figs.append(file)\n    return figs\n\n\ndef _plot_confusion_matrix(cm: np.ndarray, class_names: List[str], title: str, out: Path) -\u003e None:\n    plt.figure(figsize=(6, 5))\n    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=class_names, yticklabels=class_names)\n    plt.ylabel(\"True label\")\n    plt.xlabel(\"Predicted label\")\n    plt.title(title)\n    plt.tight_layout()\n    plt.savefig(out)\n    plt.close()\n\n\ndef per_run_processing(\n    api: wandb.Api,\n    entity: str,\n    project: str,\n    run_id: str,\n    run_dir: Path,\n    class_names: List[str],\n) -\u003e Dict:\n    run = api.run(f\"{entity}/{project}/{run_id}\")\n    hist_df = run.history(keys=[\"batch_accuracy\", \"top1_accuracy\", \"adapt_loss\"], pandas=True)\n\n    _export_metrics(hist_df, run_dir / \"metrics.json\")\n\n    fig_paths = _plot_learning_curves(hist_df, run_id, run_dir)\n\n    # Confusion matrix --------------------------------------------------------\n    cm = None\n    if \"conf_mat\" in run.summary:\n        cm = np.asarray(run.summary[\"conf_mat\"], dtype=int)\n    else:\n        local = run_dir / \"confusion_matrix.npy\"\n        if local.exists():\n            cm = np.load(local)\n    if cm is not None:\n        cm_path = run_dir / \"confusion_matrix.pdf\"\n        _plot_confusion_matrix(cm, class_names, f\"{run_id} \u2013 Confusion Matrix\", cm_path)\n        fig_paths.append(cm_path)\n\n    # Final accuracy ----------------------------------------------------------\n    if \"final_top1_accuracy\" in run.summary:\n        final_acc = float(run.summary[\"final_top1_accuracy\"])\n    elif \"top1_accuracy\" in hist_df.columns and not hist_df[\"top1_accuracy\"].dropna().empty:\n        final_acc = float(hist_df[\"top1_accuracy\"].dropna().iloc[-1])\n    else:\n        final_acc = float(\"nan\")\n\n    # Method tag (stored inside WandB config) ---------------------------------\n    method = run.config.get(\"run\", {}).get(\"method\", \"unknown\")\n\n    print(f\"[Per-run]  {run_id}: saved {len(fig_paths)} figure(s) in {run_dir.relative_to(Path.cwd())}\")\n    for p in fig_paths:\n        print(\"  \u2022\", p)\n\n    return {\n        \"run_id\": run_id,\n        \"method\": method,\n        \"final_accuracy\": final_acc,\n    }\n\n################################################################################\n# Aggregated analysis (STEP-2)                                                 #\n################################################################################\n\ndef _make_bar_plot(df: pd.DataFrame, out: Path, title: str, annotate: bool = True):\n    plt.figure(figsize=(8, 4))\n    sns.barplot(data=df, x=\"run_id\", y=\"final_accuracy\", hue=\"method\", palette=\"viridis\")\n    plt.xticks(rotation=45, ha=\"right\")\n    plt.ylim(0, 100)\n    plt.ylabel(\"Final Top-1 Accuracy (%)\")\n    plt.xlabel(\"\")\n    plt.title(title)\n    if annotate:\n        for i, row in df.iterrows():\n            plt.text(i, row[\"final_accuracy\"] + 0.5, f\"{row[\u0027final_accuracy\u0027]:.1f}\", ha=\"center\", fontsize=8)\n    plt.tight_layout()\n    plt.savefig(out)\n    plt.close()\n\n\ndef _make_box_plot(df: pd.DataFrame, out: Path):\n    plt.figure(figsize=(6, 4))\n    sns.boxplot(data=df, x=\"method\", y=\"final_accuracy\", palette=\"Set2\")\n    sns.stripplot(data=df, x=\"method\", y=\"final_accuracy\", color=\"black\", size=4, jitter=True, dodge=True)\n    plt.ylabel(\"Final Top-1 Accuracy (%)\")\n    plt.title(\"Distribution of final accuracy per method\")\n    plt.tight_layout()\n    plt.savefig(out)\n    plt.close()\n\n\ndef _improvement_plot(method_mean: Dict[str, float], baseline: str, out: Path):\n    improv_dict = {\n        m: 100 * (acc - method_mean[baseline]) / method_mean[baseline]\n        for m, acc in method_mean.items() if m != baseline\n    }\n    plt.figure(figsize=(5, 4))\n    sns.barplot(x=list(improv_dict.keys()), y=list(improv_dict.values()), palette=\"crest\")\n    for i, (m, v) in enumerate(improv_dict.items()):\n        plt.text(i, v + 0.2, f\"{v:.2f}%\", ha=\"center\", fontsize=9)\n    plt.ylabel(\"Relative improvement (%)\")\n    plt.title(\"Improvement over baseline\")\n    plt.tight_layout()\n    plt.savefig(out)\n    plt.close()\n\n\ndef aggregated_analysis(per_run_stats: List[Dict], results_dir: Path) -\u003e None:\n    comp_dir = results_dir / \"comparison\"\n    comp_dir.mkdir(parents=True, exist_ok=True)\n\n    df = pd.DataFrame(per_run_stats)\n\n    # ---------------------------------------------------------------------\n    # Method-level aggregates \u0026 derived metrics\n    # ---------------------------------------------------------------------\n    method_mean: Dict[str, float] = df.groupby(\"method\")[\"final_accuracy\"].mean().to_dict()\n\n    baseline_method = \"baseline\" if \"baseline\" in method_mean else sorted(method_mean.keys())[0]\n    improvement: Dict[str, float] = {\n        m: (acc - method_mean[baseline_method]) / method_mean[baseline_method]\n        for m, acc in method_mean.items()\n        if m != baseline_method\n    }\n\n    # Statistical significance test --------------------------------------\n    if len(df[\"method\"].unique()) \u003e= 2 and baseline_method in df[\"method\"].unique():\n        baseline_vals = df[df.method == baseline_method][\"final_accuracy\"].values\n        best_other_method = max(improvement, key=improvement.get, default=None)\n        if best_other_method is not None:\n            other_vals = df[df.method == best_other_method][\"final_accuracy\"].values\n            t_stat, p_val = stats.ttest_ind(baseline_vals, other_vals, equal_var=False)\n        else:\n            t_stat, p_val = np.nan, np.nan\n    else:\n        t_stat, p_val = np.nan, np.nan\n\n    aggregated_json = {\n        \"per_run\": per_run_stats,\n        \"method_mean\": method_mean,\n        \"baseline_method\": baseline_method,\n        \"improvement_over_baseline\": improvement,\n        \"t_test\": {\"statistic\": float(t_stat), \"pvalue\": float(p_val)},\n    }\n\n    agg_json_path = comp_dir / \"aggregated_metrics.json\"\n    with agg_json_path.open(\"w\") as f:\n        json.dump(aggregated_json, f, indent=2)\n\n    # Human-readable CSV table -------------------------------------------\n    df.to_csv(comp_dir / \"aggregated_metrics_table.csv\", index=False)\n\n    # ---------------------------------------------------------------------\n    # Comparison figures\n    # ---------------------------------------------------------------------\n    bar_path = comp_dir / \"final_accuracy_comparison.pdf\"\n    _make_bar_plot(df, bar_path, title=\"Final accuracy across runs\")\n\n    box_path = comp_dir / \"accuracy_boxplot_per_method.pdf\"\n    _make_box_plot(df, box_path)\n\n    if improvement:\n        imp_path = comp_dir / \"relative_improvement_over_baseline.pdf\"\n        _improvement_plot(method_mean, baseline_method, imp_path)\n    else:\n        imp_path = None\n\n    # ---------------------------------------------------------------------\n    # Print generated artefacts\n    # ---------------------------------------------------------------------\n    print(\"\\n[Aggregated] Generated outputs:\")\n    for p in [agg_json_path, comp_dir / \"aggregated_metrics_table.csv\", bar_path, box_path, imp_path]:\n        if p is not None:\n            print(\"  \u2022\", p)\n\n################################################################################\n# Main                                                                         #\n################################################################################\n\ndef main() -\u003e None:\n    cli = _parse_kv_cli()\n    results_dir = Path(cli[\"results_dir\"]).expanduser().resolve()\n    run_ids = json.loads(cli[\"run_ids\"])\n\n    wandb_cfg = _load_wandb_config(results_dir)\n    entity = wandb_cfg[\"wandb\"][\"entity\"]\n    project = wandb_cfg[\"wandb\"][\"project\"]\n\n    api = wandb.Api()\n    class_names = [str(i) for i in range(10)]  # CIFAR-10 default (0-9)\n\n    per_run_stats: List[Dict] = []\n    for rid in run_ids:\n        r_dir = results_dir / rid\n        r_dir.mkdir(parents=True, exist_ok=True)\n        stats = per_run_processing(api, entity, project, rid, r_dir, class_names)\n        per_run_stats.append(stats)\n\n    aggregated_analysis(per_run_stats, results_dir)\n\n\nif __name__ == \"__main__\":\n    main()", "main_py": "", "model_py": "", "preprocess_py": "", "pyproject_toml": "", "train_py": ""}

Analyze the experiment code thoroughly. Ensure it is complete, executable, and ready for publication-quality research experiments.
Output:
{
    "is_code_ready": false,
    "code_issue": "Only src/evaluate.py is partially provided; src/train.py, src/main.py, src/model.py, src/preprocess.py, pyproject.toml, and config/config.yaml are all missing (empty). Code therefore violates file-structure requirement, lacks complete data pipeline, model, training loop, Hydra integration, WandB setup, etc. Implementation is incomplete and not executable."
}
