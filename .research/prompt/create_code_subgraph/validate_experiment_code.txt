
LLM Name: o3-2025-04-16
Input:
You are an AI code reviewer validating production-ready experiment code for research papers.

Analyze the provided experiment code and determine if it meets all requirements for immediate execution in research experiments.

# Instructions

## Core Validation Criteria
Check if the generated experiment code meets ALL of the following requirements:

1. **Complete Implementation**:
   - Every component is fully functional, production-ready, publication-worthy code
   - No "omitted for brevity", no "simplified version", no TODO, PLACEHOLDER, pass, or ...
   - All functions and classes are completely implemented
   - No truncated code sections or incomplete implementations

2. **Hydra Integration**:
   - Uses Hydra to manage all experiment configurations from `config/run/*.yaml` files
   - All parameters are loaded from run configs dynamically
   - Proper configuration structure with run_id, method, model, dataset, training, and optuna sections
   - CLI interface matches:
     * Training: `uv run python -u -m src.main run={run_id} results_dir={path}`
     * Evaluation: `uv run python -m src.evaluate results_dir={path} run_ids='["run-1", "run-2", ...]'` (independent execution)
   - Supports trial_mode=true flag for lightweight validation runs (automatically disables WandB)

3. **Complete Data Pipeline**:
   - Full data loading and preprocessing implementation
   - Dataset-specific preprocessing is properly implemented
   - No placeholder dataset loading code
   - Proper error handling for data operations
   - Uses `.cache/` as the cache directory for all datasets and models

4. **Model Implementation**:
   - Complete model architectures for all methods (proposed and comparative methods)
   - No placeholders (TODO, PLACEHOLDER, pass, or incomplete implementations)
   - When External Resources specify HuggingFace models: properly use and customize them (acceptable to wrap AutoModel, add adapters, etc.)
   - When no external models specified: implement architectures from scratch using PyTorch primitives
   - Model-specific configurations correctly applied
   - Proper PyTorch usage throughout

5. **File Structure Compliance**:
   - Contains EXACTLY these required files (and NO other files):
     * `src/train.py`
     * `src/evaluate.py`
     * `src/preprocess.py`
     * `src/model.py`
     * `src/main.py`
     * `pyproject.toml`
     * `config/config.yaml`
   - NO additional files (e.g., NO `src/__init__.py`, NO `setup.py`, NO other Python files)
   - No missing files from the structure
   - All functionality contained within specified files

6. **WandB Integration**:
   - train.py initializes WandB and logs ALL metrics using `wandb.log()`
   - trial_mode automatically disables WandB (sets wandb.mode=disabled)
   - NO results.json or stdout JSON dumps in train.py
   - config/config.yaml contains mandatory WandB settings (entity/project)

7. **Configuration Files**:
   - The generated code properly references config files via Hydra
   - NOTE: config/run/{run_id}.yaml files are provided separately (not in ExperimentCode)
   - All run configurations match the experiment_runs provided
   - Optuna search spaces are properly defined if applicable

8. **Evaluation Script Independence**:
   - evaluate.py is executed independently via `uv run python -m src.evaluate results_dir={path} run_ids='["run-1", "run-2"]'`
   - Accepts `run_ids` parameter as JSON string list (parse with `json.loads(args.run_ids)`)
   - main.py DOES NOT call evaluate.py
   - evaluate.py retrieves ALL data from WandB API using `wandb.Api()` (not from local files)
   - **STEP 1: Per-Run Processing** (for each run_id):
     * Export run-specific metrics to: `{results_dir}/{run_id}/metrics.json`
     * Generate run-specific figures (learning curves, confusion matrices) to: `{results_dir}/{run_id}/`
     * Each run should have its own subdirectory with its metrics and figures
   - **STEP 2: Aggregated Analysis** (after processing all runs):
     * Export aggregated metrics to: `{results_dir}/comparison/aggregated_metrics.json`
     * Compute secondary/derived metrics (e.g., improvement rate: (proposed - baseline) / baseline)
     * Generate comparison figures to: `{results_dir}/comparison/`
     * Cross-run comparison charts (bar charts, box plots)
     * Performance metrics tables
     * Statistical significance tests
   - Proper figure quality: legends, annotations, tight_layout
   - Follows naming convention: `<figure_topic>[_<condition>][_pairN].pdf`
   - train.py and main.py generate NO figures
   - evaluate.py cannot run in trial_mode (no WandB data available when WandB disabled)

9. **Trial Mode Implementation**:
   - trial_mode=true flag properly reduces computational load
   - Training: epochs=1, batches limited to 1-2, Optuna disabled (n_trials=0), small evaluation subset
   - WandB automatically disabled in trial_mode (wandb.mode=disabled)
   - Purpose: Fast validation that code runs without errors

## Output Format
Respond with a JSON object containing:
- `is_code_ready`: boolean - true if ALL criteria are met, false otherwise
- `code_issue`: string - specific issues found if any criteria are not met, focusing on what needs to be fixed

# Current Research Method
{
    "Open Problems": "Most popular test-time adaptation (TTA) methods such as TENT adapt only BatchNorm affine parameters by minimizing prediction entropy on the incoming test stream. Although very effective, they often require 3-10 gradient steps for each incoming mini-batch to reach their best performance. The slow convergence mainly comes from noisy gradients produced by low-confidence (high-entropy) samples that dominate early in adaptation. A simple mechanism to down-weight these uncertain samples during optimization is missing.",
    "Methods": "Confidence-Weighted Entropy Minimization (CW-TENT).\n1. Keep the original TENT objective L = Σ_i H(p_i) where H is entropy.\n2. Introduce a scalar weight per sample w_i = 1 – H(p_i)/log(C)  (ranges in [0,1]; C = #classes).\n3. Replace the loss with the weighted variant  L_w = Σ_i w_i · H(p_i) / Σ_i w_i.\n4. Use the same SGD update of BatchNorm affine parameters, but with a single gradient step per mini-batch (optionally with momentum=0.9).\nTheoretical intuition: high-confidence samples (low entropy) are already close to the target domain optimum and provide reliable gradients; amplifying their contribution yields a cleaner gradient direction, allowing larger learning rate or fewer steps, hence faster convergence.",
    "Experimental Setup": "Dataset: CIFAR-10-C with 15 corruption types, severity 5 (standard TTA benchmark).\nModel: Pre-trained ResNet-18.\nBaselines: 1) Source model (no adaptation). 2) Original TENT (default 10 inner steps). 3) CW-TENT (1 inner step).\nMetric: Top-1 accuracy after processing the full test stream; also accuracy after first K (e.g., 1, 3) adaptation steps to measure convergence speed.",
    "Experimental Code": "import torch, torch.nn.functional as F\n\ndef entropy(p):\n    return -(p * p.log()).sum(1)\n\nclass CWTentAdapter:\n    def __init__(self, model, lr=1e-3, momentum=0.9):\n        self.model = model.eval()\n        self.model.requires_grad_(False)\n        # enable gradients for affine BN params only\n        for m in model.modules():\n            if isinstance(m, torch.nn.BatchNorm2d):\n                m.weight.requires_grad_(True)\n                m.bias.requires_grad_(True)\n        self.optimizer = torch.optim.SGD(filter(lambda p: p.requires_grad, model.parameters()), lr=lr, momentum=momentum)\n\n    @torch.no_grad()\n    def predict(self, x):\n        return self.model(x).softmax(1)\n\n    def adapt(self, x):\n        self.model.train()        # BN uses batch statistics\n        self.optimizer.zero_grad()\n        logits = self.model(x)\n        probs = logits.softmax(1)\n        H = entropy(probs)\n        w = 1 - H / torch.log(torch.tensor(probs.size(1), device=x.device))\n        loss = (w * H).sum() / w.sum()\n        loss.backward()\n        self.optimizer.step()\n        self.model.eval()\n        return probs.detach()\n",
    "Expected Result": "With only one gradient step per mini-batch, CW-TENT is expected to match or surpass the accuracy of TENT that uses 5–10 steps. For example on CIFAR-10-C severity 5: Source 58.7%, TENT (10 steps) 71.0%, CW-TENT (1 step) ≈71.5%. Convergence plot should show CW-TENT reaching peak accuracy after the first step, whereas TENT needs several.",
    "Expected Conclusion": "A tiny modification—confidence-weighted entropy—suppresses noisy gradients from uncertain samples and lets TENT converge in a single step. The change is trivial to implement (four extra lines) yet meaningfully cuts computation and latency at test time, making TTA more practical for real-time deployment."
}

# Experimental Design
- Strategy: The experiment demonstrates that Confidence-Weighted TENT (CW-TENT) enables fast, one-step test-time adaptation by down-weighting high-entropy (low-confidence) samples in the classic entropy-minimisation objective used by TENT. A pre-trained ResNet-18 is sequentially exposed to the CIFAR-10-C corruption stream (severity-5). At every incoming mini-batch the model first produces predictions, then performs one SGD update on BatchNorm affine parameters using the confidence-weighted entropy loss. Performance is evaluated as the stream proceeds and compared against: (1) the frozen source model (no adaptation) and (2) the original TENT that applies 10 inner optimisation steps. All runs share identical data order, initial weights and hardware (8×H200, 144 GB each). Hyper-parameter sweeps on learning-rate, momentum and weight-decay are carried out with random search (30 trials) on a held-out corruption set to obtain fair settings for both CW-TENT and the baseline.
- Proposed Method: Confidence-Weighted Entropy Minimisation (CW-TENT)
Objective: Accelerate, stabilise and computationally lighten test-time adaptation by re-weighting each sample’s entropy according to its prediction confidence.
Theoretical intuition: Samples with low entropy are nearer to the target optimum and thus deliver cleaner gradient signals. Emphasising them suppresses noise from uncertain samples appearing early in the stream, allowing convergence in a single step.
Algorithm:
1. Observation x → logits z = f_θ(x) (θ frozen except BN γ,β).
2. Compute probabilities p = softmax(z) and entropy H_i = −Σ_c p_{ic} log p_{ic}.
3. Compute weight w_i = 1 − H_i / log C (C = number of classes). Range [0,1].
4. Weighted loss: L_w = Σ_i w_i H_i / Σ_i w_i.
5. Perform one SGD step on BN affine parameters only (lr≈1e-3, momentum≈0.9).
6. Switch model back to eval mode and continue streaming.
Implementation additions over TENT:
• 3 lines to calculate w_i and replace loss.
• Inner-loop steps fixed to 1, cutting compute 10×.
Complexities: O(B) extra operations per batch for weight computation – negligible compared with forward/backward passes.
- Evaluation Metrics: ['Top-1 Accuracy', 'Average Accuracy After First Adaptation Step']

# Experiment Runs

- Run ID: proposed-ResNet-18 (11M)-CIFAR-10-C (severity 5)
  Method: proposed
  Model: ResNet-18 (11M)
  Dataset: CIFAR-10-C (severity 5)
  
  Config Content:
  ```yaml
  run_id: 'proposed-ResNet-18 (11M)-CIFAR-10-C (severity 5)'
method: cw-tent
model:
  name: resnet18
  pretrained_checkpoint: timm/resnet18.a1_in1k
  num_parameters_m: 11.7
  num_classes: 10
  freeze_except:
    - BatchNorm.weight
    - BatchNorm.bias
dataset:
  name: cifar10c
  root: /datasets/CIFAR-10-C
  corruption_severity: 5
  corruption_types: all
  split: test
  batch_size: 64
  num_workers: 8
  preprocessing:
    normalize:
      mean: [0.4914, 0.4822, 0.4465]
      std:  [0.2023, 0.1994, 0.2010]
training:
  adaptation: true
  objective: confidence_weighted_entropy
  inner_steps: 1
  learning_rate: 0.001
  momentum: 0.9
  weight_decay: 0.0
  optimizer: sgd
  epochs: 1
  scheduler: none
  gradient_clip: null
  stream_mode: sequential
  log_interval: 50
optuna:
  enabled: true
  n_trials: 30
  direction: maximize
  metric: top1_accuracy
  search_space:
    learning_rate:
      type: loguniform
      low: 1e-4
      high: 1e-2
    momentum:
      type: uniform
      low: 0.0
      high: 0.99
    weight_decay:
      type: loguniform
      low: 1e-6
      high: 1e-3
hardware:
  gpus: 8
  gpu_type: NVIDIA H200
  vram_per_gpu_gb: 144
  mixed_precision: true
seed: 42

  ```
  

- Run ID: comparative-1-ResNet-18 (11M)-CIFAR-10-C (severity 5)
  Method: comparative-1
  Model: ResNet-18 (11M)
  Dataset: CIFAR-10-C (severity 5)
  
  Config Content:
  ```yaml
  run_id: 'comparative-1-ResNet-18 (11M)-CIFAR-10-C (severity 5)'
method: tent
model:
  name: resnet18
  pretrained_checkpoint: timm/resnet18.a1_in1k
  num_parameters_m: 11.7
  num_classes: 10
  freeze_except:
    - BatchNorm.weight
    - BatchNorm.bias
dataset:
  name: cifar10c
  root: /datasets/CIFAR-10-C
  corruption_severity: 5
  corruption_types: all
  split: test
  batch_size: 64
  num_workers: 8
  preprocessing:
    normalize:
      mean: [0.4914, 0.4822, 0.4465]
      std:  [0.2023, 0.1994, 0.2010]
training:
  adaptation: true
  objective: entropy
  inner_steps: 10
  learning_rate: 0.0005
  momentum: 0.9
  weight_decay: 0.0
  optimizer: sgd
  epochs: 1
  scheduler: none
  gradient_clip: null
  stream_mode: sequential
  log_interval: 50
optuna:
  enabled: true
  n_trials: 30
  direction: maximize
  metric: top1_accuracy
  search_space:
    learning_rate:
      type: loguniform
      low: 1e-4
      high: 1e-2
    momentum:
      type: uniform
      low: 0.0
      high: 0.99
    weight_decay:
      type: loguniform
      low: 1e-6
      high: 1e-3
    inner_steps:
      type: categorical
      choices: [1, 3, 5, 10]
hardware:
  gpus: 8
  gpu_type: NVIDIA H200
  vram_per_gpu_gb: 144
  mixed_precision: true
seed: 42

  ```
  


# Generated Experiment Code (To be validated)
{"config_yaml": "# config/config.yaml\n# ~~~~~~~~~~~~~~~~~~~\n# Global Hydra configuration shared by all runs.\n\ndefaults:\n  - _self_\n  - run: null     # will be provided via CLI (config/run/\u003cID\u003e.yaml)\n\ntrial_mode: false\nresults_dir: ./results\nseed: 42\n\nwandb:\n  entity: gengaru617-personal\n  project: 251020-test\n  mode: online  # auto-overridden to \"disabled\" in trial-mode\n\nhydra:\n  run:\n    dir: ./outputs/${now:%Y-%m-%d}_${now:%H-%M-%S}_${run.run_id}\n  job_logging:\n    version: 1\n    root:\n      level: INFO\n  hydra_logging:\n    version: 1\n    root:\n      level: INFO\n\n# ---------------------------------------------------------------------\n# Default placeholders (populated by run-specific YAML)\n# ---------------------------------------------------------------------\nrun:\n  run_id: dummy\n  method: baseline\nmodel: {}\ndataset: {}\ntraining: {}\noptuna: {}\nconfig: {}  # arbitrary extras\n\n# End of config.yaml\n", "evaluate_py": "# src/evaluate.py\n\"\"\"Independent evaluation \u0026 visualisation script (runs after training).\n\nFixed to fully comply with Rule-8: *all* artefacts are now fetched directly\nfrom the WandB public API \u2013 no local fall-backs are used anymore.\n\"\"\"\nfrom __future__ import annotations\n\nimport argparse\nimport json\nimport os\nimport sys\nfrom pathlib import Path\nfrom typing import Dict, List\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport wandb\nimport yaml\nfrom scipy import stats\n\nsns.set_style(\"whitegrid\")\n\n################################################################################\n# CLI                                                                           \n################################################################################\n\ndef _parse_cli() -\u003e argparse.Namespace:\n    p = argparse.ArgumentParser()\n    p.add_argument(\"results_dir\", type=str)\n    p.add_argument(\"run_ids\", type=str, help=\"JSON list, e.g. \u0027[\\\"run1\\\",\\\"run2\\\"]\u0027\")\n    return p.parse_args()\n\n################################################################################\n# Config                                                                        \n################################################################################\n\ndef _load_wandb_config(results_dir: Path) -\u003e Dict:\n    cfg_file = results_dir / \"config.yaml\"\n    if not cfg_file.exists():\n        raise FileNotFoundError(f\"Global config.yaml not found at {cfg_file}\")\n    with cfg_file.open() as f:\n        return yaml.safe_load(f)\n\n################################################################################\n# Per-run processing                                                            \n################################################################################\n\ndef _export_metrics(df: pd.DataFrame, out: Path):\n    df.to_json(out, orient=\"records\", lines=True)\n\n\ndef _plot_learning_curve(df: pd.DataFrame, run_id: str, metric: str, out: Path):\n    plt.figure(figsize=(6, 4))\n    sns.lineplot(x=df.index, y=df[metric])\n    plt.title(f\"{run_id} \u2013 {metric}\")\n    plt.xlabel(\"Step\")\n    plt.ylabel(metric)\n    if not df[metric].dropna().empty:\n        final_val = df[metric].dropna().iloc[-1]\n        plt.annotate(f\"{final_val:.2f}\", xy=(df.index[-1], final_val), xytext=(-40, 10),\n                     textcoords=\"offset points\", fontsize=8)\n    plt.tight_layout()\n    plt.savefig(out)\n    plt.close()\n\n\ndef per_run(api: wandb.Api, entity: str, project: str, run_id: str, out_dir: Path) -\u003e Dict:\n    run = api.run(f\"{entity}/{project}/{run_id}\")\n    hist_df = run.history(pandas=True)\n\n    _export_metrics(hist_df, out_dir / \"metrics.json\")\n\n    figs: List[Path] = []\n    for metric in [\"top1_accuracy\", \"batch_accuracy\"]:\n        if metric in hist_df.columns:\n            fig_path = out_dir / f\"learning_curve_{metric}.pdf\"\n            _plot_learning_curve(hist_df, run_id, metric, fig_path)\n            figs.append(fig_path)\n\n    # Confusion matrix from WandB summary --------------------------------\n    cm = run.summary.get(\"conf_mat\")\n    if cm is not None:\n        cm = np.asarray(cm, dtype=int)\n        class_names = [str(i) for i in range(cm.shape[0])]\n        plt.figure(figsize=(6, 5))\n        sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=class_names,\n                    yticklabels=class_names)\n        plt.title(f\"{run_id} \u2013 Confusion Matrix\")\n        plt.ylabel(\"True\")\n        plt.xlabel(\"Pred\")\n        plt.tight_layout()\n        cm_path = out_dir / \"confusion_matrix.pdf\"\n        plt.savefig(cm_path)\n        plt.close()\n        figs.append(cm_path)\n\n    final_acc = run.summary.get(\"final_top1_accuracy\", float(\"nan\"))\n    method = run.config.get(\"run\", {}).get(\"method\", \"unknown\")\n\n    print(f\"[Per-run] {run_id}: saved {len(figs)} figure(s)\")\n    for f in figs:\n        print(\"  \u2022\", f)\n\n    return {\"run_id\": run_id, \"method\": method, \"final_accuracy\": final_acc}\n\n################################################################################\n# Aggregated analysis                                                           \n################################################################################\n\ndef _bar_plot(df: pd.DataFrame, out: Path):\n    plt.figure(figsize=(8, 4))\n    sns.barplot(data=df, x=\"run_id\", y=\"final_accuracy\", hue=\"method\", palette=\"viridis\")\n    plt.xticks(rotation=45, ha=\"right\")\n    for i, row in df.iterrows():\n        plt.text(i, row[\"final_accuracy\"] + 0.5, f\"{row[\u0027final_accuracy\u0027]:.1f}\", ha=\"center\", fontsize=8)\n    plt.ylabel(\"Final Top-1 Accuracy (%)\")\n    plt.tight_layout()\n    plt.savefig(out)\n    plt.close()\n\n\ndef _box_plot(df: pd.DataFrame, out: Path):\n    plt.figure(figsize=(6, 4))\n    sns.boxplot(data=df, x=\"method\", y=\"final_accuracy\", palette=\"Set2\")\n    sns.stripplot(data=df, x=\"method\", y=\"final_accuracy\", color=\"black\", size=4, jitter=True)\n    plt.ylabel(\"Final Top-1 Accuracy (%)\")\n    plt.tight_layout()\n    plt.savefig(out)\n    plt.close()\n\n\ndef aggregated(per_run_stats: List[Dict], results_dir: Path):\n    comp_dir = results_dir / \"comparison\"\n    comp_dir.mkdir(parents=True, exist_ok=True)\n\n    df = pd.DataFrame(per_run_stats)\n    df.to_csv(comp_dir / \"aggregated_metrics_table.csv\", index=False)\n\n    agg_json_path = comp_dir / \"aggregated_metrics.json\"\n    with agg_json_path.open(\"w\") as f:\n        json.dump(per_run_stats, f, indent=2)\n\n    _bar_plot(df, comp_dir / \"final_accuracy_comparison.pdf\")\n    _box_plot(df, comp_dir / \"boxplot_accuracy.pdf\")\n\n    print(\"\\n[Aggregated] Generated artefacts:\")\n    for p in comp_dir.iterdir():\n        print(\"  \u2022\", p)\n\n################################################################################\n# Main                                                                          \n################################################################################\n\ndef main():\n    args = _parse_cli()\n    results_dir = Path(args.results_dir).expanduser().resolve()\n    run_ids = json.loads(args.run_ids)\n\n    wandb_cfg = _load_wandb_config(results_dir)\n    entity = wandb_cfg[\"wandb\"][\"entity\"]\n    project = wandb_cfg[\"wandb\"][\"project\"]\n\n    api = wandb.Api()\n\n    per_stats: List[Dict] = []\n    for rid in run_ids:\n        rdir = results_dir / rid\n        rdir.mkdir(parents=True, exist_ok=True)\n        stats = per_run(api, entity, project, rid, rdir)\n        per_stats.append(stats)\n\n    aggregated(per_stats, results_dir)\n\n\nif __name__ == \"__main__\":\n    main()", "main_py": "# src/main.py\n\"\"\"Hydra top-level orchestrator that spawns a *separate* Python process for\n`src.train` so that each run has an isolated CUDA context.\n\"\"\"\nfrom __future__ import annotations\n\nimport os\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom typing import List\n\nimport hydra\nfrom hydra.utils import to_absolute_path\nfrom omegaconf import OmegaConf\n\n#######################################################################\n# Helper                                                               \n#######################################################################\n\ndef _serialize_cfg(cfg, results_dir: Path):\n    out = results_dir / \"config.yaml\"\n    OmegaConf.save(config=cfg, f=str(out))\n\n\ndef _build_overrides(cfg) -\u003e List[str]:\n    o: List[str] = [f\"run={cfg.run.run_id}\", f\"results_dir={cfg.results_dir}\"]\n    # propagate trial-mode flag *and* its consequential overrides\n    o.append(f\"trial_mode={str(cfg.trial_mode).lower()}\")\n    if cfg.trial_mode:\n        o += [\n            \"wandb.mode=disabled\",\n            \"optuna.n_trials=0\",\n            \"training.epochs=1\",\n            \"dataset.batch_size=8\",\n            \"training.inner_steps=1\",\n        ]\n    return o\n\n#######################################################################\n# Hydra entry-point                                                    \n#######################################################################\n\n@hydra.main(version_base=None, config_path=\"../config\", config_name=\"config\")\ndef main(cfg):\n    results_dir = Path(to_absolute_path(cfg.results_dir)).expanduser().resolve()\n    results_dir.mkdir(parents=True, exist_ok=True)\n\n    _serialize_cfg(cfg, results_dir)\n\n    cmd = [sys.executable, \"-u\", \"-m\", \"src.train\"] + _build_overrides(cfg)\n    print(\"[Main] Launching subprocess:\\n  \", \" \".join(cmd))\n\n    env = os.environ.copy()\n    env.setdefault(\"CUBLAS_WORKSPACE_CONFIG\", \":4096:8\")\n\n    ret = subprocess.call(cmd, env=env)\n    if ret != 0:\n        raise RuntimeError(f\"Training failed with exit-code {ret}\")\n\n    print(\"[Main] Finished \u2013 outputs at\", results_dir)\n\n\nif __name__ == \"__main__\":\n    main()", "model_py": "# src/model.py\n\"\"\"Model factory utilities.\n\nFixes:\n1. Honour `model.pretrained_checkpoint` from the config.\n2. Ensure `.cache/` is consistently used for model weights.\n\"\"\"\nfrom __future__ import annotations\n\nfrom typing import Any\n\nimport timm\nimport torch.nn as nn\n\n\ndef create_model(model_cfg, n_classes: int) -\u003e nn.Module:\n    name = model_cfg.name.lower()\n    ckpt = getattr(model_cfg, \"pretrained_checkpoint\", None)\n    if name == \"resnet18\":\n        model = timm.create_model(\n            ckpt if ckpt is not None else \"resnet18.a1_in1k\",\n            pretrained=True,\n            num_classes=n_classes,\n            cache_dir=\".cache/\",\n        )\n    else:\n        raise ValueError(f\"Unsupported model name: {model_cfg.name}\")\n    return model\n\n\ndef enable_bn_adaptation_params(model: nn.Module) -\u003e None:\n    for p in model.parameters():\n        p.requires_grad_(False)\n    for m in model.modules():\n        if isinstance(m, nn.BatchNorm2d):\n            if m.weight is not None:\n                m.weight.requires_grad_(True)\n            if m.bias is not None:\n                m.bias.requires_grad_(True)", "preprocess_py": "# src/preprocess.py\n\"\"\"Data loading utilities for CIFAR-10-C.\nAll artefacts are placed under the mandatory ``.cache/`` directory.\n\"\"\"\nfrom __future__ import annotations\n\nfrom pathlib import Path\nfrom typing import List, Tuple\n\nimport numpy as np\nimport torch\nimport torchvision.transforms as T\nfrom torch.utils.data import DataLoader, Dataset, Subset\n\n\nclass CIFAR10CDataset(Dataset):\n    _STANDARD_TYPES: List[str] = [\n        \"gaussian_noise\", \"shot_noise\", \"impulse_noise\", \"defocus_blur\",\n        \"glass_blur\", \"motion_blur\", \"zoom_blur\", \"snow\", \"frost\", \"fog\",\n        \"brightness\", \"contrast\", \"elastic_transform\", \"pixelate\", \"jpeg_compression\",\n    ]\n\n    def __init__(self, root: Path, severity: int, corruption_types, transform=None):\n        super().__init__()\n        self.transform = transform\n        self.severity = severity\n\n        if corruption_types == \"all\" or (isinstance(corruption_types, list) and \"all\" in corruption_types):\n            self.types = self._STANDARD_TYPES\n        else:\n            self.types = list(corruption_types)\n\n        labels_path = root / \"labels.npy\"\n        if not labels_path.exists():\n            raise FileNotFoundError(\n                \"CIFAR-10-C was not found. Please download it from \"\n                \"https://zenodo.org/record/2535967 and place it under .cache/\"\n            )\n        self.labels = np.load(labels_path)\n\n        self._images: List[np.ndarray] = []\n        self._cum_counts: List[int] = []\n        start, end = (severity - 1) * 10000, severity * 10000\n        for c in self.types:\n            arr = np.load(root / f\"{c}.npy\", mmap_mode=\"r\")[start:end]\n            self._images.append(arr)\n            self._cum_counts.append(arr.shape[0] if not self._cum_counts else self._cum_counts[-1] + arr.shape[0])\n        self.length = self._cum_counts[-1]\n\n    # ------------------------------------------------------------------\n    def __len__(self):\n        return self.length\n\n    # ------------------------------------------------------------------\n    def __getitem__(self, idx):\n        bucket = int(np.searchsorted(self._cum_counts, idx, side=\"right\"))\n        prev = 0 if bucket == 0 else self._cum_counts[bucket - 1]\n        local_idx = idx - prev\n        img_np = self._images[bucket][local_idx]\n        label = int(self.labels[local_idx])\n        img = T.ToPILImage()(img_np)\n        if self.transform:\n            img = self.transform(img)\n        return img, label\n\n\n# -----------------------------------------------------------------------------\n# Factory                                                                        \n# -----------------------------------------------------------------------------\n\ndef build_dataloader(dataset_cfg, cache_dir: Path) -\u003e Tuple[DataLoader, int]:\n    # Resolve root inside .cache/ as required\n    root = Path(dataset_cfg.root)\n    if not root.is_absolute():\n        root = cache_dir / root\n    root = root.expanduser().resolve()\n\n    transform = T.Compose([\n        T.ToTensor(),\n        T.Normalize(mean=dataset_cfg.preprocessing.normalize.mean,\n                     std=dataset_cfg.preprocessing.normalize.std),\n    ])\n\n    ds = CIFAR10CDataset(\n        root=root,\n        severity=int(dataset_cfg.corruption_severity),\n        corruption_types=dataset_cfg.corruption_types,\n        transform=transform,\n    )\n\n    # In *trial-mode* (flag checked at call-site) we might want a subset, but\n    # easier to handle break-condition in training loop.\n    loader = DataLoader(\n        ds,\n        batch_size=int(dataset_cfg.batch_size),\n        shuffle=False,\n        num_workers=int(dataset_cfg.num_workers),\n        pin_memory=True,\n    )\n    return loader, 10  # CIFAR-10 has 10 classes", "pyproject_toml": "[build-system]\nrequires = [\"setuptools\u003e=42\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"cw-tent-experiments\"\nversion = \"0.2.0\"\ndescription = \"Confidence-Weighted Test-Time Adaptation experiments with Hydra\"\nauthors = [{name = \"Researcher\"}]\n\ndependencies = [\n    \"torch\u003e=2.0\",\n    \"torchvision\u003e=0.15\",\n    \"hydra-core\u003e=1.3\",\n    \"wandb\u003e=0.15\",\n    \"timm\u003e=0.9\",\n    \"numpy\",\n    \"pandas\",\n    \"scikit-learn\",\n    \"matplotlib\",\n    \"seaborn\",\n    \"scipy\",\n]\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]", "train_py": "# src/train.py\n\"\"\"Single experiment run executor (Hydra entry-point)\n====================================================\nThis file is executed *only* from ``src.main``.  It receives the full Hydra\nconfig and performs one experiment run: data loading, (optional) adaptation\nand metric logging to WandB.\n\nMajor fixes compared to the previous iteration\n----------------------------------------------\n1. Correct config access (cfg.run.method rather than cfg.method).\n2. Honour `model.pretrained_checkpoint` from the run-config.\n3. Use `.cache/` for **all** external artefacts (datasets \u0026 models).\n4. Proper *trial-mode* handling \u2013 limit to two mini-batches and disable WandB.\n\"\"\"\nfrom __future__ import annotations\n\nimport os\nimport sys\nfrom pathlib import Path\nfrom typing import List\n\nimport hydra\nimport numpy as np\nimport torch\nimport torch.nn.functional as F\nfrom hydra.utils import to_absolute_path\nfrom omegaconf import OmegaConf\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\nfrom .model import create_model, enable_bn_adaptation_params\nfrom .preprocess import build_dataloader\n\ntry:\n    import wandb\nexcept ImportError:  # pragma: no cover\n    wandb = None  # type: ignore\n\n###############################################################################\n# Utility functions                                                            #\n###############################################################################\n\ndef set_deterministic(seed: int) -\u003e None:\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    np.random.seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n\n\ndef entropy_from_logits(logits: torch.Tensor) -\u003e torch.Tensor:\n    probs = logits.softmax(1).clamp_min(1e-12)\n    return -(probs * probs.log()).sum(1)\n\n\ndef adapt_step(\n    model: torch.nn.Module,\n    x: torch.Tensor,\n    objective: str,\n    inner_steps: int,\n    optimizer: torch.optim.Optimizer,\n) -\u003e None:\n    \"\"\"Gradient-based BN-affine adaptation for one mini-batch.\"\"\"\n    model.train()  # BN layers use batch statistics\n    for _ in range(inner_steps):\n        optimizer.zero_grad(set_to_none=True)\n        logits = model(x)\n        H = entropy_from_logits(logits)\n        if objective == \"entropy\":\n            loss = H.mean()\n        elif objective == \"confidence_weighted_entropy\":\n            C = logits.size(1)\n            with torch.no_grad():\n                w = 1.0 - H / np.log(C)\n            loss = (w * H).sum() / w.sum()\n        else:\n            raise ValueError(f\"Unsupported objective: {objective}\")\n        loss.backward()\n        optimizer.step()\n    model.eval()\n\n###############################################################################\n# Main loop                                                                    #\n###############################################################################\n\n@hydra.main(version_base=None, config_path=\"../config\", config_name=\"config\")\ndef main(cfg):  # noqa: C901\n    # ------------------------------------------------------------------\n    # Re-establish absolute paths (Hydra changes CWD)\n    # ------------------------------------------------------------------\n    results_dir = Path(to_absolute_path(cfg.results_dir)).expanduser().resolve()\n    results_dir.mkdir(parents=True, exist_ok=True)\n\n    # Determinism -------------------------------------------------------\n    set_deterministic(int(cfg.seed))\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    # ------------------------------------------------------------------\n    # Data\n    # ------------------------------------------------------------------\n    loader, n_classes = build_dataloader(cfg.dataset, cache_dir=Path(\".cache\"))\n\n    # ------------------------------------------------------------------\n    # Model\n    # ------------------------------------------------------------------\n    model = create_model(cfg.model, n_classes=n_classes)\n    enable_bn_adaptation_params(model)\n    model.to(device)\n\n    # Optimiser (only BN-affine params) --------------------------------\n    bn_params = [p for p in model.parameters() if p.requires_grad]\n    optimizer = torch.optim.SGD(\n        bn_params,\n        lr=float(cfg.training.learning_rate),\n        momentum=float(cfg.training.momentum),\n        weight_decay=float(cfg.training.weight_decay),\n    )\n\n    # ------------------------------------------------------------------\n    # WandB initialisation\n    # ------------------------------------------------------------------\n    if cfg.wandb.mode != \"disabled\":\n        assert wandb is not None, \"wandb must be installed\"\n        run = wandb.init(\n            entity=cfg.wandb.entity,\n            project=cfg.wandb.project,\n            id=cfg.run.run_id,\n            resume=\"allow\",\n            mode=cfg.wandb.mode,\n            config=OmegaConf.to_container(cfg, resolve=True),\n        )\n        print(f\"[WandB] Run URL: {run.get_url()}\")\n    else:\n        run = None  # type: ignore\n\n    #####################################################################\n    # Streaming evaluation / adaptation                                 #\n    #####################################################################\n    model.eval()\n    all_preds: List[int] = []\n    all_targets: List[int] = []\n\n    max_steps = 2 if cfg.trial_mode else len(loader)\n    for step, (imgs, targets) in enumerate(loader, 1):\n        if step \u003e max_steps:  # trial-mode early break\n            break\n\n        imgs = imgs.to(device, non_blocking=True)\n        targets = targets.to(device, non_blocking=True)\n\n        # 1. Forward BEFORE adaptation ----------------------------------\n        with torch.no_grad():\n            logits = model(imgs)\n            preds = logits.argmax(1)\n\n        all_preds.extend(preds.cpu().tolist())\n        all_targets.extend(targets.cpu().tolist())\n\n        # 2. Adaptation --------------------------------------------------\n        if cfg.training.adaptation and cfg.run.method in {\"tent\", \"cw-tent\"}:\n            adapt_step(\n                model,\n                imgs,\n                objective=cfg.training.objective,\n                inner_steps=int(cfg.training.inner_steps),\n                optimizer=optimizer,\n            )\n\n        # 3. Logging -----------------------------------------------------\n        if (step % int(cfg.training.log_interval) == 0 or step == max_steps) and run is not None:\n            acc = accuracy_score(all_targets, all_preds) * 100.0\n            wandb.log({\"top1_accuracy\": acc, \"step\": step})\n        if step % int(cfg.training.log_interval) == 0 or step == max_steps:\n            acc = accuracy_score(all_targets, all_preds) * 100.0\n            print(f\"[step {step:5d}] running-stream accuracy = {acc:6.2f}%\")\n\n    # ------------------------------------------------------------------\n    # Final metrics\n    # ------------------------------------------------------------------\n    final_acc = accuracy_score(all_targets, all_preds) * 100.0\n    cm = confusion_matrix(all_targets, all_preds)\n\n    if run is not None:\n        wandb.log({\"final_top1_accuracy\": final_acc, \"conf_mat\": cm.tolist()})\n        run.finish()\n\n    # Save CM locally so that *offline* evaluation is still possible\n    np.save(results_dir / \"confusion_matrix.npy\", cm)\n\n\nif __name__ == \"__main__\":\n    sys.argv[0] = \"train.py\"\n    main()"}

Analyze the experiment code thoroughly. Ensure it is complete, executable, and ready for publication-quality research experiments.
Output:
{
    "is_code_ready": false,
    "code_issue": "Several mandatory requirements are violated:\n\n1. Complete data pipeline / cache rule – the run-configs hard-code `dataset.root: /datasets/CIFAR-10-C` while the specification demands that *all* datasets are accessed exclusively through the `.cache/` directory.  The current code therefore tries to read data outside `.cache/`, violating requirement 3.\n\n2. Optuna section ignored – although every run-config contains an `optuna` block and hydra overrides propagate `optuna.n_trials`, `src/train.py` never instantiates or uses Optuna.  This contradicts requirement 2 (optuna search spaces must be honoured when present) and leaves an incomplete implementation path.\n\nBecause of the two issues above the package is not fully compliant with the execution requirements and cannot be accepted as production-ready yet."
}
