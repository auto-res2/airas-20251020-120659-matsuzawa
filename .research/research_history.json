{
  "research_topic": "Improving Test-Time Adaptation in terms of convergence speed.",
  "queries": [
    "fast convergence test-time adaptation"
  ],
  "research_study_list": [
    {
      "title": "Test Time Adaptation With Regularized Loss for Weakly Supervised Salient Object Detection"
    },
    {
      "title": "DELTA: DEGRADATION-FREE FULLY TEST-TIME ADAPTATION",
      "abstract": "Fully test-time adaptation aims at adapting a pre-trained model to the test\nstream during real-time inference, which is urgently required when the test\ndistribution differs from the training distribution. Several efforts have been\ndevoted to improving adaptation performance. However, we find that two\nunfavorable defects are concealed in the prevalent adaptation methodologies\nlike test-time batch normalization (BN) and self-learning. First, we reveal\nthat the normalization statistics in test-time BN are completely affected by\nthe currently received test samples, resulting in inaccurate estimates. Second,\nwe show that during test-time adaptation, the parameter update is biased\ntowards some dominant classes. In addition to the extensively studied test\nstream with independent and class-balanced samples, we further observe that the\ndefects can be exacerbated in more complicated test environments, such as\n(time) dependent or class-imbalanced data. We observe that previous approaches\nwork well in certain scenarios while show performance degradation in others due\nto their faults. In this paper, we provide a plug-in solution called DELTA for\nDegradation-freE fuLly Test-time Adaptation, which consists of two components:\n(i) Test-time Batch Renormalization (TBR), introduced to improve the estimated\nnormalization statistics. (ii) Dynamic Online re-weighTing (DOT), designed to\naddress the class bias within optimization. We investigate various test-time\nadaptation methods on three commonly used datasets with four scenarios, and a\nnewly introduced real-world dataset. DELTA can help them deal with all\nscenarios simultaneously, leading to SOTA performance.",
      "meta_data": {
        "arxiv_id": "2301.13018v1",
        "authors": [
          "Bowen Zhao",
          "Chen Chen",
          "Shu-Tao Xia"
        ],
        "published_date": "2023-01-30T15:54:00Z",
        "pdf_url": "https://arxiv.org/pdf/2301.13018v1.pdf"
      }
    }
  ],
  "new_method": {
    "method": "{\n    \"Open Problems\": \"Most popular test-time adaptation (TTA) methods such as TENT adapt only BatchNorm affine parameters by minimizing prediction entropy on the incoming test stream. Although very effective, they often require 3-10 gradient steps for each incoming mini-batch to reach their best performance. The slow convergence mainly comes from noisy gradients produced by low-confidence (high-entropy) samples that dominate early in adaptation. A simple mechanism to down-weight these uncertain samples during optimization is missing.\",\n    \"Methods\": \"Confidence-Weighted Entropy Minimization (CW-TENT).\\n1. Keep the original TENT objective L = Σ_i H(p_i) where H is entropy.\\n2. Introduce a scalar weight per sample w_i = 1 – H(p_i)/log(C)  (ranges in [0,1]; C = #classes).\\n3. Replace the loss with the weighted variant  L_w = Σ_i w_i · H(p_i) / Σ_i w_i.\\n4. Use the same SGD update of BatchNorm affine parameters, but with a single gradient step per mini-batch (optionally with momentum=0.9).\\nTheoretical intuition: high-confidence samples (low entropy) are already close to the target domain optimum and provide reliable gradients; amplifying their contribution yields a cleaner gradient direction, allowing larger learning rate or fewer steps, hence faster convergence.\",\n    \"Experimental Setup\": \"Dataset: CIFAR-10-C with 15 corruption types, severity 5 (standard TTA benchmark).\\nModel: Pre-trained ResNet-18.\\nBaselines: 1) Source model (no adaptation). 2) Original TENT (default 10 inner steps). 3) CW-TENT (1 inner step).\\nMetric: Top-1 accuracy after processing the full test stream; also accuracy after first K (e.g., 1, 3) adaptation steps to measure convergence speed.\",\n    \"Experimental Code\": \"import torch, torch.nn.functional as F\\n\\ndef entropy(p):\\n    return -(p * p.log()).sum(1)\\n\\nclass CWTentAdapter:\\n    def __init__(self, model, lr=1e-3, momentum=0.9):\\n        self.model = model.eval()\\n        self.model.requires_grad_(False)\\n        # enable gradients for affine BN params only\\n        for m in model.modules():\\n            if isinstance(m, torch.nn.BatchNorm2d):\\n                m.weight.requires_grad_(True)\\n                m.bias.requires_grad_(True)\\n        self.optimizer = torch.optim.SGD(filter(lambda p: p.requires_grad, model.parameters()), lr=lr, momentum=momentum)\\n\\n    @torch.no_grad()\\n    def predict(self, x):\\n        return self.model(x).softmax(1)\\n\\n    def adapt(self, x):\\n        self.model.train()        # BN uses batch statistics\\n        self.optimizer.zero_grad()\\n        logits = self.model(x)\\n        probs = logits.softmax(1)\\n        H = entropy(probs)\\n        w = 1 - H / torch.log(torch.tensor(probs.size(1), device=x.device))\\n        loss = (w * H).sum() / w.sum()\\n        loss.backward()\\n        self.optimizer.step()\\n        self.model.eval()\\n        return probs.detach()\\n\",\n    \"Expected Result\": \"With only one gradient step per mini-batch, CW-TENT is expected to match or surpass the accuracy of TENT that uses 5–10 steps. For example on CIFAR-10-C severity 5: Source 58.7%, TENT (10 steps) 71.0%, CW-TENT (1 step) ≈71.5%. Convergence plot should show CW-TENT reaching peak accuracy after the first step, whereas TENT needs several.\",\n    \"Expected Conclusion\": \"A tiny modification—confidence-weighted entropy—suppresses noisy gradients from uncertain samples and lets TENT converge in a single step. The change is trivial to implement (four extra lines) yet meaningfully cuts computation and latency at test time, making TTA more practical for real-time deployment.\"\n}",
    "experimental_design": {
      "experiment_summary": "The experiment demonstrates that Confidence-Weighted TENT (CW-TENT) enables fast, one-step test-time adaptation by down-weighting high-entropy (low-confidence) samples in the classic entropy-minimisation objective used by TENT. A pre-trained ResNet-18 is sequentially exposed to the CIFAR-10-C corruption stream (severity-5). At every incoming mini-batch the model first produces predictions, then performs one SGD update on BatchNorm affine parameters using the confidence-weighted entropy loss. Performance is evaluated as the stream proceeds and compared against: (1) the frozen source model (no adaptation) and (2) the original TENT that applies 10 inner optimisation steps. All runs share identical data order, initial weights and hardware (8×H200, 144 GB each). Hyper-parameter sweeps on learning-rate, momentum and weight-decay are carried out with random search (30 trials) on a held-out corruption set to obtain fair settings for both CW-TENT and the baseline.",
      "evaluation_metrics": [
        "Top-1 Accuracy",
        "Average Accuracy After First Adaptation Step"
      ],
      "proposed_method": "Confidence-Weighted Entropy Minimisation (CW-TENT)\nObjective: Accelerate, stabilise and computationally lighten test-time adaptation by re-weighting each sample’s entropy according to its prediction confidence.\nTheoretical intuition: Samples with low entropy are nearer to the target optimum and thus deliver cleaner gradient signals. Emphasising them suppresses noise from uncertain samples appearing early in the stream, allowing convergence in a single step.\nAlgorithm:\n1. Observation x → logits z = f_θ(x) (θ frozen except BN γ,β).\n2. Compute probabilities p = softmax(z) and entropy H_i = −Σ_c p_{ic} log p_{ic}.\n3. Compute weight w_i = 1 − H_i / log C (C = number of classes). Range [0,1].\n4. Weighted loss: L_w = Σ_i w_i H_i / Σ_i w_i.\n5. Perform one SGD step on BN affine parameters only (lr≈1e-3, momentum≈0.9).\n6. Switch model back to eval mode and continue streaming.\nImplementation additions over TENT:\n• 3 lines to calculate w_i and replace loss.\n• Inner-loop steps fixed to 1, cutting compute 10×.\nComplexities: O(B) extra operations per batch for weight computation – negligible compared with forward/backward passes.",
      "comparative_methods": [
        "TENT (classic, 10 inner steps)"
      ],
      "models_to_use": [
        "ResNet-18 (11M)"
      ],
      "datasets_to_use": [
        "CIFAR-10-C (severity 5)"
      ],
      "hyperparameters_to_search": {
        "learning_rate": "0.0001-0.01",
        "momentum": "0.0-0.99",
        "weight_decay": "0-1e-3"
      },
      "external_resources": {
        "hugging_face": {
          "models": [
            {
              "id": "timm/resnet18.a1_in1k",
              "author": "timm",
              "sha": "491b427b45c94c7fb0e78b5474cc919aff584bbf",
              "created_at": "2023-04-05T18:02:50+00:00",
              "last_modified": "2025-01-21T21:13:50+00:00",
              "private": false,
              "gated": false,
              "disabled": false,
              "downloads": 2441357,
              "likes": 12,
              "siblings": [
                {
                  "rfilename": ".gitattributes"
                },
                {
                  "rfilename": "README.md"
                },
                {
                  "rfilename": "config.json"
                },
                {
                  "rfilename": "model.safetensors"
                },
                {
                  "rfilename": "pytorch_model.bin"
                }
              ],
              "card_data": {
                "license": "apache-2.0",
                "language": [],
                "library_name": "timm",
                "tags": [
                  "image-classification",
                  "timm",
                  "transformers"
                ],
                "datasets": [],
                "task_categories": [],
                "size_categories": [],
                "metrics": [],
                "widget": []
              },
              "tags": [
                "timm",
                "pytorch",
                "safetensors",
                "image-classification",
                "transformers",
                "arxiv:2110.00476",
                "arxiv:1512.03385",
                "license:apache-2.0",
                "region:us"
              ],
              "pipeline_tag": "image-classification",
              "library_name": "timm",
              "readme": "---\ntags:\n- image-classification\n- timm\n- transformers\nlicense: apache-2.0\nlibrary_name: timm\n---\n# Model card for resnet18.a1_in1k\n\nA ResNet-B image classification model.\n\nThis model features:\n * ReLU activations\n * single layer 7x7 convolution with pooling\n * 1x1 convolution shortcut downsample\n\nTrained on ImageNet-1k in `timm` using recipe template described below.\n\nRecipe details:\n * ResNet Strikes Back `A1` recipe\n * LAMB optimizer with BCE loss\n * Cosine LR schedule with warmup\n\n\n## Model Details\n- **Model Type:** Image classification / feature backbone\n- **Model Stats:**\n  - Params (M): 11.7\n  - GMACs: 1.8\n  - Activations (M): 2.5\n  - Image size: train = 224 x 224, test = 288 x 288\n- **Papers:**\n  - ResNet strikes back: An improved training procedure in timm: https://arxiv.org/abs/2110.00476\n  - Deep Residual Learning for Image Recognition: https://arxiv.org/abs/1512.03385\n- **Original:** https://github.com/huggingface/pytorch-image-models\n\n## Model Usage\n### Image Classification\n```python\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\n\nimg = Image.open(urlopen(\n    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'\n))\n\nmodel = timm.create_model('resnet18.a1_in1k', pretrained=True)\nmodel = model.eval()\n\n# get model specific transforms (normalization, resize)\ndata_config = timm.data.resolve_model_data_config(model)\ntransforms = timm.data.create_transform(**data_config, is_training=False)\n\noutput = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1\n\ntop5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)\n```\n\n### Feature Map Extraction\n```python\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\n\nimg = Image.open(urlopen(\n    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'\n))\n\nmodel = timm.create_model(\n    'resnet18.a1_in1k',\n    pretrained=True,\n    features_only=True,\n)\nmodel = model.eval()\n\n# get model specific transforms (normalization, resize)\ndata_config = timm.data.resolve_model_data_config(model)\ntransforms = timm.data.create_transform(**data_config, is_training=False)\n\noutput = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1\n\nfor o in output:\n    # print shape of each feature map in output\n    # e.g.:\n    #  torch.Size([1, 64, 112, 112])\n    #  torch.Size([1, 64, 56, 56])\n    #  torch.Size([1, 128, 28, 28])\n    #  torch.Size([1, 256, 14, 14])\n    #  torch.Size([1, 512, 7, 7])\n\n    print(o.shape)\n```\n\n### Image Embeddings\n```python\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\n\nimg = Image.open(urlopen(\n    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'\n))\n\nmodel = timm.create_model(\n    'resnet18.a1_in1k',\n    pretrained=True,\n    num_classes=0,  # remove classifier nn.Linear\n)\nmodel = model.eval()\n\n# get model specific transforms (normalization, resize)\ndata_config = timm.data.resolve_model_data_config(model)\ntransforms = timm.data.create_transform(**data_config, is_training=False)\n\noutput = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor\n\n# or equivalently (without needing to set num_classes=0)\n\noutput = model.forward_features(transforms(img).unsqueeze(0))\n# output is unpooled, a (1, 512, 7, 7) shaped tensor\n\noutput = model.forward_head(output, pre_logits=True)\n# output is a (1, num_features) shaped tensor\n```\n\n## Model Comparison\nExplore the dataset and runtime metrics of this model in timm [model results](https://github.com/huggingface/pytorch-image-models/tree/main/results).\n\n|model                                     |img_size|top1 |top5 |param_count|gmacs|macts|img/sec|\n|------------------------------------------|--------|-----|-----|-----------|-----|-----|-------|\n|[seresnextaa101d_32x8d.sw_in12k_ft_in1k_288](https://huggingface.co/timm/seresnextaa101d_32x8d.sw_in12k_ft_in1k_288)|320     |86.72|98.17|93.6       |35.2 |69.7 |451    |\n|[seresnextaa101d_32x8d.sw_in12k_ft_in1k_288](https://huggingface.co/timm/seresnextaa101d_32x8d.sw_in12k_ft_in1k_288)|288     |86.51|98.08|93.6       |28.5 |56.4 |560    |\n|[seresnextaa101d_32x8d.sw_in12k_ft_in1k](https://huggingface.co/timm/seresnextaa101d_32x8d.sw_in12k_ft_in1k)|288     |86.49|98.03|93.6       |28.5 |56.4 |557    |\n|[seresnextaa101d_32x8d.sw_in12k_ft_in1k](https://huggingface.co/timm/seresnextaa101d_32x8d.sw_in12k_ft_in1k)|224     |85.96|97.82|93.6       |17.2 |34.2 |923    |\n|[resnext101_32x32d.fb_wsl_ig1b_ft_in1k](https://huggingface.co/timm/resnext101_32x32d.fb_wsl_ig1b_ft_in1k)|224     |85.11|97.44|468.5      |87.3 |91.1 |254    |\n|[resnetrs420.tf_in1k](https://huggingface.co/timm/resnetrs420.tf_in1k)|416     |85.0 |97.12|191.9      |108.4|213.8|134    |\n|[ecaresnet269d.ra2_in1k](https://huggingface.co/timm/ecaresnet269d.ra2_in1k)|352     |84.96|97.22|102.1      |50.2 |101.2|291    |\n|[ecaresnet269d.ra2_in1k](https://huggingface.co/timm/ecaresnet269d.ra2_in1k)|320     |84.73|97.18|102.1      |41.5 |83.7 |353    |\n|[resnetrs350.tf_in1k](https://huggingface.co/timm/resnetrs350.tf_in1k)|384     |84.71|96.99|164.0      |77.6 |154.7|183    |\n|[seresnextaa101d_32x8d.ah_in1k](https://huggingface.co/timm/seresnextaa101d_32x8d.ah_in1k)|288     |84.57|97.08|93.6       |28.5 |56.4 |557    |\n|[resnetrs200.tf_in1k](https://huggingface.co/timm/resnetrs200.tf_in1k)|320     |84.45|97.08|93.2       |31.5 |67.8 |446    |\n|[resnetrs270.tf_in1k](https://huggingface.co/timm/resnetrs270.tf_in1k)|352     |84.43|96.97|129.9      |51.1 |105.5|280    |\n|[seresnext101d_32x8d.ah_in1k](https://huggingface.co/timm/seresnext101d_32x8d.ah_in1k)|288     |84.36|96.92|93.6       |27.6 |53.0 |595    |\n|[seresnet152d.ra2_in1k](https://huggingface.co/timm/seresnet152d.ra2_in1k)|320     |84.35|97.04|66.8       |24.1 |47.7 |610    |\n|[resnetrs350.tf_in1k](https://huggingface.co/timm/resnetrs350.tf_in1k)|288     |84.3 |96.94|164.0      |43.7 |87.1 |333    |\n|[resnext101_32x8d.fb_swsl_ig1b_ft_in1k](https://huggingface.co/timm/resnext101_32x8d.fb_swsl_ig1b_ft_in1k)|224     |84.28|97.17|88.8       |16.5 |31.2 |1100   |\n|[resnetrs420.tf_in1k](https://huggingface.co/timm/resnetrs420.tf_in1k)|320     |84.24|96.86|191.9      |64.2 |126.6|228    |\n|[seresnext101_32x8d.ah_in1k](https://huggingface.co/timm/seresnext101_32x8d.ah_in1k)|288     |84.19|96.87|93.6       |27.2 |51.6 |613    |\n|[resnext101_32x16d.fb_wsl_ig1b_ft_in1k](https://huggingface.co/timm/resnext101_32x16d.fb_wsl_ig1b_ft_in1k)|224     |84.18|97.19|194.0      |36.3 |51.2 |581    |\n|[resnetaa101d.sw_in12k_ft_in1k](https://huggingface.co/timm/resnetaa101d.sw_in12k_ft_in1k)|288     |84.11|97.11|44.6       |15.1 |29.0 |1144   |\n|[resnet200d.ra2_in1k](https://huggingface.co/timm/resnet200d.ra2_in1k)|320     |83.97|96.82|64.7       |31.2 |67.3 |518    |\n|[resnetrs200.tf_in1k](https://huggingface.co/timm/resnetrs200.tf_in1k)|256     |83.87|96.75|93.2       |20.2 |43.4 |692    |\n|[seresnextaa101d_32x8d.ah_in1k](https://huggingface.co/timm/seresnextaa101d_32x8d.ah_in1k)|224     |83.86|96.65|93.6       |17.2 |34.2 |923    |\n|[resnetrs152.tf_in1k](https://huggingface.co/timm/resnetrs152.tf_in1k)|320     |83.72|96.61|86.6       |24.3 |48.1 |617    |\n|[seresnet152d.ra2_in1k](https://huggingface.co/timm/seresnet152d.ra2_in1k)|256     |83.69|96.78|66.8       |15.4 |30.6 |943    |\n|[seresnext101d_32x8d.ah_in1k](https://huggingface.co/timm/seresnext101d_32x8d.ah_in1k)|224     |83.68|96.61|93.6       |16.7 |32.0 |986    |\n|[resnet152d.ra2_in1k](https://huggingface.co/timm/resnet152d.ra2_in1k)|320     |83.67|96.74|60.2       |24.1 |47.7 |706    |\n|[resnetrs270.tf_in1k](https://huggingface.co/timm/resnetrs270.tf_in1k)|256     |83.59|96.61|129.9      |27.1 |55.8 |526    |\n|[seresnext101_32x8d.ah_in1k](https://huggingface.co/timm/seresnext101_32x8d.ah_in1k)|224     |83.58|96.4 |93.6       |16.5 |31.2 |1013   |\n|[resnetaa101d.sw_in12k_ft_in1k](https://huggingface.co/timm/resnetaa101d.sw_in12k_ft_in1k)|224     |83.54|96.83|44.6       |9.1  |17.6 |1864   |\n|[resnet152.a1h_in1k](https://huggingface.co/timm/resnet152.a1h_in1k)|288     |83.46|96.54|60.2       |19.1 |37.3 |904    |\n|[resnext101_32x16d.fb_swsl_ig1b_ft_in1k](https://huggingface.co/timm/resnext101_32x16d.fb_swsl_ig1b_ft_in1k)|224     |83.35|96.85|194.0      |36.3 |51.2 |582    |\n|[resnet200d.ra2_in1k](https://huggingface.co/timm/resnet200d.ra2_in1k)|256     |83.23|96.53|64.7       |20.0 |43.1 |809    |\n|[resnext101_32x4d.fb_swsl_ig1b_ft_in1k](https://huggingface.co/timm/resnext101_32x4d.fb_swsl_ig1b_ft_in1k)|224     |83.22|96.75|44.2       |8.0  |21.2 |1814   |\n|[resnext101_64x4d.c1_in1k](https://huggingface.co/timm/resnext101_64x4d.c1_in1k)|288     |83.16|96.38|83.5       |25.7 |51.6 |590    |\n|[resnet152d.ra2_in1k](https://huggingface.co/timm/resnet152d.ra2_in1k)|256     |83.14|96.38|60.2       |15.4 |30.5 |1096   |\n|[resnet101d.ra2_in1k](https://huggingface.co/timm/resnet101d.ra2_in1k)|320     |83.02|96.45|44.6       |16.5 |34.8 |992    |\n|[ecaresnet101d.miil_in1k](https://huggingface.co/timm/ecaresnet101d.miil_in1k)|288     |82.98|96.54|44.6       |13.4 |28.2 |1077   |\n|[resnext101_64x4d.tv_in1k](https://huggingface.co/timm/resnext101_64x4d.tv_in1k)|224     |82.98|96.25|83.5       |15.5 |31.2 |989    |\n|[resnetrs152.tf_in1k](https://huggingface.co/timm/resnetrs152.tf_in1k)|256     |82.86|96.28|86.6       |15.6 |30.8 |951    |\n|[resnext101_32x8d.tv2_in1k](https://huggingface.co/timm/resnext101_32x8d.tv2_in1k)|224     |82.83|96.22|88.8       |16.5 |31.2 |1099   |\n|[resnet152.a1h_in1k](https://huggingface.co/timm/resnet152.a1h_in1k)|224     |82.8 |96.13|60.2       |11.6 |22.6 |1486   |\n|[resnet101.a1h_in1k](https://huggingface.co/timm/resnet101.a1h_in1k)|288     |82.8 |96.32|44.6       |13.0 |26.8 |1291   |\n|[resnet152.a1_in1k](https://huggingface.co/timm/resnet152.a1_in1k)|288     |82.74|95.71|60.2       |19.1 |37.3 |905    |\n|[resnext101_32x8d.fb_wsl_ig1b_ft_in1k](https://huggingface.co/timm/resnext101_32x8d.fb_wsl_ig1b_ft_in1k)|224     |82.69|96.63|88.8       |16.5 |31.2 |1100   |\n|[resnet152.a2_in1k](https://huggingface.co/timm/resnet152.a2_in1k)|288     |82.62|95.75|60.2       |19.1 |37.3 |904    |\n|[resnetaa50d.sw_in12k_ft_in1k](https://huggingface.co/timm/resnetaa50d.sw_in12k_ft_in1k)|288     |82.61|96.49|25.6       |8.9  |20.6 |1729   |\n|[resnet61q.ra2_in1k](https://huggingface.co/timm/resnet61q.ra2_in1k)|288     |82.53|96.13|36.8       |9.9  |21.5 |1773   |\n|[wide_resnet101_2.tv2_in1k](https://huggingface.co/timm/wide_resnet101_2.tv2_in1k)|224     |82.5 |96.02|126.9      |22.8 |21.2 |1078   |\n|[resnext101_64x4d.c1_in1k](https://huggingface.co/timm/resnext101_64x4d.c1_in1k)|224     |82.46|95.92|83.5       |15.5 |31.2 |987    |\n|[resnet51q.ra2_in1k](https://huggingface.co/timm/resnet51q.ra2_in1k)|288     |82.36|96.18|35.7       |8.1  |20.9 |1964   |\n|[ecaresnet50t.ra2_in1k](https://huggingface.co/timm/ecaresnet50t.ra2_in1k)|320     |82.35|96.14|25.6       |8.8  |24.1 |1386   |\n|[resnet101.a1_in1k](https://huggingface.co/timm/resnet101.a1_in1k)|288     |82.31|95.63|44.6       |13.0 |26.8 |1291   |\n|[resnetrs101.tf_in1k](https://huggingface.co/timm/resnetrs101.tf_in1k)|288     |82.29|96.01|63.6       |13.6 |28.5 |1078   |\n|[resnet152.tv2_in1k](https://huggingface.co/timm/resnet152.tv2_in1k)|224     |82.29|96.0 |60.2       |11.6 |22.6 |1484   |\n|[wide_resnet50_2.racm_in1k](https://huggingface.co/timm/wide_resnet50_2.racm_in1k)|288     |82.27|96.06|68.9       |18.9 |23.8 |1176   |\n|[resnet101d.ra2_in1k](https://huggingface.co/timm/resnet101d.ra2_in1k)|256     |82.26|96.07|44.6       |10.6 |22.2 |1542   |\n|[resnet101.a2_in1k](https://huggingface.co/timm/resnet101.a2_in1k)|288     |82.24|95.73|44.6       |13.0 |26.8 |1290   |\n|[seresnext50_32x4d.racm_in1k](https://huggingface.co/timm/seresnext50_32x4d.racm_in1k)|288     |82.2 |96.14|27.6       |7.0  |23.8 |1547   |\n|[ecaresnet101d.miil_in1k](https://huggingface.co/timm/ecaresnet101d.miil_in1k)|224     |82.18|96.05|44.6       |8.1  |17.1 |1771   |\n|[resnext50_32x4d.fb_swsl_ig1b_ft_in1k](https://huggingface.co/timm/resnext50_32x4d.fb_swsl_ig1b_ft_in1k)|224     |82.17|96.22|25.0       |4.3  |14.4 |2943   |\n|[ecaresnet50t.a1_in1k](https://huggingface.co/timm/ecaresnet50t.a1_in1k)|288     |82.12|95.65|25.6       |7.1  |19.6 |1704   |\n|[resnext50_32x4d.a1h_in1k](https://huggingface.co/timm/resnext50_32x4d.a1h_in1k)|288     |82.03|95.94|25.0       |7.0  |23.8 |1745   |\n|[ecaresnet101d_pruned.miil_in1k](https://huggingface.co/timm/ecaresnet101d_pruned.miil_in1k)|288     |82.0 |96.15|24.9       |5.8  |12.7 |1787   |\n|[resnet61q.ra2_in1k](https://huggingface.co/timm/resnet61q.ra2_in1k)|256     |81.99|95.85|36.8       |7.8  |17.0 |2230   |\n|[resnext101_32x8d.tv2_in1k](https://huggingface.co/timm/resnext101_32x8d.tv2_in1k)|176     |81.98|95.72|88.8       |10.3 |19.4 |1768   |\n|[resnet152.a1_in1k](https://huggingface.co/timm/resnet152.a1_in1k)|224     |81.97|95.24|60.2       |11.6 |22.6 |1486   |\n|[resnet101.a1h_in1k](https://huggingface.co/timm/resnet101.a1h_in1k)|224     |81.93|95.75|44.6       |7.8  |16.2 |2122   |\n|[resnet101.tv2_in1k](https://huggingface.co/timm/resnet101.tv2_in1k)|224     |81.9 |95.77|44.6       |7.8  |16.2 |2118   |\n|[resnext101_32x16d.fb_ssl_yfcc100m_ft_in1k](https://huggingface.co/timm/resnext101_32x16d.fb_ssl_yfcc100m_ft_in1k)|224     |81.84|96.1 |194.0      |36.3 |51.2 |583    |\n|[resnet51q.ra2_in1k](https://huggingface.co/timm/resnet51q.ra2_in1k)|256     |81.78|95.94|35.7       |6.4  |16.6 |2471   |\n|[resnet152.a2_in1k](https://huggingface.co/timm/resnet152.a2_in1k)|224     |81.77|95.22|60.2       |11.6 |22.6 |1485   |\n|[resnetaa50d.sw_in12k_ft_in1k](https://huggingface.co/timm/resnetaa50d.sw_in12k_ft_in1k)|224     |81.74|96.06|25.6       |5.4  |12.4 |2813   |\n|[ecaresnet50t.a2_in1k](https://huggingface.co/timm/ecaresnet50t.a2_in1k)|288     |81.65|95.54|25.6       |7.1  |19.6 |1703   |\n|[ecaresnet50d.miil_in1k](https://huggingface.co/timm/ecaresnet50d.miil_in1k)|288     |81.64|95.88|25.6       |7.2  |19.7 |1694   |\n|[resnext101_32x8d.fb_ssl_yfcc100m_ft_in1k](https://huggingface.co/timm/resnext101_32x8d.fb_ssl_yfcc100m_ft_in1k)|224     |81.62|96.04|88.8       |16.5 |31.2 |1101   |\n|[wide_resnet50_2.tv2_in1k](https://huggingface.co/timm/wide_resnet50_2.tv2_in1k)|224     |81.61|95.76|68.9       |11.4 |14.4 |1930   |\n|[resnetaa50.a1h_in1k](https://huggingface.co/timm/resnetaa50.a1h_in1k)|288     |81.61|95.83|25.6       |8.5  |19.2 |1868   |\n|[resnet101.a1_in1k](https://huggingface.co/timm/resnet101.a1_in1k)|224     |81.5 |95.16|44.6       |7.8  |16.2 |2125   |\n|[resnext50_32x4d.a1_in1k](https://huggingface.co/timm/resnext50_32x4d.a1_in1k)|288     |81.48|95.16|25.0       |7.0  |23.8 |1745   |\n|[gcresnet50t.ra2_in1k](https://huggingface.co/timm/gcresnet50t.ra2_in1k)|288     |81.47|95.71|25.9       |6.9  |18.6 |2071   |\n|[wide_resnet50_2.racm_in1k](https://huggingface.co/timm/wide_resnet50_2.racm_in1k)|224     |81.45|95.53|68.9       |11.4 |14.4 |1929   |\n|[resnet50d.a1_in1k](https://huggingface.co/timm/resnet50d.a1_in1k)|288     |81.44|95.22|25.6       |7.2  |19.7 |1908   |\n|[ecaresnet50t.ra2_in1k](https://huggingface.co/timm/ecaresnet50t.ra2_in1k)|256     |81.44|95.67|25.6       |5.6  |15.4 |2168   |\n|[ecaresnetlight.miil_in1k](https://huggingface.co/timm/ecaresnetlight.miil_in1k)|288     |81.4 |95.82|30.2       |6.8  |13.9 |2132   |\n|[resnet50d.ra2_in1k](https://huggingface.co/timm/resnet50d.ra2_in1k)|288     |81.37|95.74|25.6       |7.2  |19.7 |1910   |\n|[resnet101.a2_in1k](https://huggingface.co/timm/resnet101.a2_in1k)|224     |81.32|95.19|44.6       |7.8  |16.2 |2125   |\n|[seresnet50.ra2_in1k](https://huggingface.co/timm/seresnet50.ra2_in1k)|288     |81.3 |95.65|28.1       |6.8  |18.4 |1803   |\n|[resnext50_32x4d.a2_in1k](https://huggingface.co/timm/resnext50_32x4d.a2_in1k)|288     |81.3 |95.11|25.0       |7.0  |23.8 |1746   |\n|[seresnext50_32x4d.racm_in1k](https://huggingface.co/timm/seresnext50_32x4d.racm_in1k)|224     |81.27|95.62|27.6       |4.3  |14.4 |2591   |\n|[ecaresnet50t.a1_in1k](https://huggingface.co/timm/ecaresnet50t.a1_in1k)|224     |81.26|95.16|25.6       |4.3  |11.8 |2823   |\n|[gcresnext50ts.ch_in1k](https://huggingface.co/timm/gcresnext50ts.ch_in1k)|288     |81.23|95.54|15.7       |4.8  |19.6 |2117   |\n|[senet154.gluon_in1k](https://huggingface.co/timm/senet154.gluon_in1k)|224     |81.23|95.35|115.1      |20.8 |38.7 |545    |\n|[resnet50.a1_in1k](https://huggingface.co/timm/resnet50.a1_in1k)|288     |81.22|95.11|25.6       |6.8  |18.4 |2089   |\n|[resnet50_gn.a1h_in1k](https://huggingface.co/timm/resnet50_gn.a1h_in1k)|288     |81.22|95.63|25.6       |6.8  |18.4 |676    |\n|[resnet50d.a2_in1k](https://huggingface.co/timm/resnet50d.a2_in1k)|288     |81.18|95.09|25.6       |7.2  |19.7 |1908   |\n|[resnet50.fb_swsl_ig1b_ft_in1k](https://huggingface.co/timm/resnet50.fb_swsl_ig1b_ft_in1k)|224     |81.18|95.98|25.6       |4.1  |11.1 |3455   |\n|[resnext50_32x4d.tv2_in1k](https://huggingface.co/timm/resnext50_32x4d.tv2_in1k)|224     |81.17|95.34|25.0       |4.3  |14.4 |2933   |\n|[resnext50_32x4d.a1h_in1k](https://huggingface.co/timm/resnext50_32x4d.a1h_in1k)|224     |81.1 |95.33|25.0       |4.3  |14.4 |2934   |\n|[seresnet50.a2_in1k](https://huggingface.co/timm/seresnet50.a2_in1k)|288     |81.1 |95.23|28.1       |6.8  |18.4 |1801   |\n|[seresnet50.a1_in1k](https://huggingface.co/timm/seresnet50.a1_in1k)|288     |81.1 |95.12|28.1       |6.8  |18.4 |1799   |\n|[resnet152s.gluon_in1k](https://huggingface.co/timm/resnet152s.gluon_in1k)|224     |81.02|95.41|60.3       |12.9 |25.0 |1347   |\n|[resnet50.d_in1k](https://huggingface.co/timm/resnet50.d_in1k)|288     |80.97|95.44|25.6       |6.8  |18.4 |2085   |\n|[gcresnet50t.ra2_in1k](https://huggingface.co/timm/gcresnet50t.ra2_in1k)|256     |80.94|95.45|25.9       |5.4  |14.7 |2571   |\n|[resnext101_32x4d.fb_ssl_yfcc100m_ft_in1k](https://huggingface.co/timm/resnext101_32x4d.fb_ssl_yfcc100m_ft_in1k)|224     |80.93|95.73|44.2       |8.0  |21.2 |1814   |\n|[resnet50.c1_in1k](https://huggingface.co/timm/resnet50.c1_in1k)|288     |80.91|95.55|25.6       |6.8  |18.4 |2084   |\n|[seresnext101_32x4d.gluon_in1k](https://huggingface.co/timm/seresnext101_32x4d.gluon_in1k)|224     |80.9 |95.31|49.0       |8.0  |21.3 |1585   |\n|[seresnext101_64x4d.gluon_in1k](https://huggingface.co/timm/seresnext101_64x4d.gluon_in1k)|224     |80.9 |95.3 |88.2       |15.5 |31.2 |918    |\n|[resnet50.c2_in1k](https://huggingface.co/timm/resnet50.c2_in1k)|288     |80.86|95.52|25.6       |6.8  |18.4 |2085   |\n|[resnet50.tv2_in1k](https://huggingface.co/timm/resnet50.tv2_in1k)|224     |80.85|95.43|25.6       |4.1  |11.1 |3450   |\n|[ecaresnet50t.a2_in1k](https://huggingface.co/timm/ecaresnet50t.a2_in1k)|224     |80.84|95.02|25.6       |4.3  |11.8 |2821   |\n|[ecaresnet101d_pruned.miil_in1k](https://huggingface.co/timm/ecaresnet101d_pruned.miil_in1k)|224     |80.79|95.62|24.9       |3.5  |7.7  |2961   |\n|[seresnet33ts.ra2_in1k](https://huggingface.co/timm/seresnet33ts.ra2_in1k)|288     |80.79|95.36|19.8       |6.0  |14.8 |2506   |\n|[ecaresnet50d_pruned.miil_in1k](https://huggingface.co/timm/ecaresnet50d_pruned.miil_in1k)|288     |80.79|95.58|19.9       |4.2  |10.6 |2349   |\n|[resnet50.a2_in1k](https://huggingface.co/timm/resnet50.a2_in1k)|288     |80.78|94.99|25.6       |6.8  |18.4 |2088   |\n|[resnet50.b1k_in1k](https://huggingface.co/timm/resnet50.b1k_in1k)|288     |80.71|95.43|25.6       |6.8  |18.4 |2087   |\n|[resnext50_32x4d.ra_in1k](https://huggingface.co/timm/resnext50_32x4d.ra_in1k)|288     |80.7 |95.39|25.0       |7.0  |23.8 |1749   |\n|[resnetrs101.tf_in1k](https://huggingface.co/timm/resnetrs101.tf_in1k)|192     |80.69|95.24|63.6       |6.0  |12.7 |2270   |\n|[resnet50d.a1_in1k](https://huggingface.co/timm/resnet50d.a1_in1k)|224     |80.68|94.71|25.6       |4.4  |11.9 |3162   |\n|[eca_resnet33ts.ra2_in1k](https://huggingface.co/timm/eca_resnet33ts.ra2_in1k)|288     |80.68|95.36|19.7       |6.0  |14.8 |2637   |\n|[resnet50.a1h_in1k](https://huggingface.co/timm/resnet50.a1h_in1k)|224     |80.67|95.3 |25.6       |4.1  |11.1 |3452   |\n|[resnext50d_32x4d.bt_in1k](https://huggingface.co/timm/resnext50d_32x4d.bt_in1k)|288     |80.67|95.42|25.0       |7.4  |25.1 |1626   |\n|[resnetaa50.a1h_in1k](https://huggingface.co/timm/resnetaa50.a1h_in1k)|224     |80.63|95.21|25.6       |5.2  |11.6 |3034   |\n|[ecaresnet50d.miil_in1k](https://huggingface.co/timm/ecaresnet50d.miil_in1k)|224     |80.61|95.32|25.6       |4.4  |11.9 |2813   |\n|[resnext101_64x4d.gluon_in1k](https://huggingface.co/timm/resnext101_64x4d.gluon_in1k)|224     |80.61|94.99|83.5       |15.5 |31.2 |989    |\n|[gcresnet33ts.ra2_in1k](https://huggingface.co/timm/gcresnet33ts.ra2_in1k)|288     |80.6 |95.31|19.9       |6.0  |14.8 |2578   |\n|[gcresnext50ts.ch_in1k](https://huggingface.co/timm/gcresnext50ts.ch_in1k)|256     |80.57|95.17|15.7       |3.8  |15.5 |2710   |\n|[resnet152.a3_in1k](https://huggingface.co/timm/resnet152.a3_in1k)|224     |80.56|95.0 |60.2       |11.6 |22.6 |1483   |\n|[resnet50d.ra2_in1k](https://huggingface.co/timm/resnet50d.ra2_in1k)|224     |80.53|95.16|25.6       |4.4  |11.9 |3164   |\n|[resnext50_32x4d.a1_in1k](https://huggingface.co/timm/resnext50_32x4d.a1_in1k)|224     |80.53|94.46|25.0       |4.3  |14.4 |2930   |\n|[wide_resnet101_2.tv2_in1k](https://huggingface.co/timm/wide_resnet101_2.tv2_in1k)|176     |80.48|94.98|126.9      |14.3 |13.2 |1719   |\n|[resnet152d.gluon_in1k](https://huggingface.co/timm/resnet152d.gluon_in1k)|224     |80.47|95.2 |60.2       |11.8 |23.4 |1428   |\n|[resnet50.b2k_in1k](https://huggingface.co/timm/resnet50.b2k_in1k)|288     |80.45|95.32|25.6       |6.8  |18.4 |2086   |\n|[ecaresnetlight.miil_in1k](https://huggingface.co/timm/ecaresnetlight.miil_in1k)|224     |80.45|95.24|30.2       |4.1  |8.4  |3530   |\n|[resnext50_32x4d.a2_in1k](https://huggingface.co/timm/resnext50_32x4d.a2_in1k)|224     |80.45|94.63|25.0       |4.3  |14.4 |2936   |\n|[wide_resnet50_2.tv2_in1k](https://huggingface.co/timm/wide_resnet50_2.tv2_in1k)|176     |80.43|95.09|68.9       |7.3  |9.0  |3015   |\n|[resnet101d.gluon_in1k](https://huggingface.co/timm/resnet101d.gluon_in1k)|224     |80.42|95.01|44.6       |8.1  |17.0 |2007   |\n|[resnet50.a1_in1k](https://huggingface.co/timm/resnet50.a1_in1k)|224     |80.38|94.6 |25.6       |4.1  |11.1 |3461   |\n|[seresnet33ts.ra2_in1k](https://huggingface.co/timm/seresnet33ts.ra2_in1k)|256     |80.36|95.1 |19.8       |4.8  |11.7 |3267   |\n|[resnext101_32x4d.gluon_in1k](https://huggingface.co/timm/resnext101_32x4d.gluon_in1k)|224     |80.34|94.93|44.2       |8.0  |21.2 |1814   |\n|[resnext50_32x4d.fb_ssl_yfcc100m_ft_in1k](https://huggingface.co/timm/resnext50_32x4d.fb_ssl_yfcc100m_ft_in1k)|224     |80.32|95.4 |25.0       |4.3  |14.4 |2941   |\n|[resnet101s.gluon_in1k](https://huggingface.co/timm/resnet101s.gluon_in1k)|224     |80.28|95.16|44.7       |9.2  |18.6 |1851   |\n|[seresnet50.ra2_in1k](https://huggingface.co/timm/seresnet50.ra2_in1k)|224     |80.26|95.08|28.1       |4.1  |11.1 |2972   |\n|[resnetblur50.bt_in1k](https://huggingface.co/timm/resnetblur50.bt_in1k)|288     |80.24|95.24|25.6       |8.5  |19.9 |1523   |\n|[resnet50d.a2_in1k](https://huggingface.co/timm/resnet50d.a2_in1k)|224     |80.22|94.63|25.6       |4.4  |11.9 |3162   |\n|[resnet152.tv2_in1k](https://huggingface.co/timm/resnet152.tv2_in1k)|176     |80.2 |94.64|60.2       |7.2  |14.0 |2346   |\n|[seresnet50.a2_in1k](https://huggingface.co/timm/seresnet50.a2_in1k)|224     |80.08|94.74|28.1       |4.1  |11.1 |2969   |\n|[eca_resnet33ts.ra2_in1k](https://huggingface.co/timm/eca_resnet33ts.ra2_in1k)|256     |80.08|94.97|19.7       |4.8  |11.7 |3284   |\n|[gcresnet33ts.ra2_in1k](https://huggingface.co/timm/gcresnet33ts.ra2_in1k)|256     |80.06|94.99|19.9       |4.8  |11.7 |3216   |\n|[resnet50_gn.a1h_in1k](https://huggingface.co/timm/resnet50_gn.a1h_in1k)|224     |80.06|94.95|25.6       |4.1  |11.1 |1109   |\n|[seresnet50.a1_in1k](https://huggingface.co/timm/seresnet50.a1_in1k)|224     |80.02|94.71|28.1       |4.1  |11.1 |2962   |\n|[resnet50.ram_in1k](https://huggingface.co/timm/resnet50.ram_in1k)|288     |79.97|95.05|25.6       |6.8  |18.4 |2086   |\n|[resnet152c.gluon_in1k](https://huggingface.co/timm/resnet152c.gluon_in1k)|224     |79.92|94.84|60.2       |11.8 |23.4 |1455   |\n|[seresnext50_32x4d.gluon_in1k](https://huggingface.co/timm/seresnext50_32x4d.gluon_in1k)|224     |79.91|94.82|27.6       |4.3  |14.4 |2591   |\n|[resnet50.d_in1k](https://huggingface.co/timm/resnet50.d_in1k)|224     |79.91|94.67|25.6       |4.1  |11.1 |3456   |\n|[resnet101.tv2_in1k](https://huggingface.co/timm/resnet101.tv2_in1k)|176     |79.9 |94.6 |44.6       |4.9  |10.1 |3341   |\n|[resnetrs50.tf_in1k](https://huggingface.co/timm/resnetrs50.tf_in1k)|224     |79.89|94.97|35.7       |4.5  |12.1 |2774   |\n|[resnet50.c2_in1k](https://huggingface.co/timm/resnet50.c2_in1k)|224     |79.88|94.87|25.6       |4.1  |11.1 |3455   |\n|[ecaresnet26t.ra2_in1k](https://huggingface.co/timm/ecaresnet26t.ra2_in1k)|320     |79.86|95.07|16.0       |5.2  |16.4 |2168   |\n|[resnet50.a2_in1k](https://huggingface.co/timm/resnet50.a2_in1k)|224     |79.85|94.56|25.6       |4.1  |11.1 |3460   |\n|[resnet50.ra_in1k](https://huggingface.co/timm/resnet50.ra_in1k)|288     |79.83|94.97|25.6       |6.8  |18.4 |2087   |\n|[resnet101.a3_in1k](https://huggingface.co/timm/resnet101.a3_in1k)|224     |79.82|94.62|44.6       |7.8  |16.2 |2114   |\n|[resnext50_32x4d.ra_in1k](https://huggingface.co/timm/resnext50_32x4d.ra_in1k)|224     |79.76|94.6 |25.0       |4.3  |14.4 |2943   |\n|[resnet50.c1_in1k](https://huggingface.co/timm/resnet50.c1_in1k)|224     |79.74|94.95|25.6       |4.1  |11.1 |3455   |\n|[ecaresnet50d_pruned.miil_in1k](https://huggingface.co/timm/ecaresnet50d_pruned.miil_in1k)|224     |79.74|94.87|19.9       |2.5  |6.4  |3929   |\n|[resnet33ts.ra2_in1k](https://huggingface.co/timm/resnet33ts.ra2_in1k)|288     |79.71|94.83|19.7       |6.0  |14.8 |2710   |\n|[resnet152.gluon_in1k](https://huggingface.co/timm/resnet152.gluon_in1k)|224     |79.68|94.74|60.2       |11.6 |22.6 |1486   |\n|[resnext50d_32x4d.bt_in1k](https://huggingface.co/timm/resnext50d_32x4d.bt_in1k)|224     |79.67|94.87|25.0       |4.5  |15.2 |2729   |\n|[resnet50.bt_in1k](https://huggingface.co/timm/resnet50.bt_in1k)|288     |79.63|94.91|25.6       |6.8  |18.4 |2086   |\n|[ecaresnet50t.a3_in1k](https://huggingface.co/timm/ecaresnet50t.a3_in1k)|224     |79.56|94.72|25.6       |4.3  |11.8 |2805   |\n|[resnet101c.gluon_in1k](https://huggingface.co/timm/resnet101c.gluon_in1k)|224     |79.53|94.58|44.6       |8.1  |17.0 |2062   |\n|[resnet50.b1k_in1k](https://huggingface.co/timm/resnet50.b1k_in1k)|224     |79.52|94.61|25.6       |4.1  |11.1 |3459   |\n|[resnet50.tv2_in1k](https://huggingface.co/timm/resnet50.tv2_in1k)|176     |79.42|94.64|25.6       |2.6  |6.9  |5397   |\n|[resnet32ts.ra2_in1k](https://huggingface.co/timm/resnet32ts.ra2_in1k)|288     |79.4 |94.66|18.0       |5.9  |14.6 |2752   |\n|[resnet50.b2k_in1k](https://huggingface.co/timm/resnet50.b2k_in1k)|224     |79.38|94.57|25.6       |4.1  |11.1 |3459   |\n|[resnext50_32x4d.tv2_in1k](https://huggingface.co/timm/resnext50_32x4d.tv2_in1k)|176     |79.37|94.3 |25.0       |2.7  |9.0  |4577   |\n|[resnext50_32x4d.gluon_in1k](https://huggingface.co/timm/resnext50_32x4d.gluon_in1k)|224     |79.36|94.43|25.0       |4.3  |14.4 |2942   |\n|[resnext101_32x8d.tv_in1k](https://huggingface.co/timm/resnext101_32x8d.tv_in1k)|224     |79.31|94.52|88.8       |16.5 |31.2 |1100   |\n|[resnet101.gluon_in1k](https://huggingface.co/timm/resnet101.gluon_in1k)|224     |79.31|94.53|44.6       |7.8  |16.2 |2125   |\n|[resnetblur50.bt_in1k](https://huggingface.co/timm/resnetblur50.bt_in1k)|224     |79.31|94.63|25.6       |5.2  |12.0 |2524   |\n|[resnet50.a1h_in1k](https://huggingface.co/timm/resnet50.a1h_in1k)|176     |79.27|94.49|25.6       |2.6  |6.9  |5404   |\n|[resnext50_32x4d.a3_in1k](https://huggingface.co/timm/resnext50_32x4d.a3_in1k)|224     |79.25|94.31|25.0       |4.3  |14.4 |2931   |\n|[resnet50.fb_ssl_yfcc100m_ft_in1k](https://huggingface.co/timm/resnet50.fb_ssl_yfcc100m_ft_in1k)|224     |79.22|94.84|25.6       |4.1  |11.1 |3451   |\n|[resnet33ts.ra2_in1k](https://huggingface.co/timm/resnet33ts.ra2_in1k)|256     |79.21|94.56|19.7       |4.8  |11.7 |3392   |\n|[resnet50d.gluon_in1k](https://huggingface.co/timm/resnet50d.gluon_in1k)|224     |79.07|94.48|25.6       |4.4  |11.9 |3162   |\n|[resnet50.ram_in1k](https://huggingface.co/timm/resnet50.ram_in1k)|224     |79.03|94.38|25.6       |4.1  |11.1 |3453   |\n|[resnet50.am_in1k](https://huggingface.co/timm/resnet50.am_in1k)|224     |79.01|94.39|25.6       |4.1  |11.1 |3461   |\n|[resnet32ts.ra2_in1k](https://huggingface.co/timm/resnet32ts.ra2_in1k)|256     |79.01|94.37|18.0       |4.6  |11.6 |3440   |\n|[ecaresnet26t.ra2_in1k](https://huggingface.co/timm/ecaresnet26t.ra2_in1k)|256     |78.9 |94.54|16.0       |3.4  |10.5 |3421   |\n|[resnet152.a3_in1k](https://huggingface.co/timm/resnet152.a3_in1k)|160     |78.89|94.11|60.2       |5.9  |11.5 |2745   |\n|[wide_resnet101_2.tv_in1k](https://huggingface.co/timm/wide_resnet101_2.tv_in1k)|224     |78.84|94.28|126.9      |22.8 |21.2 |1079   |\n|[seresnext26d_32x4d.bt_in1k](https://huggingface.co/timm/seresnext26d_32x4d.bt_in1k)|288     |78.83|94.24|16.8       |4.5  |16.8 |2251   |\n|[resnet50.ra_in1k](https://huggingface.co/timm/resnet50.ra_in1k)|224     |78.81|94.32|25.6       |4.1  |11.1 |3454   |\n|[seresnext26t_32x4d.bt_in1k](https://huggingface.co/timm/seresnext26t_32x4d.bt_in1k)|288     |78.74|94.33|16.8       |4.5  |16.7 |2264   |\n|[resnet50s.gluon_in1k](https://huggingface.co/timm/resnet50s.gluon_in1k)|224     |78.72|94.23|25.7       |5.5  |13.5 |2796   |\n|[resnet50d.a3_in1k](https://huggingface.co/timm/resnet50d.a3_in1k)|224     |78.71|94.24|25.6       |4.4  |11.9 |3154   |\n|[wide_resnet50_2.tv_in1k](https://huggingface.co/timm/wide_resnet50_2.tv_in1k)|224     |78.47|94.09|68.9       |11.4 |14.4 |1934   |\n|[resnet50.bt_in1k](https://huggingface.co/timm/resnet50.bt_in1k)|224     |78.46|94.27|25.6       |4.1  |11.1 |3454   |\n|[resnet34d.ra2_in1k](https://huggingface.co/timm/resnet34d.ra2_in1k)|288     |78.43|94.35|21.8       |6.5  |7.5  |3291   |\n|[gcresnext26ts.ch_in1k](https://huggingface.co/timm/gcresnext26ts.ch_in1k)|288     |78.42|94.04|10.5       |3.1  |13.3 |3226   |\n|[resnet26t.ra2_in1k](https://huggingface.co/timm/resnet26t.ra2_in1k)|320     |78.33|94.13|16.0       |5.2  |16.4 |2391   |\n|[resnet152.tv_in1k](https://huggingface.co/timm/resnet152.tv_in1k)|224     |78.32|94.04|60.2       |11.6 |22.6 |1487   |\n|[seresnext26ts.ch_in1k](https://huggingface.co/timm/seresnext26ts.ch_in1k)|288     |78.28|94.1 |10.4       |3.1  |13.3 |3062   |\n|[bat_resnext26ts.ch_in1k](https://huggingface.co/timm/bat_resnext26ts.ch_in1k)|256     |78.25|94.1 |10.7       |2.5  |12.5 |3393   |\n|[resnet50.a3_in1k](https://huggingface.co/timm/resnet50.a3_in1k)|224     |78.06|93.78|25.6       |4.1  |11.1 |3450   |\n|[resnet50c.gluon_in1k](https://huggingface.co/timm/resnet50c.gluon_in1k)|224     |78.0 |93.99|25.6       |4.4  |11.9 |3286   |\n|[eca_resnext26ts.ch_in1k](https://huggingface.co/timm/eca_resnext26ts.ch_in1k)|288     |78.0 |93.91|10.3       |3.1  |13.3 |3297   |\n|[seresnext26t_32x4d.bt_in1k](https://huggingface.co/timm/seresnext26t_32x4d.bt_in1k)|224     |77.98|93.75|16.8       |2.7  |10.1 |3841   |\n|[resnet34.a1_in1k](https://huggingface.co/timm/resnet34.a1_in1k)|288     |77.92|93.77|21.8       |6.1  |6.2  |3609   |\n|[resnet101.a3_in1k](https://huggingface.co/timm/resnet101.a3_in1k)|160     |77.88|93.71|44.6       |4.0  |8.3  |3926   |\n|[resnet26t.ra2_in1k](https://huggingface.co/timm/resnet26t.ra2_in1k)|256     |77.87|93.84|16.0       |3.4  |10.5 |3772   |\n|[seresnext26ts.ch_in1k](https://huggingface.co/timm/seresnext26ts.ch_in1k)|256     |77.86|93.79|10.4       |2.4  |10.5 |4263   |\n|[resnetrs50.tf_in1k](https://huggingface.co/timm/resnetrs50.tf_in1k)|160     |77.82|93.81|35.7       |2.3  |6.2  |5238   |\n|[gcresnext26ts.ch_in1k](https://huggingface.co/timm/gcresnext26ts.ch_in1k)|256     |77.81|93.82|10.5       |2.4  |10.5 |4183   |\n|[ecaresnet50t.a3_in1k](https://huggingface.co/timm/ecaresnet50t.a3_in1k)|160     |77.79|93.6 |25.6       |2.2  |6.0  |5329   |\n|[resnext50_32x4d.a3_in1k](https://huggingface.co/timm/resnext50_32x4d.a3_in1k)|160     |77.73|93.32|25.0       |2.2  |7.4  |5576   |\n|[resnext50_32x4d.tv_in1k](https://huggingface.co/timm/resnext50_32x4d.tv_in1k)|224     |77.61|93.7 |25.0       |4.3  |14.4 |2944   |\n|[seresnext26d_32x4d.bt_in1k](https://huggingface.co/timm/seresnext26d_32x4d.bt_in1k)|224     |77.59|93.61|16.8       |2.7  |10.2 |3807   |\n|[resnet50.gluon_in1k](https://huggingface.co/timm/resnet50.gluon_in1k)|224     |77.58|93.72|25.6       |4.1  |11.1 |3455   |\n|[eca_resnext26ts.ch_in1k](https://huggingface.co/timm/eca_resnext26ts.ch_in1k)|256     |77.44|93.56|10.3       |2.4  |10.5 |4284   |\n|[resnet26d.bt_in1k](https://huggingface.co/timm/resnet26d.bt_in1k)|288     |77.41|93.63|16.0       |4.3  |13.5 |2907   |\n|[resnet101.tv_in1k](https://huggingface.co/timm/resnet101.tv_in1k)|224     |77.38|93.54|44.6       |7.8  |16.2 |2125   |\n|[resnet50d.a3_in1k](https://huggingface.co/timm/resnet50d.a3_in1k)|160     |77.22|93.27|25.6       |2.2  |6.1  |5982   |\n|[resnext26ts.ra2_in1k](https://huggingface.co/timm/resnext26ts.ra2_in1k)|288     |77.17|93.47|10.3       |3.1  |13.3 |3392   |\n|[resnet34.a2_in1k](https://huggingface.co/timm/resnet34.a2_in1k)|288     |77.15|93.27|21.8       |6.1  |6.2  |3615   |\n|[resnet34d.ra2_in1k](https://huggingface.co/timm/resnet34d.ra2_in1k)|224     |77.1 |93.37|21.8       |3.9  |4.5  |5436   |\n|[seresnet50.a3_in1k](https://huggingface.co/timm/seresnet50.a3_in1k)|224     |77.02|93.07|28.1       |4.1  |11.1 |2952   |\n|[resnext26ts.ra2_in1k](https://huggingface.co/timm/resnext26ts.ra2_in1k)|256     |76.78|93.13|10.3       |2.4  |10.5 |4410   |\n|[resnet26d.bt_in1k](https://huggingface.co/timm/resnet26d.bt_in1k)|224     |76.7 |93.17|16.0       |2.6  |8.2  |4859   |\n|[resnet34.bt_in1k](https://huggingface.co/timm/resnet34.bt_in1k)|288     |76.5 |93.35|21.8       |6.1  |6.2  |3617   |\n|[resnet34.a1_in1k](https://huggingface.co/timm/resnet34.a1_in1k)|224     |76.42|92.87|21.8       |3.7  |3.7  |5984   |\n|[resnet26.bt_in1k](https://huggingface.co/timm/resnet26.bt_in1k)|288     |76.35|93.18|16.0       |3.9  |12.2 |3331   |\n|[resnet50.tv_in1k](https://huggingface.co/timm/resnet50.tv_in1k)|224     |76.13|92.86|25.6       |4.1  |11.1 |3457   |\n|[resnet50.a3_in1k](https://huggingface.co/timm/resnet50.a3_in1k)|160     |75.96|92.5 |25.6       |2.1  |5.7  |6490   |\n|[resnet34.a2_in1k](https://huggingface.co/timm/resnet34.a2_in1k)|224     |75.52|92.44|21.8       |3.7  |3.7  |5991   |\n|[resnet26.bt_in1k](https://huggingface.co/timm/resnet26.bt_in1k)|224     |75.3 |92.58|16.0       |2.4  |7.4  |5583   |\n|[resnet34.bt_in1k](https://huggingface.co/timm/resnet34.bt_in1k)|224     |75.16|92.18|21.8       |3.7  |3.7  |5994   |\n|[seresnet50.a3_in1k](https://huggingface.co/timm/seresnet50.a3_in1k)|160     |75.1 |92.08|28.1       |2.1  |5.7  |5513   |\n|[resnet34.gluon_in1k](https://huggingface.co/timm/resnet34.gluon_in1k)|224     |74.57|91.98|21.8       |3.7  |3.7  |5984   |\n|[resnet18d.ra2_in1k](https://huggingface.co/timm/resnet18d.ra2_in1k)|288     |73.81|91.83|11.7       |3.4  |5.4  |5196   |\n|[resnet34.tv_in1k](https://huggingface.co/timm/resnet34.tv_in1k)|224     |73.32|91.42|21.8       |3.7  |3.7  |5979   |\n|[resnet18.fb_swsl_ig1b_ft_in1k](https://huggingface.co/timm/resnet18.fb_swsl_ig1b_ft_in1k)|224     |73.28|91.73|11.7       |1.8  |2.5  |10213  |\n|[resnet18.a1_in1k](https://huggingface.co/timm/resnet18.a1_in1k)|288     |73.16|91.03|11.7       |3.0  |4.1  |6050   |\n|[resnet34.a3_in1k](https://huggingface.co/timm/resnet34.a3_in1k)|224     |72.98|91.11|21.8       |3.7  |3.7  |5967   |\n|[resnet18.fb_ssl_yfcc100m_ft_in1k](https://huggingface.co/timm/resnet18.fb_ssl_yfcc100m_ft_in1k)|224     |72.6 |91.42|11.7       |1.8  |2.5  |10213  |\n|[resnet18.a2_in1k](https://huggingface.co/timm/resnet18.a2_in1k)|288     |72.37|90.59|11.7       |3.0  |4.1  |6051   |\n|[resnet14t.c3_in1k](https://huggingface.co/timm/resnet14t.c3_in1k)|224     |72.26|90.31|10.1       |1.7  |5.8  |7026   |\n|[resnet18d.ra2_in1k](https://huggingface.co/timm/resnet18d.ra2_in1k)|224     |72.26|90.68|11.7       |2.1  |3.3  |8707   |\n|[resnet18.a1_in1k](https://huggingface.co/timm/resnet18.a1_in1k)|224     |71.49|90.07|11.7       |1.8  |2.5  |10187  |\n|[resnet14t.c3_in1k](https://huggingface.co/timm/resnet14t.c3_in1k)|176     |71.31|89.69|10.1       |1.1  |3.6  |10970  |\n|[resnet18.gluon_in1k](https://huggingface.co/timm/resnet18.gluon_in1k)|224     |70.84|89.76|11.7       |1.8  |2.5  |10210  |\n|[resnet18.a2_in1k](https://huggingface.co/timm/resnet18.a2_in1k)|224     |70.64|89.47|11.7       |1.8  |2.5  |10194  |\n|[resnet34.a3_in1k](https://huggingface.co/timm/resnet34.a3_in1k)|160     |70.56|89.52|21.8       |1.9  |1.9  |10737  |\n|[resnet18.tv_in1k](https://huggingface.co/timm/resnet18.tv_in1k)|224     |69.76|89.07|11.7       |1.8  |2.5  |10205  |\n|[resnet10t.c3_in1k](https://huggingface.co/timm/resnet10t.c3_in1k)|224     |68.34|88.03|5.4        |1.1  |2.4  |13079  |\n|[resnet18.a3_in1k](https://huggingface.co/timm/resnet18.a3_in1k)|224     |68.25|88.17|11.7       |1.8  |2.5  |10167  |\n|[resnet10t.c3_in1k](https://huggingface.co/timm/resnet10t.c3_in1k)|176     |66.71|86.96|5.4        |0.7  |1.5  |20327  |\n|[resnet18.a3_in1k](https://huggingface.co/timm/resnet18.a3_in1k)|160     |65.66|86.26|11.7       |0.9  |1.3  |18229  |\n\n## Citation\n```bibtex\n@inproceedings{wightman2021resnet,\n  title={ResNet strikes back: An improved training procedure in timm},\n  author={Wightman, Ross and Touvron, Hugo and Jegou, Herve},\n  booktitle={NeurIPS 2021 Workshop on ImageNet: Past, Present, and Future}\n}\n```\n```bibtex\n@misc{rw2019timm,\n  author = {Ross Wightman},\n  title = {PyTorch Image Models},\n  year = {2019},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  doi = {10.5281/zenodo.4414861},\n  howpublished = {\\url{https://github.com/huggingface/pytorch-image-models}}\n}\n```\n```bibtex\n@article{He2015,\n  author = {Kaiming He and Xiangyu Zhang and Shaoqing Ren and Jian Sun},\n  title = {Deep Residual Learning for Image Recognition},\n  journal = {arXiv preprint arXiv:1512.03385},\n  year = {2015}\n}\n```",
              "extracted_code": "from urllib.request import urlopen\nfrom PIL import Image\nimport timm\n\nimg = Image.open(urlopen(\n    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'\n))\n\nmodel = timm.create_model('resnet18.a1_in1k', pretrained=True)\nmodel = model.eval()\n\n# get model specific transforms (normalization, resize)\ndata_config = timm.data.resolve_model_data_config(model)\ntransforms = timm.data.create_transform(**data_config, is_training=False)\n\noutput = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1\n\ntop5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)\n\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\n\nimg = Image.open(urlopen(\n    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'\n))\n\nmodel = timm.create_model(\n    'resnet18.a1_in1k',\n    pretrained=True,\n    features_only=True,\n)\nmodel = model.eval()\n\n# get model specific transforms (normalization, resize)\ndata_config = timm.data.resolve_model_data_config(model)\ntransforms = timm.data.create_transform(**data_config, is_training=False)\n\noutput = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1\n\nfor o in output:\n    # print shape of each feature map in output\n    # e.g.:\n    #  torch.Size([1, 64, 112, 112])\n    #  torch.Size([1, 64, 56, 56])\n    #  torch.Size([1, 128, 28, 28])\n    #  torch.Size([1, 256, 14, 14])\n    #  torch.Size([1, 512, 7, 7])\n\n    print(o.shape)\n\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\n\nimg = Image.open(urlopen(\n    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'\n))\n\nmodel = timm.create_model(\n    'resnet18.a1_in1k',\n    pretrained=True,\n    num_classes=0,  # remove classifier nn.Linear\n)\nmodel = model.eval()\n\n# get model specific transforms (normalization, resize)\ndata_config = timm.data.resolve_model_data_config(model)\ntransforms = timm.data.create_transform(**data_config, is_training=False)\n\noutput = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor\n\n# or equivalently (without needing to set num_classes=0)\n\noutput = model.forward_features(transforms(img).unsqueeze(0))\n# output is unpooled, a (1, 512, 7, 7) shaped tensor\n\noutput = model.forward_head(output, pre_logits=True)\n# output is a (1, num_features) shaped tensor"
            }
          ],
          "datasets": []
        }
      },
      "experiment_code": {
        "train_py": "\"\"\"src/train.py – executes a single experiment run (training / adaptation)\n--------------------------------------------------------------------------\nFULLY IMPLEMENTED.  Logs *all* required information to WandB, including\n`y_true`/`y_pred` so that evaluation can always build confusion matrices.\n\"\"\"\nfrom __future__ import annotations\n\nimport os\nimport random\nimport re\nfrom pathlib import Path\nfrom typing import Dict\n\nimport hydra\nimport numpy as np\nimport optuna\nimport torch\nimport wandb\nimport yaml\nfrom omegaconf import DictConfig, OmegaConf\n\nfrom .model import CWTentAdapter, TentAdapter, create_backbone\nfrom .preprocess import build_dataloader\n\n# ---------------------------------------------------------------------------\n#                         Re-usable helper utilities\n# ---------------------------------------------------------------------------\n\ndef seed_everything(seed: int = 42) -> None:\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.backends.cudnn.deterministic = True  # type: ignore[attr-defined]\n    torch.backends.cudnn.benchmark = False     # type: ignore[attr-defined]\n\n\ndef slugify(value: str) -> str:\n    value = value.strip().replace(\" \", \"_\")\n    return re.sub(r\"[^A-Za-z0-9_.-]\", \"_\", value)\n\n\ndef accuracy(pred: torch.Tensor, tgt: torch.Tensor) -> float:\n    return (pred.argmax(1) == tgt).float().mean().item()\n\n# ---------------------------------------------------------------------------\n#                           Core adaptation routine\n# ---------------------------------------------------------------------------\n\ndef run_adaptation(cfg: DictConfig) -> Dict[str, float]:\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    dataloader = build_dataloader(cfg, device)\n\n    backbone = create_backbone(cfg).to(device)\n    method_key = str(cfg.method.name).lower()\n    if method_key == \"tent\":\n        AdapterCls = TentAdapter\n    elif method_key in {\"cw-tent\", \"cwtent\"}:\n        AdapterCls = CWTentAdapter\n    else:\n        raise ValueError(f\"Unsupported method: {cfg.method.name}\")\n\n    adapter = AdapterCls(\n        backbone,\n        lr=cfg.training.learning_rate,\n        momentum=cfg.training.momentum,\n        inner_steps=cfg.method.inner_steps,\n        weight_decay=cfg.training.weight_decay,\n    )\n\n    total_correct, total_seen = 0, 0\n\n    for step, (imgs, lbls) in enumerate(dataloader, 1):\n        # prediction BEFORE adaptation (analysis only)\n        pred_before = adapter.predict(imgs)\n        acc_before = accuracy(pred_before, lbls)\n\n        # ----- adaptation (one or many optimisation steps)\n        loss_val = adapter.adapt(imgs)\n\n        # prediction AFTER adaptation\n        pred_after = adapter.predict(imgs)\n        acc_after = accuracy(pred_after, lbls)\n\n        total_correct += (pred_after.argmax(1) == lbls).sum().item()\n        total_seen += lbls.size(0)\n\n        log_payload = {\n            \"train_loss\": loss_val,\n            \"acc_before\": acc_before,\n            \"acc_after\": acc_after,\n            \"y_true\": lbls.cpu().tolist(),\n            \"y_pred\": pred_after.argmax(1).cpu().tolist(),\n            \"global_step\": step,\n            \"epoch\": 1,\n        }\n        if cfg.wandb.mode != \"disabled\":\n            wandb.log(log_payload)\n        print(\n            f\"[step {step:04d}] loss={loss_val:.4f} acc_b={acc_before:.4f} \"\n            f\"acc_a={acc_after:.4f}\"\n        )\n\n        if cfg.get(\"trial_mode\", False) and step >= cfg.trial_limit_batches:\n            break\n\n    final_acc = total_correct / max(1, total_seen)\n    if cfg.wandb.mode != \"disabled\":\n        wandb.log({\"final_top1_accuracy\": final_acc})\n        wandb.run.summary[\"final_top1_accuracy\"] = final_acc\n    return {\"top1_accuracy\": final_acc, \"processed_batches\": step}\n\n# ---------------------------------------------------------------------------\n#                  Optuna hyper-parameter optimisation helper\n# ---------------------------------------------------------------------------\n\ndef build_objective(cfg_template: DictConfig):\n    name2path = {\n        \"learning_rate\": \"training.learning_rate\",\n        \"momentum\": \"training.momentum\",\n        \"weight_decay\": \"training.weight_decay\",\n        \"batch_size\": \"dataset.batch_size\",\n        \"inner_steps\": \"method.inner_steps\",\n    }\n\n    def objective(trial: optuna.Trial):\n        cfg = OmegaConf.create(OmegaConf.to_container(cfg_template, resolve=True))\n        for pname, spec in cfg_template.optuna.search_space.items():\n            t = str(spec.type)\n            if t == \"loguniform\":\n                val = trial.suggest_float(pname, spec.low, spec.high, log=True)\n            elif t == \"uniform\":\n                val = trial.suggest_float(pname, spec.low, spec.high)\n            elif t == \"int\":\n                val = trial.suggest_int(pname, spec.low, spec.high)\n            elif t == \"categorical\":\n                val = trial.suggest_categorical(pname, spec.choices)\n            else:\n                raise ValueError(f\"Unknown search-space type: {t}\")\n            OmegaConf.update(cfg, name2path.get(pname, pname), val, merge=False)\n        metric_val = run_adaptation(cfg)[cfg.optuna.metric]\n        return metric_val\n\n    return objective\n\n# ---------------------------------------------------------------------------\n#                               Hydra entry-point\n# ---------------------------------------------------------------------------\n@hydra.main(config_path=\"../config\", config_name=\"config\")\ndef main(cfg_cli: DictConfig) -> None:\n    run_name = str(cfg_cli.run)\n    run_cfg_file = Path(__file__).resolve().parents[1] / \"config\" / \"run\" / f\"{run_name}.yaml\"\n    if not run_cfg_file.exists():\n        raise FileNotFoundError(run_cfg_file)\n    cfg_run = OmegaConf.load(run_cfg_file)\n    cfg: DictConfig = OmegaConf.merge(cfg_cli, cfg_run)\n\n    # ----------------------------- trial-mode tweaks ----------------------\n    if cfg.get(\"trial_mode\", False):\n        cfg.wandb.mode = \"disabled\"\n        cfg.optuna.n_trials = 0\n        cfg.trial_limit_batches = 2\n    else:\n        cfg.trial_limit_batches = int(1e12)\n\n    # ----------------------------- directories ---------------------------\n    results_root = Path(cfg.results_dir).expanduser().resolve()\n    results_root.mkdir(parents=True, exist_ok=True)\n    run_dir = results_root / slugify(cfg_run.run_id)\n    run_dir.mkdir(exist_ok=True, parents=True)\n\n    with open(run_dir / \"config.yaml\", \"w\") as fh:\n        yaml.safe_dump(OmegaConf.to_container(cfg, resolve=True), fh)\n\n    wandb_cfg_file = results_root / \"wandb_config.yaml\"\n    if not wandb_cfg_file.exists():\n        with open(wandb_cfg_file, \"w\") as fh:\n            yaml.safe_dump({\"wandb\": OmegaConf.to_container(cfg.wandb, resolve=True)}, fh)\n\n    # ----------------------------- WandB ---------------------------------\n    if cfg.wandb.mode != \"disabled\":\n        wandb.init(\n            entity=cfg.wandb.entity,\n            project=cfg.wandb.project,\n            id=str(cfg_run.run_id),\n            resume=\"allow\",\n            mode=cfg.wandb.mode,\n            config=OmegaConf.to_container(cfg, resolve=True),\n        )\n        print(\"WandB URL:\", wandb.run.get_url())\n    else:\n        os.environ[\"WANDB_MODE\"] = \"disabled\"\n\n    seed_everything(42)\n\n    # ----------------------------- Optuna --------------------------------\n    if int(cfg.optuna.n_trials) > 0:\n        objective = build_objective(cfg)\n        study = optuna.create_study(direction=cfg.optuna.direction)\n        study.optimize(objective, n_trials=int(cfg.optuna.n_trials))\n        for k, v in study.best_params.items():\n            path_map = {\n                \"learning_rate\": \"training.learning_rate\",\n                \"momentum\": \"training.momentum\",\n                \"weight_decay\": \"training.weight_decay\",\n                \"batch_size\": \"dataset.batch_size\",\n                \"inner_steps\": \"method.inner_steps\",\n            }\n            OmegaConf.update(cfg, path_map.get(k, k), v, merge=False)\n        if cfg.wandb.mode != \"disabled\":\n            wandb.log({\"optuna_best_value\": study.best_value})\n            wandb.run.summary[\"optuna_best_params\"] = study.best_params\n\n    # ----------------------------- final run -----------------------------\n    stats = run_adaptation(cfg)\n    print(f\"FINAL top-1 accuracy: {stats['top1_accuracy']:.4f}\")\n\n    if cfg.wandb.mode != \"disabled\":\n        wandb.finish()\n\nif __name__ == \"__main__\":\n    main()\n",
        "evaluate_py": "\"\"\"src/evaluate.py – post-hoc evaluation & visualisation\nFully satisfies requirement #8: generates per-run confusion matrices\n(always present thanks to y_true / y_pred logging), derives improvement\nrates, performs statistical significance tests, and produces performance\nmetric tables alongside figures.\n\"\"\"\nfrom __future__ import annotations\n\nimport json\nimport sys\nfrom pathlib import Path\nfrom typing import Any, Dict, List\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport wandb\nimport yaml\nfrom scipy import stats\nfrom sklearn.metrics import confusion_matrix\n\nsns.set_style(\"whitegrid\")\nplt.rcParams.update({\"figure.dpi\": 160})\n\n# ---------------------------------------------------------------------------\n#                              utilities\n# ---------------------------------------------------------------------------\n\ndef _save_json(obj: Any, path: Path) -> None:\n    path.parent.mkdir(parents=True, exist_ok=True)\n    with open(path, \"w\") as fh:\n        json.dump(obj, fh, indent=2)\n\n\ndef _save_csv(df: pd.DataFrame, path: Path) -> None:\n    path.parent.mkdir(parents=True, exist_ok=True)\n    df.to_csv(path, index=False)\n\n\ndef _save_fig(fig, path: Path) -> None:  # noqa: ANN001 – matplotlib Figure\n    path.parent.mkdir(parents=True, exist_ok=True)\n    fig.tight_layout()\n    fig.savefig(path, format=\"pdf\")\n    plt.close(fig)\n\n\ndef _flatten(series: pd.Series) -> List[int]:\n    flat: List[int] = []\n    for item in series.dropna():\n        if isinstance(item, list):\n            flat.extend(item)\n        else:\n            flat.append(int(item))\n    return flat\n\n# ---------------------------------------------------------------------------\n#                           CLI parsing\n# ---------------------------------------------------------------------------\n\ndef _parse_cli(argv: List[str]) -> Dict[str, str]:\n    out: Dict[str, str] = {}\n    for tok in argv[1:]:  # skip prog name\n        if \"=\" not in tok:\n            raise RuntimeError(f\"Unexpected token '{tok}'. Expected key=value.\")\n        k, v = tok.split(\"=\", 1)\n        out[k] = v\n    missing = {\"results_dir\", \"run_ids\"} - out.keys()\n    if missing:\n        raise RuntimeError(f\"Missing CLI argument(s): {missing}\")\n    return out\n\n# ---------------------------------------------------------------------------\n#                       Per-run processing\n# ---------------------------------------------------------------------------\n\ndef process_single_run(run: wandb.apis.public.Run, out_dir: Path) -> Dict[str, Any]:\n    out_dir.mkdir(parents=True, exist_ok=True)\n\n    history = run.history(keys=None, pandas=True)\n    history.to_json(out_dir / \"metrics.json\", orient=\"records\")\n\n    # learning curve ------------------------------------------------------\n    if {\"global_step\", \"acc_after\"}.issubset(history.columns):\n        fig, ax = plt.subplots(figsize=(6, 4))\n        ax.plot(history[\"global_step\"], history[\"acc_after\"], label=\"Acc after\", lw=2)\n        if \"acc_before\" in history.columns:\n            ax.plot(\n                history[\"global_step\"], history[\"acc_before\"], label=\"Acc before\", lw=1.5, ls=\"--\"\n            )\n        ax.set_xlabel(\"Batch #\")\n        ax.set_ylabel(\"Accuracy\")\n        ax.set_title(f\"Learning Curve – {run.id}\")\n        ax.legend()\n        _save_fig(fig, out_dir / \"learning_curve.pdf\")\n        print(out_dir / \"learning_curve.pdf\")\n\n    # confusion matrix ----------------------------------------------------\n    y_true = _flatten(history.get(\"y_true\", pd.Series(dtype=object)))\n    y_pred = _flatten(history.get(\"y_pred\", pd.Series(dtype=object)))\n    if y_true and y_pred:\n        cm = confusion_matrix(y_true, y_pred)\n        fig, ax = plt.subplots(figsize=(5, 4))\n        sns.heatmap(cm, cmap=\"Blues\", ax=ax, cbar=True, annot=False)\n        ax.set_xlabel(\"Predicted\")\n        ax.set_ylabel(\"True\")\n        ax.set_title(f\"Confusion Matrix – {run.id}\")\n        _save_fig(fig, out_dir / \"confusion_matrix.pdf\")\n        print(out_dir / \"confusion_matrix.pdf\")\n\n    return {\n        \"run_id\": run.id,\n        \"method\": run.config.get(\"method\", {}).get(\"name\", \"n/a\"),\n        \"final_acc\": run.summary.get(\"final_top1_accuracy\"),\n        \"acc_series\": history.get(\"acc_after\", pd.Series(dtype=float)).dropna().tolist(),\n    }\n\n# ---------------------------------------------------------------------------\n#                         Aggregated analysis\n# ---------------------------------------------------------------------------\n\ndef aggregate(per_run_rows: List[Dict[str, Any]], out_dir: Path) -> None:\n    out_dir.mkdir(parents=True, exist_ok=True)\n    df = pd.DataFrame(per_run_rows)\n\n    # Determine baseline --------------------------------------------------\n    baseline_candidates = df[df[\"method\"].str.contains(\"baseline|source|no\", case=False, na=False)]\n    baseline_row = baseline_candidates.iloc[0] if not baseline_candidates.empty else df.iloc[0]\n    baseline_acc_series = baseline_row.acc_series\n\n    # Derived metrics ------------------------------------------------------\n    improvement_rates = []\n    p_values = []\n    for _, row in df.iterrows():\n        imp = (row.final_acc - baseline_row.final_acc) / baseline_row.final_acc if baseline_row.final_acc else None\n        try:\n            # Welch's t-test between per-batch accuracy distributions\n            tstat, pval = stats.ttest_ind(baseline_acc_series, row.acc_series, equal_var=False, nan_policy=\"omit\")\n        except Exception:\n            pval = None\n        improvement_rates.append(imp)\n        p_values.append(pval)\n    df[\"improvement_rate_vs_baseline\"] = improvement_rates\n    df[\"p_value_vs_baseline\"] = p_values\n\n    # save aggregated metrics --------------------------------------------\n    _save_json(df.to_dict(orient=\"records\"), out_dir / \"aggregated_metrics.json\")\n    _save_csv(df, out_dir / \"aggregated_metrics.csv\")\n    print(out_dir / \"aggregated_metrics.json\")\n    print(out_dir / \"aggregated_metrics.csv\")\n\n    # bar chart of final accuracy ----------------------------------------\n    fig, ax = plt.subplots(figsize=(6, 4))\n    sns.barplot(data=df, x=\"run_id\", y=\"final_acc\", hue=\"method\", ax=ax)\n    for bar in ax.patches:\n        height = bar.get_height()\n        ax.annotate(f\"{height:.1%}\", (bar.get_x() + bar.get_width() / 2, height),\n                    ha=\"center\", va=\"bottom\", fontsize=8)\n    ax.set_ylabel(\"Top-1 Accuracy\")\n    ax.set_xlabel(\"Run ID\")\n    ax.set_title(\"Final Accuracy Across Runs\")\n    ax.legend()\n    _save_fig(fig, out_dir / \"final_accuracy_comparison.pdf\")\n    print(out_dir / \"final_accuracy_comparison.pdf\")\n\n    # bar chart of improvement rates -------------------------------------\n    fig, ax = plt.subplots(figsize=(6, 4))\n    sns.barplot(data=df, x=\"run_id\", y=\"improvement_rate_vs_baseline\", hue=\"method\", ax=ax)\n    ax.set_ylabel(\"Improvement vs. Baseline\")\n    ax.set_xlabel(\"Run ID\")\n    ax.set_title(\"Relative Improvement (%)\")\n    ax.axhline(0, color=\"gray\", lw=1)\n    for bar in ax.patches:\n        height = bar.get_height()\n        ax.annotate(f\"{height*100:.1f}%\", (bar.get_x() + bar.get_width() / 2, height),\n                    ha=\"center\", va=\"bottom\", fontsize=8)\n    _save_fig(fig, out_dir / \"improvement_rate_comparison.pdf\")\n    print(out_dir / \"improvement_rate_comparison.pdf\")\n\n    # performance metrics table figure -----------------------------------\n    fig, ax = plt.subplots(figsize=(8, 0.4 * len(df) + 1))\n    table_data = df[[\"run_id\", \"method\", \"final_acc\", \"improvement_rate_vs_baseline\", \"p_value_vs_baseline\"]]\n    # format values nicely\n    table_data = table_data.copy()\n    table_data[\"final_acc\"] = table_data[\"final_acc\"].apply(lambda x: f\"{x:.3f}\")\n    table_data[\"improvement_rate_vs_baseline\"] = table_data[\"improvement_rate_vs_baseline\"].apply(\n        lambda x: f\"{x*100:.2f}%\" if pd.notna(x) else \"n/a\")\n    table_data[\"p_value_vs_baseline\"] = table_data[\"p_value_vs_baseline\"].apply(\n        lambda x: f\"{x:.2e}\" if pd.notna(x) else \"n/a\")\n    ax.axis(\"off\")\n    ax.table(\n        cellText=table_data.values,\n        colLabels=table_data.columns,\n        loc=\"center\",\n        cellLoc=\"center\",\n    )\n    _save_fig(fig, out_dir / \"performance_metrics_table.pdf\")\n    print(out_dir / \"performance_metrics_table.pdf\")\n\n# ---------------------------------------------------------------------------\n#                                   main\n# ---------------------------------------------------------------------------\n\ndef main() -> None:\n    cli = _parse_cli(sys.argv)\n    results_dir = Path(cli[\"results_dir\"]).expanduser().resolve()\n    run_ids = json.loads(cli[\"run_ids\"])\n\n    # WandB credentials ----------------------------------------------------\n    with open(results_dir / \"wandb_config.yaml\") as fh:\n        w_cfg = yaml.safe_load(fh)[\"wandb\"]\n    entity, project = w_cfg[\"entity\"], w_cfg[\"project\"]\n\n    api = wandb.Api()\n    per_run_rows: List[Dict[str, Any]] = []\n    for rid in run_ids:\n        run = api.run(f\"{entity}/{project}/{rid}\")\n        per_run_rows.append(process_single_run(run, results_dir / rid))\n\n    aggregate(per_run_rows, results_dir / \"comparison\")\n\nif __name__ == \"__main__\":\n    main()\n",
        "preprocess_py": "\"\"\"src/preprocess.py – dataset loading & preprocessing pipeline.\"\"\"\nfrom __future__ import annotations\n\nimport warnings\nfrom typing import Iterator, List, Tuple\n\nimport torch\nimport torchvision.transforms as T\nfrom torch.utils.data import DataLoader, Dataset, TensorDataset\nfrom torchvision.datasets import CIFAR10\n\ntry:\n    from robustbench.data import load_cifar10c\n\n    _ROBUSTBENCH_AVAILABLE = True\n    CORRUPTIONS_ALL = [\n        \"gaussian_noise\",\n        \"shot_noise\",\n        \"impulse_noise\",\n        \"defocus_blur\",\n        \"glass_blur\",\n        \"motion_blur\",\n        \"zoom_blur\",\n        \"snow\",\n        \"frost\",\n        \"fog\",\n        \"brightness\",\n        \"contrast\",\n        \"elastic_transform\",\n        \"pixelate\",\n        \"jpeg_compression\",\n    ]\nexcept ImportError:  # pragma: no cover\n    _ROBUSTBENCH_AVAILABLE = False\n    CORRUPTIONS_ALL: List[str] = []\n\nIMAGENET_MEAN = (0.485, 0.456, 0.406)\nIMAGENET_STD = (0.229, 0.224, 0.225)\n\n# ---------------------------------------------------------------------------\n#                         helpers\n# ---------------------------------------------------------------------------\n\ndef _np_to_tensor(arr):\n    return torch.from_numpy(arr).permute(0, 3, 1, 2).float().div(255.0)\n\n# ---------------------------------------------------------------------------\n#                    public builder\n# ---------------------------------------------------------------------------\n\ndef build_dataloader(cfg, device: torch.device) -> Iterator[Tuple[torch.Tensor, torch.Tensor]]:\n    name = str(cfg.dataset.name).lower()\n    batch_size = int(cfg.dataset.batch_size)\n    severity = int(getattr(cfg.dataset, \"corruption_severity\", 5))\n\n    if \"cifar\" in name and \"c\" in name and _ROBUSTBENCH_AVAILABLE:\n        corruption_types = cfg.dataset.corruption_types\n        if corruption_types in {\"all\", \"*\", None}:\n            corruption_types = CORRUPTIONS_ALL\n        elif isinstance(corruption_types, str):\n            corruption_types = [corruption_types]\n\n        xs, ys = [], []\n        for c in corruption_types:\n            x_np, y_np = load_cifar10c(c, severity, data_dir=\".cache/cifar10c\")\n            xs.append(_np_to_tensor(x_np))\n            ys.append(torch.from_numpy(y_np))\n        images = torch.cat(xs, dim=0)\n        labels = torch.cat(ys).long()\n        dataset: Dataset = TensorDataset(images, labels)\n    else:\n        if not _ROBUSTBENCH_AVAILABLE:\n            warnings.warn(\"RobustBench not found – falling back to clean CIFAR-10 test set.\")\n        transform = T.Compose([T.ToTensor(), T.Normalize(IMAGENET_MEAN, IMAGENET_STD)])\n        dataset = CIFAR10(root=\".cache/cifar10\", train=False, download=True, transform=transform)\n\n    dataloader = DataLoader(\n        dataset,\n        batch_size=batch_size,\n        shuffle=getattr(cfg.dataset, \"shuffle\", False),\n        num_workers=getattr(cfg.dataset, \"num_workers\", 4),\n        pin_memory=True,\n        drop_last=False,\n    )\n\n    def _iter():\n        for x, y in dataloader:\n            x = x.to(device, non_blocking=True)\n            y = y.to(device, non_blocking=True)\n            if x.max() <= 1.0:  # ensure normalisation for CIFAR-10-C\n                x = T.Normalize(IMAGENET_MEAN, IMAGENET_STD)(x)\n            yield x, y\n\n    return _iter()\n",
        "model_py": "\"\"\"src/model.py – backbone creation & adapters.\"\"\"\nfrom __future__ import annotations\n\nimport math\nimport os\n\nimport timm\nimport torch\nimport torch.nn as nn\n\n__all__ = [\"create_backbone\", \"TentAdapter\", \"CWTentAdapter\"]\n\n# ---------------------------------------------------------------------------\n#                         backbone\n# ---------------------------------------------------------------------------\n\ndef create_backbone(cfg) -> nn.Module:  # noqa: ANN001 – cfg is Hydra object\n    os.environ.setdefault(\"TORCH_HOME\", \".cache\")\n    model = timm.create_model(\n        cfg.model.name,\n        pretrained=bool(cfg.model.pretrained),\n        num_classes=int(cfg.model.num_classes),\n        cache_dir=\".cache/\",\n    )\n\n    # freeze everything ----------------------------------------------------\n    for p in model.parameters():\n        p.requires_grad_(False)\n    for m in model.modules():\n        if isinstance(m, (nn.BatchNorm2d, nn.SyncBatchNorm)):\n            if m.weight is not None:\n                m.weight.requires_grad_(True)\n            if m.bias is not None:\n                m.bias.requires_grad_(True)\n    model.eval()\n    return model\n\n# ---------------------------------------------------------------------------\n#               utility: entropy\n# ---------------------------------------------------------------------------\n\ndef entropy_from_probs(p: torch.Tensor) -> torch.Tensor:\n    return -(p * (p + 1e-8).log()).sum(1)\n\n# ---------------------------------------------------------------------------\n#               base adapter\n# ---------------------------------------------------------------------------\n\nclass _BaseAdapter(nn.Module):\n    def __init__(self, backbone: nn.Module):\n        super().__init__()\n        self.backbone = backbone\n        self.num_classes = getattr(backbone, \"num_classes\", None)\n        if self.num_classes is None:\n            raise ValueError(\"Backbone missing 'num_classes' attribute\")\n        self.backbone.train()  # BN layers use batch stats\n\n    @torch.no_grad()\n    def predict(self, x: torch.Tensor) -> torch.Tensor:\n        self.backbone.eval()\n        logits = self.backbone(x)\n        return logits.softmax(1)\n\n# ---------------------------------------------------------------------------\n#                     original TENT\n# ---------------------------------------------------------------------------\n\nclass TentAdapter(_BaseAdapter):\n    def __init__(\n        self,\n        backbone: nn.Module,\n        lr: float,\n        momentum: float = 0.9,\n        inner_steps: int = 1,\n        weight_decay: float = 0.0,\n    ) -> None:\n        super().__init__(backbone)\n        params = [p for p in backbone.parameters() if p.requires_grad]\n        self.optimizer = torch.optim.SGD(\n            params, lr=lr, momentum=momentum, weight_decay=weight_decay\n        )\n        self.inner_steps = int(inner_steps)\n\n    def adapt(self, x: torch.Tensor) -> float:\n        self.backbone.train()\n        last_loss = 0.0\n        for _ in range(self.inner_steps):\n            logits = self.backbone(x)\n            probs = logits.softmax(1)\n            loss = entropy_from_probs(probs).mean()\n            self.optimizer.zero_grad()\n            loss.backward()\n            self.optimizer.step()\n            last_loss = float(loss.item())\n        self.backbone.eval()\n        return last_loss\n\n# ---------------------------------------------------------------------------\n#                   confidence-weighted TENT\n# ---------------------------------------------------------------------------\n\nclass CWTentAdapter(TentAdapter):\n    def adapt(self, x: torch.Tensor) -> float:  # override\n        self.backbone.train()\n        logits = self.backbone(x)\n        probs = logits.softmax(1)\n        entropy = entropy_from_probs(probs)\n        weights = 1.0 - entropy / math.log(self.num_classes)\n        loss = (weights * entropy).sum() / weights.sum()\n        self.optimizer.zero_grad()\n        loss.backward()\n        self.optimizer.step()\n        self.backbone.eval()\n        return float(loss.item())\n",
        "main_py": "\"\"\"src/main.py – orchestration wrapper that launches src.train as subprocess.\"\"\"\nfrom __future__ import annotations\n\nimport subprocess\nimport sys\nfrom typing import List\n\nimport hydra\nfrom hydra.core.hydra_config import HydraConfig\nfrom omegaconf import DictConfig\n\n@hydra.main(config_path=\"../config\", config_name=\"config\")\ndef main(cfg: DictConfig) -> None:\n    overrides: List[str] = HydraConfig.get().overrides.task.copy()\n    filtered = [o for o in overrides if not o.startswith((\"run=\", \"results_dir=\", \"trial_mode=\"))]\n    filtered.append(f\"run={cfg.run}\")\n    filtered.append(f\"results_dir={cfg.results_dir}\")\n    if cfg.get(\"trial_mode\", False):\n        filtered.append(\"trial_mode=true\")\n    cmd: List[str] = [sys.executable, \"-u\", \"-m\", \"src.train\", *filtered]\n    print(\"[main] Launching subprocess:\\n  \", \" \".join(cmd))\n    subprocess.run(cmd, check=True)\n\nif __name__ == \"__main__\":\n    main()\n",
        "pyproject_toml": "[build-system]\nrequires = [\"setuptools\", \"wheel\"]\n\n[project]\nname = \"cw-tent-experiments\"\nversion = \"0.4.0\"\n\n[project.dependencies]\ntorch = \">=2.0\"\ntorchvision = \"*\"\ntimm = \"*\"\nrobustbench = \"*\"               # optional, handled gracefully if missing\nhydra-core = \"*\"\nomegaconf = \"*\"\nwandb = \"*\"\noptuna = \"*\"\nmatplotlib = \"*\"\nseaborn = \"*\"\nscikit-learn = \"*\"\npandas = \"*\"\npyyaml = \"*\"\nscipy = \"*\"\n",
        "config_yaml": "# config/config.yaml – root Hydra configuration\n# ------------------------------------------------\nrun: default-run-id        # overridden from CLI (name of YAML inside config/run/)\nresults_dir: ./results     # overridden from CLI\ntrial_mode: false          # set to true for quick CI runs\n\nwandb:\n  entity: gengaru617-personal\n  project: 251020-test\n  mode: online             # automatically set to \"disabled\" in trial_mode\n\noptuna:\n  n_trials: 0              # 0 → disabled; can be overridden per-run\n  direction: maximize\n  metric: top1_accuracy\n  search_space: {}\n\nlogging:\n  log_every_n_steps: 50\n"
      }
    },
    "experiment_runs": [
      {
        "run_id": "proposed-ResNet-18 (11M)-CIFAR-10-C (severity 5)",
        "method_name": "proposed",
        "model_name": "ResNet-18 (11M)",
        "dataset_name": "CIFAR-10-C (severity 5)",
        "run_config": "run_id: proposed-ResNet-18 (11M)-CIFAR-10-C (severity 5)\nmethod:\n  name: CW-TENT\n  description: Confidence-Weighted Entropy Minimization for one-step test-time adaptation\n  inner_steps: 1\n  confidence_weighting: true\nmodel:\n  name: resnet18.a1_in1k\n  pretrained: true\n  num_params: 11000000\n  freeze_except:\n    - BatchNorm2d.weight\n    - BatchNorm2d.bias\n  checkpoint: timm/resnet18.a1_in1k\n  input_size: 3x32x32\n  num_classes: 10\ndataset:\n  name: CIFAR-10-C\n  corruption_severity: 5\n  corruption_types: all  # 15 standard corruptions\n  split: test\n  batch_size: 64\n  num_workers: 8\n  shuffle: false\ntraining:\n  optimizer: sgd\n  learning_rate: 0.001\n  momentum: 0.9\n  weight_decay: 0.0\n  grad_clip: null\n  precision: fp32\n  accumulate_grad_batches: 1\n  epochs: 1  # adaptation is online, one pass over stream\nhardware:\n  gpus: 8\n  gpu_type: A100\n  vram_per_gpu: 80GB\nlogging:\n  log_every_n_steps: 20\n  checkpoint_interval: null\n  tensorboard: true\noptuna:\n  n_trials: 30\n  direction: maximize\n  metric: top1_accuracy\n  search_space:\n    learning_rate:\n      type: loguniform\n      low: 1e-4\n      high: 1e-2\n    momentum:\n      type: uniform\n      low: 0.0\n      high: 0.99\n    weight_decay:\n      type: loguniform\n      low: 1e-6\n      high: 1e-3\n    batch_size:\n      type: categorical\n      choices: [32, 64, 128]\n"
      },
      {
        "run_id": "comparative-1-ResNet-18 (11M)-CIFAR-10-C (severity 5)",
        "method_name": "comparative-1",
        "model_name": "ResNet-18 (11M)",
        "dataset_name": "CIFAR-10-C (severity 5)",
        "run_config": "run_id: comparative-1-ResNet-18 (11M)-CIFAR-10-C (severity 5)\nmethod:\n  name: TENT\n  description: Original entropy minimization test-time adaptation baseline\n  inner_steps: 10\n  confidence_weighting: false\nmodel:\n  name: resnet18.a1_in1k\n  pretrained: true\n  num_params: 11000000\n  freeze_except:\n    - BatchNorm2d.weight\n    - BatchNorm2d.bias\n  checkpoint: timm/resnet18.a1_in1k\n  input_size: 3x32x32\n  num_classes: 10\ndataset:\n  name: CIFAR-10-C\n  corruption_severity: 5\n  corruption_types: all\n  split: test\n  batch_size: 64\n  num_workers: 8\n  shuffle: false\ntraining:\n  optimizer: sgd\n  learning_rate: 0.001\n  momentum: 0.9\n  weight_decay: 0.0\n  grad_clip: null\n  precision: fp32\n  accumulate_grad_batches: 1\n  epochs: 1  # adaptation is online\nhardware:\n  gpus: 8\n  gpu_type: A100\n  vram_per_gpu: 80GB\nlogging:\n  log_every_n_steps: 20\n  checkpoint_interval: null\n  tensorboard: true\noptuna:\n  n_trials: 30\n  direction: maximize\n  metric: top1_accuracy\n  search_space:\n    learning_rate:\n      type: loguniform\n      low: 1e-4\n      high: 1e-2\n    momentum:\n      type: uniform\n      low: 0.0\n      high: 0.99\n    weight_decay:\n      type: loguniform\n      low: 1e-6\n      high: 1e-3\n    inner_steps:\n      type: int\n      low: 3\n      high: 10\n    batch_size:\n      type: categorical\n      choices: [32, 64, 128]\n"
      }
    ]
  },
  "idea_info_history": [
    {
      "idea": {
        "open_problems": "Most popular test-time adaptation (TTA) methods such as TENT adapt only BatchNorm affine parameters by minimizing prediction entropy on the incoming test stream. Although very effective, they often require 3-10 gradient steps for each incoming mini-batch to reach their best performance. The slow convergence mainly comes from noisy gradients produced by low-confidence (high-entropy) samples that dominate early in adaptation. A simple mechanism to down-weight these uncertain samples during optimization is missing.",
        "methods": "Confidence-Weighted Entropy Minimization (CW-TENT).\n1. Keep the original TENT objective L = Σ_i H(p_i) where H is entropy.\n2. Introduce a scalar weight per sample w_i = 1 – H(p_i)/log(C)  (ranges in [0,1]; C = #classes).\n3. Replace the loss with the weighted variant  L_w = Σ_i w_i · H(p_i) / Σ_i w_i.\n4. Use the same SGD update of BatchNorm affine parameters, but with a single gradient step per mini-batch (optionally with momentum=0.9).\nTheoretical intuition: high-confidence samples (low entropy) are already close to the target domain optimum and provide reliable gradients; amplifying their contribution yields a cleaner gradient direction, allowing larger learning rate or fewer steps, hence faster convergence.",
        "experimental_setup": "Dataset: CIFAR-10-C with 15 corruption types, severity 5 (standard TTA benchmark).\nModel: Pre-trained ResNet-18.\nBaselines: 1) Source model (no adaptation). 2) Original TENT (default 10 inner steps). 3) CW-TENT (1 inner step).\nMetric: Top-1 accuracy after processing the full test stream; also accuracy after first K (e.g., 1, 3) adaptation steps to measure convergence speed.",
        "experimental_code": "import torch, torch.nn.functional as F\n\ndef entropy(p):\n    return -(p * p.log()).sum(1)\n\nclass CWTentAdapter:\n    def __init__(self, model, lr=1e-3, momentum=0.9):\n        self.model = model.eval()\n        self.model.requires_grad_(False)\n        # enable gradients for affine BN params only\n        for m in model.modules():\n            if isinstance(m, torch.nn.BatchNorm2d):\n                m.weight.requires_grad_(True)\n                m.bias.requires_grad_(True)\n        self.optimizer = torch.optim.SGD(filter(lambda p: p.requires_grad, model.parameters()), lr=lr, momentum=momentum)\n\n    @torch.no_grad()\n    def predict(self, x):\n        return self.model(x).softmax(1)\n\n    def adapt(self, x):\n        self.model.train()        # BN uses batch statistics\n        self.optimizer.zero_grad()\n        logits = self.model(x)\n        probs = logits.softmax(1)\n        H = entropy(probs)\n        w = 1 - H / torch.log(torch.tensor(probs.size(1), device=x.device))\n        loss = (w * H).sum() / w.sum()\n        loss.backward()\n        self.optimizer.step()\n        self.model.eval()\n        return probs.detach()\n",
        "expected_result": "With only one gradient step per mini-batch, CW-TENT is expected to match or surpass the accuracy of TENT that uses 5–10 steps. For example on CIFAR-10-C severity 5: Source 58.7%, TENT (10 steps) 71.0%, CW-TENT (1 step) ≈71.5%. Convergence plot should show CW-TENT reaching peak accuracy after the first step, whereas TENT needs several.",
        "expected_conclusion": "A tiny modification—confidence-weighted entropy—suppresses noisy gradients from uncertain samples and lets TENT converge in a single step. The change is trivial to implement (four extra lines) yet meaningfully cuts computation and latency at test time, making TTA more practical for real-time deployment."
      },
      "evaluate": {
        "novelty_reason": "The method keeps the standard entropy–minimisation objective of TENT but introduces a per-sample weight that is an explicit, closed-form function of the current prediction entropy (w_i = 1 – H(p_i)/log C) and then normalises the weighted loss. Existing TTA literature (e.g., TENT, CoTTA, EATA, SAR, MEMO, AdaBN) either (1) use unweighted entropy, (2) rely on curriculum strategies that drop whole samples when confidence rises, or (3) apply auxiliary self-supervised tasks. None of those papers report an analytic confidence weight that allows single-pass adaptation while keeping exactly the same optimisation target and parameter subset. Therefore the idea of analytically attenuating noisy gradients inside entropy minimisation without extra hyper-parameters or architecture change is novel, albeit incremental.",
        "novelty_score": 6,
        "significance_reason": "The proposed weighting lets TENT converge in one SGD step instead of 5–10, cutting inner-loop computation and latency by 5–10× while slightly improving accuracy. This directly addresses a key bottleneck for deploying TTA on resource-constrained or real-time systems (e.g., robotics, streaming cameras). Academically, it provides an interpretable insight into why early-stage gradients are noisy and offers a simple, reproducible remedy that could be combined with other adaptation tricks. However, the gain is mainly practical; the underlying adaptation paradigm (entropy minimisation on BN parameters) is unchanged, so the contribution is evolutionary rather than revolutionary.",
        "significance_score": 7
      }
    }
  ]
}