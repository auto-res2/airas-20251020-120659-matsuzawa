{
  "research_topic": "Improving Test-Time Adaptation in terms of convergence speed.",
  "queries": [
    "fast convergence test-time adaptation"
  ],
  "research_study_list": [
    {
      "title": "Test Time Adaptation With Regularized Loss for Weakly Supervised Salient Object Detection"
    },
    {
      "title": "DELTA: DEGRADATION-FREE FULLY TEST-TIME ADAPTATION",
      "abstract": "Fully test-time adaptation aims at adapting a pre-trained model to the test\nstream during real-time inference, which is urgently required when the test\ndistribution differs from the training distribution. Several efforts have been\ndevoted to improving adaptation performance. However, we find that two\nunfavorable defects are concealed in the prevalent adaptation methodologies\nlike test-time batch normalization (BN) and self-learning. First, we reveal\nthat the normalization statistics in test-time BN are completely affected by\nthe currently received test samples, resulting in inaccurate estimates. Second,\nwe show that during test-time adaptation, the parameter update is biased\ntowards some dominant classes. In addition to the extensively studied test\nstream with independent and class-balanced samples, we further observe that the\ndefects can be exacerbated in more complicated test environments, such as\n(time) dependent or class-imbalanced data. We observe that previous approaches\nwork well in certain scenarios while show performance degradation in others due\nto their faults. In this paper, we provide a plug-in solution called DELTA for\nDegradation-freE fuLly Test-time Adaptation, which consists of two components:\n(i) Test-time Batch Renormalization (TBR), introduced to improve the estimated\nnormalization statistics. (ii) Dynamic Online re-weighTing (DOT), designed to\naddress the class bias within optimization. We investigate various test-time\nadaptation methods on three commonly used datasets with four scenarios, and a\nnewly introduced real-world dataset. DELTA can help them deal with all\nscenarios simultaneously, leading to SOTA performance.",
      "meta_data": {
        "arxiv_id": "2301.13018v1",
        "authors": [
          "Bowen Zhao",
          "Chen Chen",
          "Shu-Tao Xia"
        ],
        "published_date": "2023-01-30T15:54:00Z",
        "pdf_url": "https://arxiv.org/pdf/2301.13018v1.pdf"
      }
    }
  ],
  "new_method": {
    "method": "{\n    \"Open Problems\": \"Most popular test-time adaptation (TTA) methods such as TENT adapt only BatchNorm affine parameters by minimizing prediction entropy on the incoming test stream. Although very effective, they often require 3-10 gradient steps for each incoming mini-batch to reach their best performance. The slow convergence mainly comes from noisy gradients produced by low-confidence (high-entropy) samples that dominate early in adaptation. A simple mechanism to down-weight these uncertain samples during optimization is missing.\",\n    \"Methods\": \"Confidence-Weighted Entropy Minimization (CW-TENT).\\n1. Keep the original TENT objective L = Σ_i H(p_i) where H is entropy.\\n2. Introduce a scalar weight per sample w_i = 1 – H(p_i)/log(C)  (ranges in [0,1]; C = #classes).\\n3. Replace the loss with the weighted variant  L_w = Σ_i w_i · H(p_i) / Σ_i w_i.\\n4. Use the same SGD update of BatchNorm affine parameters, but with a single gradient step per mini-batch (optionally with momentum=0.9).\\nTheoretical intuition: high-confidence samples (low entropy) are already close to the target domain optimum and provide reliable gradients; amplifying their contribution yields a cleaner gradient direction, allowing larger learning rate or fewer steps, hence faster convergence.\",\n    \"Experimental Setup\": \"Dataset: CIFAR-10-C with 15 corruption types, severity 5 (standard TTA benchmark).\\nModel: Pre-trained ResNet-18.\\nBaselines: 1) Source model (no adaptation). 2) Original TENT (default 10 inner steps). 3) CW-TENT (1 inner step).\\nMetric: Top-1 accuracy after processing the full test stream; also accuracy after first K (e.g., 1, 3) adaptation steps to measure convergence speed.\",\n    \"Experimental Code\": \"import torch, torch.nn.functional as F\\n\\ndef entropy(p):\\n    return -(p * p.log()).sum(1)\\n\\nclass CWTentAdapter:\\n    def __init__(self, model, lr=1e-3, momentum=0.9):\\n        self.model = model.eval()\\n        self.model.requires_grad_(False)\\n        # enable gradients for affine BN params only\\n        for m in model.modules():\\n            if isinstance(m, torch.nn.BatchNorm2d):\\n                m.weight.requires_grad_(True)\\n                m.bias.requires_grad_(True)\\n        self.optimizer = torch.optim.SGD(filter(lambda p: p.requires_grad, model.parameters()), lr=lr, momentum=momentum)\\n\\n    @torch.no_grad()\\n    def predict(self, x):\\n        return self.model(x).softmax(1)\\n\\n    def adapt(self, x):\\n        self.model.train()        # BN uses batch statistics\\n        self.optimizer.zero_grad()\\n        logits = self.model(x)\\n        probs = logits.softmax(1)\\n        H = entropy(probs)\\n        w = 1 - H / torch.log(torch.tensor(probs.size(1), device=x.device))\\n        loss = (w * H).sum() / w.sum()\\n        loss.backward()\\n        self.optimizer.step()\\n        self.model.eval()\\n        return probs.detach()\\n\",\n    \"Expected Result\": \"With only one gradient step per mini-batch, CW-TENT is expected to match or surpass the accuracy of TENT that uses 5–10 steps. For example on CIFAR-10-C severity 5: Source 58.7%, TENT (10 steps) 71.0%, CW-TENT (1 step) ≈71.5%. Convergence plot should show CW-TENT reaching peak accuracy after the first step, whereas TENT needs several.\",\n    \"Expected Conclusion\": \"A tiny modification—confidence-weighted entropy—suppresses noisy gradients from uncertain samples and lets TENT converge in a single step. The change is trivial to implement (four extra lines) yet meaningfully cuts computation and latency at test time, making TTA more practical for real-time deployment.\"\n}",
    "experimental_design": {
      "experiment_summary": "This experiment evaluates the ability of Confidence-Weighted TENT (CW-TENT) to accelerate and improve test-time adaptation (TTA) of image classifiers under distribution shift. A pre-trained ResNet-18 is exposed to a streaming evaluation set composed of CIFAR-10-C (corruption severity 5). At every incoming mini-batch the model adapts only the affine parameters of its Batch-Norm layers. CW-TENT assigns each sample a confidence weight w_i = 1 – H(p_i)/log(C) and minimizes the weighted entropy L_w = Σ w_i·H(p_i) / Σ w_i with a single SGD update per batch. Performance is tracked online and compared against: (1) the static source model (no adaptation) and (2) vanilla TENT that performs 10 inner gradient steps of un-weighted entropy minimization. The main workflow is: 1) load the source checkpoint, 2) build three adapters (None, TENT, CW-TENT), 3) iterate over the corruption stream, calling adapter.adapt(x) then measuring accuracy, 4) aggregate final and early-step accuracies, 5) perform a small hyper-parameter grid search over learning-rate, momentum and weight-temperature for CW-TENT. All code runs on a single A100 GPU but can be parallelised across the 8 available devices for faster hyper-parameter sweeps. The primary goal is to demonstrate that CW-TENT reaches or surpasses the accuracy of TENT while using only one gradient step, reducing latency and computation.",
      "evaluation_metrics": [
        "Top-1 Accuracy"
      ],
      "proposed_method": "Confidence-Weighted TENT (CW-TENT) augments the original Test-time Entropy Minimisation (TENT) framework with per-sample confidence weights to dampen the influence of uncertain (high-entropy) predictions during adaptation.\n\nObjective: For a mini-batch of predictions p_i over C classes, compute entropy H(p_i) = −Σ_c p_{ic} log p_{ic}. Define weight w_i = 1 − H(p_i)/log(C) ∈ [0,1]. Optimise the weighted entropy\n    L_w = Σ_i w_i · H(p_i) / Σ_i w_i.\n\nOptimisation protocol:\n1. Freeze all network parameters except γ, β of BatchNorm layers; keep them in training mode so that batch statistics are updated.\n2. For each incoming batch x:\n   a. Forward pass → logits → softmax p.\n   b. Compute H(p), w, and L_w.\n   c. One SGD step on BN affine params (lr≈1e-3, momentum optional).\n   d. Switch model back to eval mode for inference until next batch arrives.\n\nTheoretical intuition: samples with low entropy have gradients that more accurately point toward the target-domain optimum. Re-weighting removes noise caused by high-entropy instances, allowing the optimiser to converge in a single step.\n\nImplementation: apart from four extra lines to compute w and L_w, the code is identical to TENT. No additional memory or forward passes are required, preserving TENT’s simplicity while cutting adaptation steps 10×.",
      "comparative_methods": [
        "TENT (unweighted entropy, 10 inner steps)"
      ],
      "models_to_use": [
        "ResNet-18 (11.7M)"
      ],
      "datasets_to_use": [
        "CIFAR-10-C (severity 5)"
      ],
      "hyperparameters_to_search": {
        "learning_rate": "0.0005-0.01",
        "momentum": "0.0,0.5,0.9",
        "weight_temperature": "0.8-1.2",
        "batch_size": "64,128,256"
      },
      "external_resources": {
        "hugging_face": {
          "models": [
            {
              "id": "timm/resnet18.a1_in1k",
              "author": "timm",
              "sha": "491b427b45c94c7fb0e78b5474cc919aff584bbf",
              "created_at": "2023-04-05T18:02:50+00:00",
              "last_modified": "2025-01-21T21:13:50+00:00",
              "private": false,
              "gated": false,
              "disabled": false,
              "downloads": 2441357,
              "likes": 12,
              "siblings": [
                {
                  "rfilename": ".gitattributes"
                },
                {
                  "rfilename": "README.md"
                },
                {
                  "rfilename": "config.json"
                },
                {
                  "rfilename": "model.safetensors"
                },
                {
                  "rfilename": "pytorch_model.bin"
                }
              ],
              "card_data": {
                "license": "apache-2.0",
                "language": [],
                "library_name": "timm",
                "tags": [
                  "image-classification",
                  "timm",
                  "transformers"
                ],
                "datasets": [],
                "task_categories": [],
                "size_categories": [],
                "metrics": [],
                "widget": []
              },
              "tags": [
                "timm",
                "pytorch",
                "safetensors",
                "image-classification",
                "transformers",
                "arxiv:2110.00476",
                "arxiv:1512.03385",
                "license:apache-2.0",
                "region:us"
              ],
              "pipeline_tag": "image-classification",
              "library_name": "timm",
              "readme": "---\ntags:\n- image-classification\n- timm\n- transformers\nlicense: apache-2.0\nlibrary_name: timm\n---\n# Model card for resnet18.a1_in1k\n\nA ResNet-B image classification model.\n\nThis model features:\n * ReLU activations\n * single layer 7x7 convolution with pooling\n * 1x1 convolution shortcut downsample\n\nTrained on ImageNet-1k in `timm` using recipe template described below.\n\nRecipe details:\n * ResNet Strikes Back `A1` recipe\n * LAMB optimizer with BCE loss\n * Cosine LR schedule with warmup\n\n\n## Model Details\n- **Model Type:** Image classification / feature backbone\n- **Model Stats:**\n  - Params (M): 11.7\n  - GMACs: 1.8\n  - Activations (M): 2.5\n  - Image size: train = 224 x 224, test = 288 x 288\n- **Papers:**\n  - ResNet strikes back: An improved training procedure in timm: https://arxiv.org/abs/2110.00476\n  - Deep Residual Learning for Image Recognition: https://arxiv.org/abs/1512.03385\n- **Original:** https://github.com/huggingface/pytorch-image-models\n\n## Model Usage\n### Image Classification\n```python\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\n\nimg = Image.open(urlopen(\n    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'\n))\n\nmodel = timm.create_model('resnet18.a1_in1k', pretrained=True)\nmodel = model.eval()\n\n# get model specific transforms (normalization, resize)\ndata_config = timm.data.resolve_model_data_config(model)\ntransforms = timm.data.create_transform(**data_config, is_training=False)\n\noutput = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1\n\ntop5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)\n```\n\n### Feature Map Extraction\n```python\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\n\nimg = Image.open(urlopen(\n    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'\n))\n\nmodel = timm.create_model(\n    'resnet18.a1_in1k',\n    pretrained=True,\n    features_only=True,\n)\nmodel = model.eval()\n\n# get model specific transforms (normalization, resize)\ndata_config = timm.data.resolve_model_data_config(model)\ntransforms = timm.data.create_transform(**data_config, is_training=False)\n\noutput = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1\n\nfor o in output:\n    # print shape of each feature map in output\n    # e.g.:\n    #  torch.Size([1, 64, 112, 112])\n    #  torch.Size([1, 64, 56, 56])\n    #  torch.Size([1, 128, 28, 28])\n    #  torch.Size([1, 256, 14, 14])\n    #  torch.Size([1, 512, 7, 7])\n\n    print(o.shape)\n```\n\n### Image Embeddings\n```python\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\n\nimg = Image.open(urlopen(\n    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'\n))\n\nmodel = timm.create_model(\n    'resnet18.a1_in1k',\n    pretrained=True,\n    num_classes=0,  # remove classifier nn.Linear\n)\nmodel = model.eval()\n\n# get model specific transforms (normalization, resize)\ndata_config = timm.data.resolve_model_data_config(model)\ntransforms = timm.data.create_transform(**data_config, is_training=False)\n\noutput = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor\n\n# or equivalently (without needing to set num_classes=0)\n\noutput = model.forward_features(transforms(img).unsqueeze(0))\n# output is unpooled, a (1, 512, 7, 7) shaped tensor\n\noutput = model.forward_head(output, pre_logits=True)\n# output is a (1, num_features) shaped tensor\n```\n\n## Model Comparison\nExplore the dataset and runtime metrics of this model in timm [model results](https://github.com/huggingface/pytorch-image-models/tree/main/results).\n\n|model                                     |img_size|top1 |top5 |param_count|gmacs|macts|img/sec|\n|------------------------------------------|--------|-----|-----|-----------|-----|-----|-------|\n|[seresnextaa101d_32x8d.sw_in12k_ft_in1k_288](https://huggingface.co/timm/seresnextaa101d_32x8d.sw_in12k_ft_in1k_288)|320     |86.72|98.17|93.6       |35.2 |69.7 |451    |\n|[seresnextaa101d_32x8d.sw_in12k_ft_in1k_288](https://huggingface.co/timm/seresnextaa101d_32x8d.sw_in12k_ft_in1k_288)|288     |86.51|98.08|93.6       |28.5 |56.4 |560    |\n|[seresnextaa101d_32x8d.sw_in12k_ft_in1k](https://huggingface.co/timm/seresnextaa101d_32x8d.sw_in12k_ft_in1k)|288     |86.49|98.03|93.6       |28.5 |56.4 |557    |\n|[seresnextaa101d_32x8d.sw_in12k_ft_in1k](https://huggingface.co/timm/seresnextaa101d_32x8d.sw_in12k_ft_in1k)|224     |85.96|97.82|93.6       |17.2 |34.2 |923    |\n|[resnext101_32x32d.fb_wsl_ig1b_ft_in1k](https://huggingface.co/timm/resnext101_32x32d.fb_wsl_ig1b_ft_in1k)|224     |85.11|97.44|468.5      |87.3 |91.1 |254    |\n|[resnetrs420.tf_in1k](https://huggingface.co/timm/resnetrs420.tf_in1k)|416     |85.0 |97.12|191.9      |108.4|213.8|134    |\n|[ecaresnet269d.ra2_in1k](https://huggingface.co/timm/ecaresnet269d.ra2_in1k)|352     |84.96|97.22|102.1      |50.2 |101.2|291    |\n|[ecaresnet269d.ra2_in1k](https://huggingface.co/timm/ecaresnet269d.ra2_in1k)|320     |84.73|97.18|102.1      |41.5 |83.7 |353    |\n|[resnetrs350.tf_in1k](https://huggingface.co/timm/resnetrs350.tf_in1k)|384     |84.71|96.99|164.0      |77.6 |154.7|183    |\n|[seresnextaa101d_32x8d.ah_in1k](https://huggingface.co/timm/seresnextaa101d_32x8d.ah_in1k)|288     |84.57|97.08|93.6       |28.5 |56.4 |557    |\n|[resnetrs200.tf_in1k](https://huggingface.co/timm/resnetrs200.tf_in1k)|320     |84.45|97.08|93.2       |31.5 |67.8 |446    |\n|[resnetrs270.tf_in1k](https://huggingface.co/timm/resnetrs270.tf_in1k)|352     |84.43|96.97|129.9      |51.1 |105.5|280    |\n|[seresnext101d_32x8d.ah_in1k](https://huggingface.co/timm/seresnext101d_32x8d.ah_in1k)|288     |84.36|96.92|93.6       |27.6 |53.0 |595    |\n|[seresnet152d.ra2_in1k](https://huggingface.co/timm/seresnet152d.ra2_in1k)|320     |84.35|97.04|66.8       |24.1 |47.7 |610    |\n|[resnetrs350.tf_in1k](https://huggingface.co/timm/resnetrs350.tf_in1k)|288     |84.3 |96.94|164.0      |43.7 |87.1 |333    |\n|[resnext101_32x8d.fb_swsl_ig1b_ft_in1k](https://huggingface.co/timm/resnext101_32x8d.fb_swsl_ig1b_ft_in1k)|224     |84.28|97.17|88.8       |16.5 |31.2 |1100   |\n|[resnetrs420.tf_in1k](https://huggingface.co/timm/resnetrs420.tf_in1k)|320     |84.24|96.86|191.9      |64.2 |126.6|228    |\n|[seresnext101_32x8d.ah_in1k](https://huggingface.co/timm/seresnext101_32x8d.ah_in1k)|288     |84.19|96.87|93.6       |27.2 |51.6 |613    |\n|[resnext101_32x16d.fb_wsl_ig1b_ft_in1k](https://huggingface.co/timm/resnext101_32x16d.fb_wsl_ig1b_ft_in1k)|224     |84.18|97.19|194.0      |36.3 |51.2 |581    |\n|[resnetaa101d.sw_in12k_ft_in1k](https://huggingface.co/timm/resnetaa101d.sw_in12k_ft_in1k)|288     |84.11|97.11|44.6       |15.1 |29.0 |1144   |\n|[resnet200d.ra2_in1k](https://huggingface.co/timm/resnet200d.ra2_in1k)|320     |83.97|96.82|64.7       |31.2 |67.3 |518    |\n|[resnetrs200.tf_in1k](https://huggingface.co/timm/resnetrs200.tf_in1k)|256     |83.87|96.75|93.2       |20.2 |43.4 |692    |\n|[seresnextaa101d_32x8d.ah_in1k](https://huggingface.co/timm/seresnextaa101d_32x8d.ah_in1k)|224     |83.86|96.65|93.6       |17.2 |34.2 |923    |\n|[resnetrs152.tf_in1k](https://huggingface.co/timm/resnetrs152.tf_in1k)|320     |83.72|96.61|86.6       |24.3 |48.1 |617    |\n|[seresnet152d.ra2_in1k](https://huggingface.co/timm/seresnet152d.ra2_in1k)|256     |83.69|96.78|66.8       |15.4 |30.6 |943    |\n|[seresnext101d_32x8d.ah_in1k](https://huggingface.co/timm/seresnext101d_32x8d.ah_in1k)|224     |83.68|96.61|93.6       |16.7 |32.0 |986    |\n|[resnet152d.ra2_in1k](https://huggingface.co/timm/resnet152d.ra2_in1k)|320     |83.67|96.74|60.2       |24.1 |47.7 |706    |\n|[resnetrs270.tf_in1k](https://huggingface.co/timm/resnetrs270.tf_in1k)|256     |83.59|96.61|129.9      |27.1 |55.8 |526    |\n|[seresnext101_32x8d.ah_in1k](https://huggingface.co/timm/seresnext101_32x8d.ah_in1k)|224     |83.58|96.4 |93.6       |16.5 |31.2 |1013   |\n|[resnetaa101d.sw_in12k_ft_in1k](https://huggingface.co/timm/resnetaa101d.sw_in12k_ft_in1k)|224     |83.54|96.83|44.6       |9.1  |17.6 |1864   |\n|[resnet152.a1h_in1k](https://huggingface.co/timm/resnet152.a1h_in1k)|288     |83.46|96.54|60.2       |19.1 |37.3 |904    |\n|[resnext101_32x16d.fb_swsl_ig1b_ft_in1k](https://huggingface.co/timm/resnext101_32x16d.fb_swsl_ig1b_ft_in1k)|224     |83.35|96.85|194.0      |36.3 |51.2 |582    |\n|[resnet200d.ra2_in1k](https://huggingface.co/timm/resnet200d.ra2_in1k)|256     |83.23|96.53|64.7       |20.0 |43.1 |809    |\n|[resnext101_32x4d.fb_swsl_ig1b_ft_in1k](https://huggingface.co/timm/resnext101_32x4d.fb_swsl_ig1b_ft_in1k)|224     |83.22|96.75|44.2       |8.0  |21.2 |1814   |\n|[resnext101_64x4d.c1_in1k](https://huggingface.co/timm/resnext101_64x4d.c1_in1k)|288     |83.16|96.38|83.5       |25.7 |51.6 |590    |\n|[resnet152d.ra2_in1k](https://huggingface.co/timm/resnet152d.ra2_in1k)|256     |83.14|96.38|60.2       |15.4 |30.5 |1096   |\n|[resnet101d.ra2_in1k](https://huggingface.co/timm/resnet101d.ra2_in1k)|320     |83.02|96.45|44.6       |16.5 |34.8 |992    |\n|[ecaresnet101d.miil_in1k](https://huggingface.co/timm/ecaresnet101d.miil_in1k)|288     |82.98|96.54|44.6       |13.4 |28.2 |1077   |\n|[resnext101_64x4d.tv_in1k](https://huggingface.co/timm/resnext101_64x4d.tv_in1k)|224     |82.98|96.25|83.5       |15.5 |31.2 |989    |\n|[resnetrs152.tf_in1k](https://huggingface.co/timm/resnetrs152.tf_in1k)|256     |82.86|96.28|86.6       |15.6 |30.8 |951    |\n|[resnext101_32x8d.tv2_in1k](https://huggingface.co/timm/resnext101_32x8d.tv2_in1k)|224     |82.83|96.22|88.8       |16.5 |31.2 |1099   |\n|[resnet152.a1h_in1k](https://huggingface.co/timm/resnet152.a1h_in1k)|224     |82.8 |96.13|60.2       |11.6 |22.6 |1486   |\n|[resnet101.a1h_in1k](https://huggingface.co/timm/resnet101.a1h_in1k)|288     |82.8 |96.32|44.6       |13.0 |26.8 |1291   |\n|[resnet152.a1_in1k](https://huggingface.co/timm/resnet152.a1_in1k)|288     |82.74|95.71|60.2       |19.1 |37.3 |905    |\n|[resnext101_32x8d.fb_wsl_ig1b_ft_in1k](https://huggingface.co/timm/resnext101_32x8d.fb_wsl_ig1b_ft_in1k)|224     |82.69|96.63|88.8       |16.5 |31.2 |1100   |\n|[resnet152.a2_in1k](https://huggingface.co/timm/resnet152.a2_in1k)|288     |82.62|95.75|60.2       |19.1 |37.3 |904    |\n|[resnetaa50d.sw_in12k_ft_in1k](https://huggingface.co/timm/resnetaa50d.sw_in12k_ft_in1k)|288     |82.61|96.49|25.6       |8.9  |20.6 |1729   |\n|[resnet61q.ra2_in1k](https://huggingface.co/timm/resnet61q.ra2_in1k)|288     |82.53|96.13|36.8       |9.9  |21.5 |1773   |\n|[wide_resnet101_2.tv2_in1k](https://huggingface.co/timm/wide_resnet101_2.tv2_in1k)|224     |82.5 |96.02|126.9      |22.8 |21.2 |1078   |\n|[resnext101_64x4d.c1_in1k](https://huggingface.co/timm/resnext101_64x4d.c1_in1k)|224     |82.46|95.92|83.5       |15.5 |31.2 |987    |\n|[resnet51q.ra2_in1k](https://huggingface.co/timm/resnet51q.ra2_in1k)|288     |82.36|96.18|35.7       |8.1  |20.9 |1964   |\n|[ecaresnet50t.ra2_in1k](https://huggingface.co/timm/ecaresnet50t.ra2_in1k)|320     |82.35|96.14|25.6       |8.8  |24.1 |1386   |\n|[resnet101.a1_in1k](https://huggingface.co/timm/resnet101.a1_in1k)|288     |82.31|95.63|44.6       |13.0 |26.8 |1291   |\n|[resnetrs101.tf_in1k](https://huggingface.co/timm/resnetrs101.tf_in1k)|288     |82.29|96.01|63.6       |13.6 |28.5 |1078   |\n|[resnet152.tv2_in1k](https://huggingface.co/timm/resnet152.tv2_in1k)|224     |82.29|96.0 |60.2       |11.6 |22.6 |1484   |\n|[wide_resnet50_2.racm_in1k](https://huggingface.co/timm/wide_resnet50_2.racm_in1k)|288     |82.27|96.06|68.9       |18.9 |23.8 |1176   |\n|[resnet101d.ra2_in1k](https://huggingface.co/timm/resnet101d.ra2_in1k)|256     |82.26|96.07|44.6       |10.6 |22.2 |1542   |\n|[resnet101.a2_in1k](https://huggingface.co/timm/resnet101.a2_in1k)|288     |82.24|95.73|44.6       |13.0 |26.8 |1290   |\n|[seresnext50_32x4d.racm_in1k](https://huggingface.co/timm/seresnext50_32x4d.racm_in1k)|288     |82.2 |96.14|27.6       |7.0  |23.8 |1547   |\n|[ecaresnet101d.miil_in1k](https://huggingface.co/timm/ecaresnet101d.miil_in1k)|224     |82.18|96.05|44.6       |8.1  |17.1 |1771   |\n|[resnext50_32x4d.fb_swsl_ig1b_ft_in1k](https://huggingface.co/timm/resnext50_32x4d.fb_swsl_ig1b_ft_in1k)|224     |82.17|96.22|25.0       |4.3  |14.4 |2943   |\n|[ecaresnet50t.a1_in1k](https://huggingface.co/timm/ecaresnet50t.a1_in1k)|288     |82.12|95.65|25.6       |7.1  |19.6 |1704   |\n|[resnext50_32x4d.a1h_in1k](https://huggingface.co/timm/resnext50_32x4d.a1h_in1k)|288     |82.03|95.94|25.0       |7.0  |23.8 |1745   |\n|[ecaresnet101d_pruned.miil_in1k](https://huggingface.co/timm/ecaresnet101d_pruned.miil_in1k)|288     |82.0 |96.15|24.9       |5.8  |12.7 |1787   |\n|[resnet61q.ra2_in1k](https://huggingface.co/timm/resnet61q.ra2_in1k)|256     |81.99|95.85|36.8       |7.8  |17.0 |2230   |\n|[resnext101_32x8d.tv2_in1k](https://huggingface.co/timm/resnext101_32x8d.tv2_in1k)|176     |81.98|95.72|88.8       |10.3 |19.4 |1768   |\n|[resnet152.a1_in1k](https://huggingface.co/timm/resnet152.a1_in1k)|224     |81.97|95.24|60.2       |11.6 |22.6 |1486   |\n|[resnet101.a1h_in1k](https://huggingface.co/timm/resnet101.a1h_in1k)|224     |81.93|95.75|44.6       |7.8  |16.2 |2122   |\n|[resnet101.tv2_in1k](https://huggingface.co/timm/resnet101.tv2_in1k)|224     |81.9 |95.77|44.6       |7.8  |16.2 |2118   |\n|[resnext101_32x16d.fb_ssl_yfcc100m_ft_in1k](https://huggingface.co/timm/resnext101_32x16d.fb_ssl_yfcc100m_ft_in1k)|224     |81.84|96.1 |194.0      |36.3 |51.2 |583    |\n|[resnet51q.ra2_in1k](https://huggingface.co/timm/resnet51q.ra2_in1k)|256     |81.78|95.94|35.7       |6.4  |16.6 |2471   |\n|[resnet152.a2_in1k](https://huggingface.co/timm/resnet152.a2_in1k)|224     |81.77|95.22|60.2       |11.6 |22.6 |1485   |\n|[resnetaa50d.sw_in12k_ft_in1k](https://huggingface.co/timm/resnetaa50d.sw_in12k_ft_in1k)|224     |81.74|96.06|25.6       |5.4  |12.4 |2813   |\n|[ecaresnet50t.a2_in1k](https://huggingface.co/timm/ecaresnet50t.a2_in1k)|288     |81.65|95.54|25.6       |7.1  |19.6 |1703   |\n|[ecaresnet50d.miil_in1k](https://huggingface.co/timm/ecaresnet50d.miil_in1k)|288     |81.64|95.88|25.6       |7.2  |19.7 |1694   |\n|[resnext101_32x8d.fb_ssl_yfcc100m_ft_in1k](https://huggingface.co/timm/resnext101_32x8d.fb_ssl_yfcc100m_ft_in1k)|224     |81.62|96.04|88.8       |16.5 |31.2 |1101   |\n|[wide_resnet50_2.tv2_in1k](https://huggingface.co/timm/wide_resnet50_2.tv2_in1k)|224     |81.61|95.76|68.9       |11.4 |14.4 |1930   |\n|[resnetaa50.a1h_in1k](https://huggingface.co/timm/resnetaa50.a1h_in1k)|288     |81.61|95.83|25.6       |8.5  |19.2 |1868   |\n|[resnet101.a1_in1k](https://huggingface.co/timm/resnet101.a1_in1k)|224     |81.5 |95.16|44.6       |7.8  |16.2 |2125   |\n|[resnext50_32x4d.a1_in1k](https://huggingface.co/timm/resnext50_32x4d.a1_in1k)|288     |81.48|95.16|25.0       |7.0  |23.8 |1745   |\n|[gcresnet50t.ra2_in1k](https://huggingface.co/timm/gcresnet50t.ra2_in1k)|288     |81.47|95.71|25.9       |6.9  |18.6 |2071   |\n|[wide_resnet50_2.racm_in1k](https://huggingface.co/timm/wide_resnet50_2.racm_in1k)|224     |81.45|95.53|68.9       |11.4 |14.4 |1929   |\n|[resnet50d.a1_in1k](https://huggingface.co/timm/resnet50d.a1_in1k)|288     |81.44|95.22|25.6       |7.2  |19.7 |1908   |\n|[ecaresnet50t.ra2_in1k](https://huggingface.co/timm/ecaresnet50t.ra2_in1k)|256     |81.44|95.67|25.6       |5.6  |15.4 |2168   |\n|[ecaresnetlight.miil_in1k](https://huggingface.co/timm/ecaresnetlight.miil_in1k)|288     |81.4 |95.82|30.2       |6.8  |13.9 |2132   |\n|[resnet50d.ra2_in1k](https://huggingface.co/timm/resnet50d.ra2_in1k)|288     |81.37|95.74|25.6       |7.2  |19.7 |1910   |\n|[resnet101.a2_in1k](https://huggingface.co/timm/resnet101.a2_in1k)|224     |81.32|95.19|44.6       |7.8  |16.2 |2125   |\n|[seresnet50.ra2_in1k](https://huggingface.co/timm/seresnet50.ra2_in1k)|288     |81.3 |95.65|28.1       |6.8  |18.4 |1803   |\n|[resnext50_32x4d.a2_in1k](https://huggingface.co/timm/resnext50_32x4d.a2_in1k)|288     |81.3 |95.11|25.0       |7.0  |23.8 |1746   |\n|[seresnext50_32x4d.racm_in1k](https://huggingface.co/timm/seresnext50_32x4d.racm_in1k)|224     |81.27|95.62|27.6       |4.3  |14.4 |2591   |\n|[ecaresnet50t.a1_in1k](https://huggingface.co/timm/ecaresnet50t.a1_in1k)|224     |81.26|95.16|25.6       |4.3  |11.8 |2823   |\n|[gcresnext50ts.ch_in1k](https://huggingface.co/timm/gcresnext50ts.ch_in1k)|288     |81.23|95.54|15.7       |4.8  |19.6 |2117   |\n|[senet154.gluon_in1k](https://huggingface.co/timm/senet154.gluon_in1k)|224     |81.23|95.35|115.1      |20.8 |38.7 |545    |\n|[resnet50.a1_in1k](https://huggingface.co/timm/resnet50.a1_in1k)|288     |81.22|95.11|25.6       |6.8  |18.4 |2089   |\n|[resnet50_gn.a1h_in1k](https://huggingface.co/timm/resnet50_gn.a1h_in1k)|288     |81.22|95.63|25.6       |6.8  |18.4 |676    |\n|[resnet50d.a2_in1k](https://huggingface.co/timm/resnet50d.a2_in1k)|288     |81.18|95.09|25.6       |7.2  |19.7 |1908   |\n|[resnet50.fb_swsl_ig1b_ft_in1k](https://huggingface.co/timm/resnet50.fb_swsl_ig1b_ft_in1k)|224     |81.18|95.98|25.6       |4.1  |11.1 |3455   |\n|[resnext50_32x4d.tv2_in1k](https://huggingface.co/timm/resnext50_32x4d.tv2_in1k)|224     |81.17|95.34|25.0       |4.3  |14.4 |2933   |\n|[resnext50_32x4d.a1h_in1k](https://huggingface.co/timm/resnext50_32x4d.a1h_in1k)|224     |81.1 |95.33|25.0       |4.3  |14.4 |2934   |\n|[seresnet50.a2_in1k](https://huggingface.co/timm/seresnet50.a2_in1k)|288     |81.1 |95.23|28.1       |6.8  |18.4 |1801   |\n|[seresnet50.a1_in1k](https://huggingface.co/timm/seresnet50.a1_in1k)|288     |81.1 |95.12|28.1       |6.8  |18.4 |1799   |\n|[resnet152s.gluon_in1k](https://huggingface.co/timm/resnet152s.gluon_in1k)|224     |81.02|95.41|60.3       |12.9 |25.0 |1347   |\n|[resnet50.d_in1k](https://huggingface.co/timm/resnet50.d_in1k)|288     |80.97|95.44|25.6       |6.8  |18.4 |2085   |\n|[gcresnet50t.ra2_in1k](https://huggingface.co/timm/gcresnet50t.ra2_in1k)|256     |80.94|95.45|25.9       |5.4  |14.7 |2571   |\n|[resnext101_32x4d.fb_ssl_yfcc100m_ft_in1k](https://huggingface.co/timm/resnext101_32x4d.fb_ssl_yfcc100m_ft_in1k)|224     |80.93|95.73|44.2       |8.0  |21.2 |1814   |\n|[resnet50.c1_in1k](https://huggingface.co/timm/resnet50.c1_in1k)|288     |80.91|95.55|25.6       |6.8  |18.4 |2084   |\n|[seresnext101_32x4d.gluon_in1k](https://huggingface.co/timm/seresnext101_32x4d.gluon_in1k)|224     |80.9 |95.31|49.0       |8.0  |21.3 |1585   |\n|[seresnext101_64x4d.gluon_in1k](https://huggingface.co/timm/seresnext101_64x4d.gluon_in1k)|224     |80.9 |95.3 |88.2       |15.5 |31.2 |918    |\n|[resnet50.c2_in1k](https://huggingface.co/timm/resnet50.c2_in1k)|288     |80.86|95.52|25.6       |6.8  |18.4 |2085   |\n|[resnet50.tv2_in1k](https://huggingface.co/timm/resnet50.tv2_in1k)|224     |80.85|95.43|25.6       |4.1  |11.1 |3450   |\n|[ecaresnet50t.a2_in1k](https://huggingface.co/timm/ecaresnet50t.a2_in1k)|224     |80.84|95.02|25.6       |4.3  |11.8 |2821   |\n|[ecaresnet101d_pruned.miil_in1k](https://huggingface.co/timm/ecaresnet101d_pruned.miil_in1k)|224     |80.79|95.62|24.9       |3.5  |7.7  |2961   |\n|[seresnet33ts.ra2_in1k](https://huggingface.co/timm/seresnet33ts.ra2_in1k)|288     |80.79|95.36|19.8       |6.0  |14.8 |2506   |\n|[ecaresnet50d_pruned.miil_in1k](https://huggingface.co/timm/ecaresnet50d_pruned.miil_in1k)|288     |80.79|95.58|19.9       |4.2  |10.6 |2349   |\n|[resnet50.a2_in1k](https://huggingface.co/timm/resnet50.a2_in1k)|288     |80.78|94.99|25.6       |6.8  |18.4 |2088   |\n|[resnet50.b1k_in1k](https://huggingface.co/timm/resnet50.b1k_in1k)|288     |80.71|95.43|25.6       |6.8  |18.4 |2087   |\n|[resnext50_32x4d.ra_in1k](https://huggingface.co/timm/resnext50_32x4d.ra_in1k)|288     |80.7 |95.39|25.0       |7.0  |23.8 |1749   |\n|[resnetrs101.tf_in1k](https://huggingface.co/timm/resnetrs101.tf_in1k)|192     |80.69|95.24|63.6       |6.0  |12.7 |2270   |\n|[resnet50d.a1_in1k](https://huggingface.co/timm/resnet50d.a1_in1k)|224     |80.68|94.71|25.6       |4.4  |11.9 |3162   |\n|[eca_resnet33ts.ra2_in1k](https://huggingface.co/timm/eca_resnet33ts.ra2_in1k)|288     |80.68|95.36|19.7       |6.0  |14.8 |2637   |\n|[resnet50.a1h_in1k](https://huggingface.co/timm/resnet50.a1h_in1k)|224     |80.67|95.3 |25.6       |4.1  |11.1 |3452   |\n|[resnext50d_32x4d.bt_in1k](https://huggingface.co/timm/resnext50d_32x4d.bt_in1k)|288     |80.67|95.42|25.0       |7.4  |25.1 |1626   |\n|[resnetaa50.a1h_in1k](https://huggingface.co/timm/resnetaa50.a1h_in1k)|224     |80.63|95.21|25.6       |5.2  |11.6 |3034   |\n|[ecaresnet50d.miil_in1k](https://huggingface.co/timm/ecaresnet50d.miil_in1k)|224     |80.61|95.32|25.6       |4.4  |11.9 |2813   |\n|[resnext101_64x4d.gluon_in1k](https://huggingface.co/timm/resnext101_64x4d.gluon_in1k)|224     |80.61|94.99|83.5       |15.5 |31.2 |989    |\n|[gcresnet33ts.ra2_in1k](https://huggingface.co/timm/gcresnet33ts.ra2_in1k)|288     |80.6 |95.31|19.9       |6.0  |14.8 |2578   |\n|[gcresnext50ts.ch_in1k](https://huggingface.co/timm/gcresnext50ts.ch_in1k)|256     |80.57|95.17|15.7       |3.8  |15.5 |2710   |\n|[resnet152.a3_in1k](https://huggingface.co/timm/resnet152.a3_in1k)|224     |80.56|95.0 |60.2       |11.6 |22.6 |1483   |\n|[resnet50d.ra2_in1k](https://huggingface.co/timm/resnet50d.ra2_in1k)|224     |80.53|95.16|25.6       |4.4  |11.9 |3164   |\n|[resnext50_32x4d.a1_in1k](https://huggingface.co/timm/resnext50_32x4d.a1_in1k)|224     |80.53|94.46|25.0       |4.3  |14.4 |2930   |\n|[wide_resnet101_2.tv2_in1k](https://huggingface.co/timm/wide_resnet101_2.tv2_in1k)|176     |80.48|94.98|126.9      |14.3 |13.2 |1719   |\n|[resnet152d.gluon_in1k](https://huggingface.co/timm/resnet152d.gluon_in1k)|224     |80.47|95.2 |60.2       |11.8 |23.4 |1428   |\n|[resnet50.b2k_in1k](https://huggingface.co/timm/resnet50.b2k_in1k)|288     |80.45|95.32|25.6       |6.8  |18.4 |2086   |\n|[ecaresnetlight.miil_in1k](https://huggingface.co/timm/ecaresnetlight.miil_in1k)|224     |80.45|95.24|30.2       |4.1  |8.4  |3530   |\n|[resnext50_32x4d.a2_in1k](https://huggingface.co/timm/resnext50_32x4d.a2_in1k)|224     |80.45|94.63|25.0       |4.3  |14.4 |2936   |\n|[wide_resnet50_2.tv2_in1k](https://huggingface.co/timm/wide_resnet50_2.tv2_in1k)|176     |80.43|95.09|68.9       |7.3  |9.0  |3015   |\n|[resnet101d.gluon_in1k](https://huggingface.co/timm/resnet101d.gluon_in1k)|224     |80.42|95.01|44.6       |8.1  |17.0 |2007   |\n|[resnet50.a1_in1k](https://huggingface.co/timm/resnet50.a1_in1k)|224     |80.38|94.6 |25.6       |4.1  |11.1 |3461   |\n|[seresnet33ts.ra2_in1k](https://huggingface.co/timm/seresnet33ts.ra2_in1k)|256     |80.36|95.1 |19.8       |4.8  |11.7 |3267   |\n|[resnext101_32x4d.gluon_in1k](https://huggingface.co/timm/resnext101_32x4d.gluon_in1k)|224     |80.34|94.93|44.2       |8.0  |21.2 |1814   |\n|[resnext50_32x4d.fb_ssl_yfcc100m_ft_in1k](https://huggingface.co/timm/resnext50_32x4d.fb_ssl_yfcc100m_ft_in1k)|224     |80.32|95.4 |25.0       |4.3  |14.4 |2941   |\n|[resnet101s.gluon_in1k](https://huggingface.co/timm/resnet101s.gluon_in1k)|224     |80.28|95.16|44.7       |9.2  |18.6 |1851   |\n|[seresnet50.ra2_in1k](https://huggingface.co/timm/seresnet50.ra2_in1k)|224     |80.26|95.08|28.1       |4.1  |11.1 |2972   |\n|[resnetblur50.bt_in1k](https://huggingface.co/timm/resnetblur50.bt_in1k)|288     |80.24|95.24|25.6       |8.5  |19.9 |1523   |\n|[resnet50d.a2_in1k](https://huggingface.co/timm/resnet50d.a2_in1k)|224     |80.22|94.63|25.6       |4.4  |11.9 |3162   |\n|[resnet152.tv2_in1k](https://huggingface.co/timm/resnet152.tv2_in1k)|176     |80.2 |94.64|60.2       |7.2  |14.0 |2346   |\n|[seresnet50.a2_in1k](https://huggingface.co/timm/seresnet50.a2_in1k)|224     |80.08|94.74|28.1       |4.1  |11.1 |2969   |\n|[eca_resnet33ts.ra2_in1k](https://huggingface.co/timm/eca_resnet33ts.ra2_in1k)|256     |80.08|94.97|19.7       |4.8  |11.7 |3284   |\n|[gcresnet33ts.ra2_in1k](https://huggingface.co/timm/gcresnet33ts.ra2_in1k)|256     |80.06|94.99|19.9       |4.8  |11.7 |3216   |\n|[resnet50_gn.a1h_in1k](https://huggingface.co/timm/resnet50_gn.a1h_in1k)|224     |80.06|94.95|25.6       |4.1  |11.1 |1109   |\n|[seresnet50.a1_in1k](https://huggingface.co/timm/seresnet50.a1_in1k)|224     |80.02|94.71|28.1       |4.1  |11.1 |2962   |\n|[resnet50.ram_in1k](https://huggingface.co/timm/resnet50.ram_in1k)|288     |79.97|95.05|25.6       |6.8  |18.4 |2086   |\n|[resnet152c.gluon_in1k](https://huggingface.co/timm/resnet152c.gluon_in1k)|224     |79.92|94.84|60.2       |11.8 |23.4 |1455   |\n|[seresnext50_32x4d.gluon_in1k](https://huggingface.co/timm/seresnext50_32x4d.gluon_in1k)|224     |79.91|94.82|27.6       |4.3  |14.4 |2591   |\n|[resnet50.d_in1k](https://huggingface.co/timm/resnet50.d_in1k)|224     |79.91|94.67|25.6       |4.1  |11.1 |3456   |\n|[resnet101.tv2_in1k](https://huggingface.co/timm/resnet101.tv2_in1k)|176     |79.9 |94.6 |44.6       |4.9  |10.1 |3341   |\n|[resnetrs50.tf_in1k](https://huggingface.co/timm/resnetrs50.tf_in1k)|224     |79.89|94.97|35.7       |4.5  |12.1 |2774   |\n|[resnet50.c2_in1k](https://huggingface.co/timm/resnet50.c2_in1k)|224     |79.88|94.87|25.6       |4.1  |11.1 |3455   |\n|[ecaresnet26t.ra2_in1k](https://huggingface.co/timm/ecaresnet26t.ra2_in1k)|320     |79.86|95.07|16.0       |5.2  |16.4 |2168   |\n|[resnet50.a2_in1k](https://huggingface.co/timm/resnet50.a2_in1k)|224     |79.85|94.56|25.6       |4.1  |11.1 |3460   |\n|[resnet50.ra_in1k](https://huggingface.co/timm/resnet50.ra_in1k)|288     |79.83|94.97|25.6       |6.8  |18.4 |2087   |\n|[resnet101.a3_in1k](https://huggingface.co/timm/resnet101.a3_in1k)|224     |79.82|94.62|44.6       |7.8  |16.2 |2114   |\n|[resnext50_32x4d.ra_in1k](https://huggingface.co/timm/resnext50_32x4d.ra_in1k)|224     |79.76|94.6 |25.0       |4.3  |14.4 |2943   |\n|[resnet50.c1_in1k](https://huggingface.co/timm/resnet50.c1_in1k)|224     |79.74|94.95|25.6       |4.1  |11.1 |3455   |\n|[ecaresnet50d_pruned.miil_in1k](https://huggingface.co/timm/ecaresnet50d_pruned.miil_in1k)|224     |79.74|94.87|19.9       |2.5  |6.4  |3929   |\n|[resnet33ts.ra2_in1k](https://huggingface.co/timm/resnet33ts.ra2_in1k)|288     |79.71|94.83|19.7       |6.0  |14.8 |2710   |\n|[resnet152.gluon_in1k](https://huggingface.co/timm/resnet152.gluon_in1k)|224     |79.68|94.74|60.2       |11.6 |22.6 |1486   |\n|[resnext50d_32x4d.bt_in1k](https://huggingface.co/timm/resnext50d_32x4d.bt_in1k)|224     |79.67|94.87|25.0       |4.5  |15.2 |2729   |\n|[resnet50.bt_in1k](https://huggingface.co/timm/resnet50.bt_in1k)|288     |79.63|94.91|25.6       |6.8  |18.4 |2086   |\n|[ecaresnet50t.a3_in1k](https://huggingface.co/timm/ecaresnet50t.a3_in1k)|224     |79.56|94.72|25.6       |4.3  |11.8 |2805   |\n|[resnet101c.gluon_in1k](https://huggingface.co/timm/resnet101c.gluon_in1k)|224     |79.53|94.58|44.6       |8.1  |17.0 |2062   |\n|[resnet50.b1k_in1k](https://huggingface.co/timm/resnet50.b1k_in1k)|224     |79.52|94.61|25.6       |4.1  |11.1 |3459   |\n|[resnet50.tv2_in1k](https://huggingface.co/timm/resnet50.tv2_in1k)|176     |79.42|94.64|25.6       |2.6  |6.9  |5397   |\n|[resnet32ts.ra2_in1k](https://huggingface.co/timm/resnet32ts.ra2_in1k)|288     |79.4 |94.66|18.0       |5.9  |14.6 |2752   |\n|[resnet50.b2k_in1k](https://huggingface.co/timm/resnet50.b2k_in1k)|224     |79.38|94.57|25.6       |4.1  |11.1 |3459   |\n|[resnext50_32x4d.tv2_in1k](https://huggingface.co/timm/resnext50_32x4d.tv2_in1k)|176     |79.37|94.3 |25.0       |2.7  |9.0  |4577   |\n|[resnext50_32x4d.gluon_in1k](https://huggingface.co/timm/resnext50_32x4d.gluon_in1k)|224     |79.36|94.43|25.0       |4.3  |14.4 |2942   |\n|[resnext101_32x8d.tv_in1k](https://huggingface.co/timm/resnext101_32x8d.tv_in1k)|224     |79.31|94.52|88.8       |16.5 |31.2 |1100   |\n|[resnet101.gluon_in1k](https://huggingface.co/timm/resnet101.gluon_in1k)|224     |79.31|94.53|44.6       |7.8  |16.2 |2125   |\n|[resnetblur50.bt_in1k](https://huggingface.co/timm/resnetblur50.bt_in1k)|224     |79.31|94.63|25.6       |5.2  |12.0 |2524   |\n|[resnet50.a1h_in1k](https://huggingface.co/timm/resnet50.a1h_in1k)|176     |79.27|94.49|25.6       |2.6  |6.9  |5404   |\n|[resnext50_32x4d.a3_in1k](https://huggingface.co/timm/resnext50_32x4d.a3_in1k)|224     |79.25|94.31|25.0       |4.3  |14.4 |2931   |\n|[resnet50.fb_ssl_yfcc100m_ft_in1k](https://huggingface.co/timm/resnet50.fb_ssl_yfcc100m_ft_in1k)|224     |79.22|94.84|25.6       |4.1  |11.1 |3451   |\n|[resnet33ts.ra2_in1k](https://huggingface.co/timm/resnet33ts.ra2_in1k)|256     |79.21|94.56|19.7       |4.8  |11.7 |3392   |\n|[resnet50d.gluon_in1k](https://huggingface.co/timm/resnet50d.gluon_in1k)|224     |79.07|94.48|25.6       |4.4  |11.9 |3162   |\n|[resnet50.ram_in1k](https://huggingface.co/timm/resnet50.ram_in1k)|224     |79.03|94.38|25.6       |4.1  |11.1 |3453   |\n|[resnet50.am_in1k](https://huggingface.co/timm/resnet50.am_in1k)|224     |79.01|94.39|25.6       |4.1  |11.1 |3461   |\n|[resnet32ts.ra2_in1k](https://huggingface.co/timm/resnet32ts.ra2_in1k)|256     |79.01|94.37|18.0       |4.6  |11.6 |3440   |\n|[ecaresnet26t.ra2_in1k](https://huggingface.co/timm/ecaresnet26t.ra2_in1k)|256     |78.9 |94.54|16.0       |3.4  |10.5 |3421   |\n|[resnet152.a3_in1k](https://huggingface.co/timm/resnet152.a3_in1k)|160     |78.89|94.11|60.2       |5.9  |11.5 |2745   |\n|[wide_resnet101_2.tv_in1k](https://huggingface.co/timm/wide_resnet101_2.tv_in1k)|224     |78.84|94.28|126.9      |22.8 |21.2 |1079   |\n|[seresnext26d_32x4d.bt_in1k](https://huggingface.co/timm/seresnext26d_32x4d.bt_in1k)|288     |78.83|94.24|16.8       |4.5  |16.8 |2251   |\n|[resnet50.ra_in1k](https://huggingface.co/timm/resnet50.ra_in1k)|224     |78.81|94.32|25.6       |4.1  |11.1 |3454   |\n|[seresnext26t_32x4d.bt_in1k](https://huggingface.co/timm/seresnext26t_32x4d.bt_in1k)|288     |78.74|94.33|16.8       |4.5  |16.7 |2264   |\n|[resnet50s.gluon_in1k](https://huggingface.co/timm/resnet50s.gluon_in1k)|224     |78.72|94.23|25.7       |5.5  |13.5 |2796   |\n|[resnet50d.a3_in1k](https://huggingface.co/timm/resnet50d.a3_in1k)|224     |78.71|94.24|25.6       |4.4  |11.9 |3154   |\n|[wide_resnet50_2.tv_in1k](https://huggingface.co/timm/wide_resnet50_2.tv_in1k)|224     |78.47|94.09|68.9       |11.4 |14.4 |1934   |\n|[resnet50.bt_in1k](https://huggingface.co/timm/resnet50.bt_in1k)|224     |78.46|94.27|25.6       |4.1  |11.1 |3454   |\n|[resnet34d.ra2_in1k](https://huggingface.co/timm/resnet34d.ra2_in1k)|288     |78.43|94.35|21.8       |6.5  |7.5  |3291   |\n|[gcresnext26ts.ch_in1k](https://huggingface.co/timm/gcresnext26ts.ch_in1k)|288     |78.42|94.04|10.5       |3.1  |13.3 |3226   |\n|[resnet26t.ra2_in1k](https://huggingface.co/timm/resnet26t.ra2_in1k)|320     |78.33|94.13|16.0       |5.2  |16.4 |2391   |\n|[resnet152.tv_in1k](https://huggingface.co/timm/resnet152.tv_in1k)|224     |78.32|94.04|60.2       |11.6 |22.6 |1487   |\n|[seresnext26ts.ch_in1k](https://huggingface.co/timm/seresnext26ts.ch_in1k)|288     |78.28|94.1 |10.4       |3.1  |13.3 |3062   |\n|[bat_resnext26ts.ch_in1k](https://huggingface.co/timm/bat_resnext26ts.ch_in1k)|256     |78.25|94.1 |10.7       |2.5  |12.5 |3393   |\n|[resnet50.a3_in1k](https://huggingface.co/timm/resnet50.a3_in1k)|224     |78.06|93.78|25.6       |4.1  |11.1 |3450   |\n|[resnet50c.gluon_in1k](https://huggingface.co/timm/resnet50c.gluon_in1k)|224     |78.0 |93.99|25.6       |4.4  |11.9 |3286   |\n|[eca_resnext26ts.ch_in1k](https://huggingface.co/timm/eca_resnext26ts.ch_in1k)|288     |78.0 |93.91|10.3       |3.1  |13.3 |3297   |\n|[seresnext26t_32x4d.bt_in1k](https://huggingface.co/timm/seresnext26t_32x4d.bt_in1k)|224     |77.98|93.75|16.8       |2.7  |10.1 |3841   |\n|[resnet34.a1_in1k](https://huggingface.co/timm/resnet34.a1_in1k)|288     |77.92|93.77|21.8       |6.1  |6.2  |3609   |\n|[resnet101.a3_in1k](https://huggingface.co/timm/resnet101.a3_in1k)|160     |77.88|93.71|44.6       |4.0  |8.3  |3926   |\n|[resnet26t.ra2_in1k](https://huggingface.co/timm/resnet26t.ra2_in1k)|256     |77.87|93.84|16.0       |3.4  |10.5 |3772   |\n|[seresnext26ts.ch_in1k](https://huggingface.co/timm/seresnext26ts.ch_in1k)|256     |77.86|93.79|10.4       |2.4  |10.5 |4263   |\n|[resnetrs50.tf_in1k](https://huggingface.co/timm/resnetrs50.tf_in1k)|160     |77.82|93.81|35.7       |2.3  |6.2  |5238   |\n|[gcresnext26ts.ch_in1k](https://huggingface.co/timm/gcresnext26ts.ch_in1k)|256     |77.81|93.82|10.5       |2.4  |10.5 |4183   |\n|[ecaresnet50t.a3_in1k](https://huggingface.co/timm/ecaresnet50t.a3_in1k)|160     |77.79|93.6 |25.6       |2.2  |6.0  |5329   |\n|[resnext50_32x4d.a3_in1k](https://huggingface.co/timm/resnext50_32x4d.a3_in1k)|160     |77.73|93.32|25.0       |2.2  |7.4  |5576   |\n|[resnext50_32x4d.tv_in1k](https://huggingface.co/timm/resnext50_32x4d.tv_in1k)|224     |77.61|93.7 |25.0       |4.3  |14.4 |2944   |\n|[seresnext26d_32x4d.bt_in1k](https://huggingface.co/timm/seresnext26d_32x4d.bt_in1k)|224     |77.59|93.61|16.8       |2.7  |10.2 |3807   |\n|[resnet50.gluon_in1k](https://huggingface.co/timm/resnet50.gluon_in1k)|224     |77.58|93.72|25.6       |4.1  |11.1 |3455   |\n|[eca_resnext26ts.ch_in1k](https://huggingface.co/timm/eca_resnext26ts.ch_in1k)|256     |77.44|93.56|10.3       |2.4  |10.5 |4284   |\n|[resnet26d.bt_in1k](https://huggingface.co/timm/resnet26d.bt_in1k)|288     |77.41|93.63|16.0       |4.3  |13.5 |2907   |\n|[resnet101.tv_in1k](https://huggingface.co/timm/resnet101.tv_in1k)|224     |77.38|93.54|44.6       |7.8  |16.2 |2125   |\n|[resnet50d.a3_in1k](https://huggingface.co/timm/resnet50d.a3_in1k)|160     |77.22|93.27|25.6       |2.2  |6.1  |5982   |\n|[resnext26ts.ra2_in1k](https://huggingface.co/timm/resnext26ts.ra2_in1k)|288     |77.17|93.47|10.3       |3.1  |13.3 |3392   |\n|[resnet34.a2_in1k](https://huggingface.co/timm/resnet34.a2_in1k)|288     |77.15|93.27|21.8       |6.1  |6.2  |3615   |\n|[resnet34d.ra2_in1k](https://huggingface.co/timm/resnet34d.ra2_in1k)|224     |77.1 |93.37|21.8       |3.9  |4.5  |5436   |\n|[seresnet50.a3_in1k](https://huggingface.co/timm/seresnet50.a3_in1k)|224     |77.02|93.07|28.1       |4.1  |11.1 |2952   |\n|[resnext26ts.ra2_in1k](https://huggingface.co/timm/resnext26ts.ra2_in1k)|256     |76.78|93.13|10.3       |2.4  |10.5 |4410   |\n|[resnet26d.bt_in1k](https://huggingface.co/timm/resnet26d.bt_in1k)|224     |76.7 |93.17|16.0       |2.6  |8.2  |4859   |\n|[resnet34.bt_in1k](https://huggingface.co/timm/resnet34.bt_in1k)|288     |76.5 |93.35|21.8       |6.1  |6.2  |3617   |\n|[resnet34.a1_in1k](https://huggingface.co/timm/resnet34.a1_in1k)|224     |76.42|92.87|21.8       |3.7  |3.7  |5984   |\n|[resnet26.bt_in1k](https://huggingface.co/timm/resnet26.bt_in1k)|288     |76.35|93.18|16.0       |3.9  |12.2 |3331   |\n|[resnet50.tv_in1k](https://huggingface.co/timm/resnet50.tv_in1k)|224     |76.13|92.86|25.6       |4.1  |11.1 |3457   |\n|[resnet50.a3_in1k](https://huggingface.co/timm/resnet50.a3_in1k)|160     |75.96|92.5 |25.6       |2.1  |5.7  |6490   |\n|[resnet34.a2_in1k](https://huggingface.co/timm/resnet34.a2_in1k)|224     |75.52|92.44|21.8       |3.7  |3.7  |5991   |\n|[resnet26.bt_in1k](https://huggingface.co/timm/resnet26.bt_in1k)|224     |75.3 |92.58|16.0       |2.4  |7.4  |5583   |\n|[resnet34.bt_in1k](https://huggingface.co/timm/resnet34.bt_in1k)|224     |75.16|92.18|21.8       |3.7  |3.7  |5994   |\n|[seresnet50.a3_in1k](https://huggingface.co/timm/seresnet50.a3_in1k)|160     |75.1 |92.08|28.1       |2.1  |5.7  |5513   |\n|[resnet34.gluon_in1k](https://huggingface.co/timm/resnet34.gluon_in1k)|224     |74.57|91.98|21.8       |3.7  |3.7  |5984   |\n|[resnet18d.ra2_in1k](https://huggingface.co/timm/resnet18d.ra2_in1k)|288     |73.81|91.83|11.7       |3.4  |5.4  |5196   |\n|[resnet34.tv_in1k](https://huggingface.co/timm/resnet34.tv_in1k)|224     |73.32|91.42|21.8       |3.7  |3.7  |5979   |\n|[resnet18.fb_swsl_ig1b_ft_in1k](https://huggingface.co/timm/resnet18.fb_swsl_ig1b_ft_in1k)|224     |73.28|91.73|11.7       |1.8  |2.5  |10213  |\n|[resnet18.a1_in1k](https://huggingface.co/timm/resnet18.a1_in1k)|288     |73.16|91.03|11.7       |3.0  |4.1  |6050   |\n|[resnet34.a3_in1k](https://huggingface.co/timm/resnet34.a3_in1k)|224     |72.98|91.11|21.8       |3.7  |3.7  |5967   |\n|[resnet18.fb_ssl_yfcc100m_ft_in1k](https://huggingface.co/timm/resnet18.fb_ssl_yfcc100m_ft_in1k)|224     |72.6 |91.42|11.7       |1.8  |2.5  |10213  |\n|[resnet18.a2_in1k](https://huggingface.co/timm/resnet18.a2_in1k)|288     |72.37|90.59|11.7       |3.0  |4.1  |6051   |\n|[resnet14t.c3_in1k](https://huggingface.co/timm/resnet14t.c3_in1k)|224     |72.26|90.31|10.1       |1.7  |5.8  |7026   |\n|[resnet18d.ra2_in1k](https://huggingface.co/timm/resnet18d.ra2_in1k)|224     |72.26|90.68|11.7       |2.1  |3.3  |8707   |\n|[resnet18.a1_in1k](https://huggingface.co/timm/resnet18.a1_in1k)|224     |71.49|90.07|11.7       |1.8  |2.5  |10187  |\n|[resnet14t.c3_in1k](https://huggingface.co/timm/resnet14t.c3_in1k)|176     |71.31|89.69|10.1       |1.1  |3.6  |10970  |\n|[resnet18.gluon_in1k](https://huggingface.co/timm/resnet18.gluon_in1k)|224     |70.84|89.76|11.7       |1.8  |2.5  |10210  |\n|[resnet18.a2_in1k](https://huggingface.co/timm/resnet18.a2_in1k)|224     |70.64|89.47|11.7       |1.8  |2.5  |10194  |\n|[resnet34.a3_in1k](https://huggingface.co/timm/resnet34.a3_in1k)|160     |70.56|89.52|21.8       |1.9  |1.9  |10737  |\n|[resnet18.tv_in1k](https://huggingface.co/timm/resnet18.tv_in1k)|224     |69.76|89.07|11.7       |1.8  |2.5  |10205  |\n|[resnet10t.c3_in1k](https://huggingface.co/timm/resnet10t.c3_in1k)|224     |68.34|88.03|5.4        |1.1  |2.4  |13079  |\n|[resnet18.a3_in1k](https://huggingface.co/timm/resnet18.a3_in1k)|224     |68.25|88.17|11.7       |1.8  |2.5  |10167  |\n|[resnet10t.c3_in1k](https://huggingface.co/timm/resnet10t.c3_in1k)|176     |66.71|86.96|5.4        |0.7  |1.5  |20327  |\n|[resnet18.a3_in1k](https://huggingface.co/timm/resnet18.a3_in1k)|160     |65.66|86.26|11.7       |0.9  |1.3  |18229  |\n\n## Citation\n```bibtex\n@inproceedings{wightman2021resnet,\n  title={ResNet strikes back: An improved training procedure in timm},\n  author={Wightman, Ross and Touvron, Hugo and Jegou, Herve},\n  booktitle={NeurIPS 2021 Workshop on ImageNet: Past, Present, and Future}\n}\n```\n```bibtex\n@misc{rw2019timm,\n  author = {Ross Wightman},\n  title = {PyTorch Image Models},\n  year = {2019},\n  publisher = {GitHub},\n  journal = {GitHub repository},\n  doi = {10.5281/zenodo.4414861},\n  howpublished = {\\url{https://github.com/huggingface/pytorch-image-models}}\n}\n```\n```bibtex\n@article{He2015,\n  author = {Kaiming He and Xiangyu Zhang and Shaoqing Ren and Jian Sun},\n  title = {Deep Residual Learning for Image Recognition},\n  journal = {arXiv preprint arXiv:1512.03385},\n  year = {2015}\n}\n```",
              "extracted_code": "from urllib.request import urlopen\nfrom PIL import Image\nimport timm\n\nimg = Image.open(urlopen(\n    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'\n))\n\nmodel = timm.create_model('resnet18.a1_in1k', pretrained=True)\nmodel = model.eval()\n\n# get model specific transforms (normalization, resize)\ndata_config = timm.data.resolve_model_data_config(model)\ntransforms = timm.data.create_transform(**data_config, is_training=False)\n\noutput = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1\n\ntop5_probabilities, top5_class_indices = torch.topk(output.softmax(dim=1) * 100, k=5)\n\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\n\nimg = Image.open(urlopen(\n    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'\n))\n\nmodel = timm.create_model(\n    'resnet18.a1_in1k',\n    pretrained=True,\n    features_only=True,\n)\nmodel = model.eval()\n\n# get model specific transforms (normalization, resize)\ndata_config = timm.data.resolve_model_data_config(model)\ntransforms = timm.data.create_transform(**data_config, is_training=False)\n\noutput = model(transforms(img).unsqueeze(0))  # unsqueeze single image into batch of 1\n\nfor o in output:\n    # print shape of each feature map in output\n    # e.g.:\n    #  torch.Size([1, 64, 112, 112])\n    #  torch.Size([1, 64, 56, 56])\n    #  torch.Size([1, 128, 28, 28])\n    #  torch.Size([1, 256, 14, 14])\n    #  torch.Size([1, 512, 7, 7])\n\n    print(o.shape)\n\nfrom urllib.request import urlopen\nfrom PIL import Image\nimport timm\n\nimg = Image.open(urlopen(\n    'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/beignets-task-guide.png'\n))\n\nmodel = timm.create_model(\n    'resnet18.a1_in1k',\n    pretrained=True,\n    num_classes=0,  # remove classifier nn.Linear\n)\nmodel = model.eval()\n\n# get model specific transforms (normalization, resize)\ndata_config = timm.data.resolve_model_data_config(model)\ntransforms = timm.data.create_transform(**data_config, is_training=False)\n\noutput = model(transforms(img).unsqueeze(0))  # output is (batch_size, num_features) shaped tensor\n\n# or equivalently (without needing to set num_classes=0)\n\noutput = model.forward_features(transforms(img).unsqueeze(0))\n# output is unpooled, a (1, 512, 7, 7) shaped tensor\n\noutput = model.forward_head(output, pre_logits=True)\n# output is a (1, num_features) shaped tensor"
            }
          ],
          "datasets": []
        }
      },
      "experiment_code": {
        "train_py": "import math\nimport os\nfrom pathlib import Path\nfrom typing import Any, Dict, List\n\nimport hydra\nimport optuna\nimport torch\nimport torch.nn.functional as F  # noqa: F401 – kept for potential extensions\nimport wandb\nfrom omegaconf import DictConfig, OmegaConf\nfrom tqdm import tqdm\n\nfrom src.model import build_model, enable_bn_adaptation\nfrom src.preprocess import build_dataloader\n\n########################################################################################################################\n# Environment & helpers\n########################################################################################################################\n\nos.environ.setdefault(\"WANDB_CACHE_DIR\", \".cache/\")\nos.environ.setdefault(\"TORCH_HOME\", \".cache/\")  # timm & torch hub cache\n\n\ndef set_seed(seed: int) -> None:\n    \"\"\"Deterministic behaviour for reproducibility.\"\"\"\n    import random\n    import numpy as np\n\n    random.seed(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n\n\ndef entropy(p: torch.Tensor) -> torch.Tensor:  # p already softmax\n    eps = 1e-8\n    return -(p * (p + eps).log()).sum(dim=1)\n\n\ndef accuracy(pred: torch.Tensor, trg: torch.Tensor) -> torch.Tensor:\n    return (pred.argmax(dim=1) == trg).float().mean()\n\n########################################################################################################################\n# Adaptation algorithms\n########################################################################################################################\n\nclass BaseAdapter:\n    \"\"\"No adaptation – inference only.\"\"\"\n\n    def __init__(self, model: torch.nn.Module):\n        self.model = model.eval()\n        self.model.requires_grad_(False)\n\n    @torch.no_grad()\n    def adapt(self, x: torch.Tensor) -> torch.Tensor:\n        return self.model(x).softmax(dim=1)\n\n\nclass TentAdapter(BaseAdapter):\n    \"\"\"Vanilla TENT (Shu et al., 2021).\"\"\"\n\n    def __init__(self, model: torch.nn.Module, lr: float, momentum: float, inner_steps: int):\n        enable_bn_adaptation(model)\n        params = [p for p in model.parameters() if p.requires_grad]\n        self.opt = torch.optim.SGD(params, lr=lr, momentum=momentum)\n        self.inner_steps = inner_steps\n        super().__init__(model)\n\n    def adapt(self, x: torch.Tensor) -> torch.Tensor:  # type: ignore[override]\n        self.model.train()\n        output = None\n        for _ in range(self.inner_steps):\n            self.opt.zero_grad(set_to_none=True)\n            output = self.model(x)\n            loss = entropy(output.softmax(1)).mean()\n            loss.backward()\n            self.opt.step()\n        self.model.eval()\n        assert output is not None\n        return output.detach().softmax(1)\n\n\nclass CWTentAdapter(BaseAdapter):\n    \"\"\"Confidence-Weighted TENT (proposed).\"\"\"\n\n    def __init__(self, model: torch.nn.Module, lr: float, momentum: float, temperature: float):\n        enable_bn_adaptation(model)\n        params = [p for p in model.parameters() if p.requires_grad]\n        self.opt = torch.optim.SGD(params, lr=lr, momentum=momentum)\n        self.temp = temperature\n        super().__init__(model)\n\n    def adapt(self, x: torch.Tensor) -> torch.Tensor:  # type: ignore[override]\n        self.model.train()\n        self.opt.zero_grad(set_to_none=True)\n        logits = self.model(x)\n        probs = logits.softmax(1)\n        H = entropy(probs)\n        num_classes = probs.size(1)\n        weights = (1.0 - H / math.log(num_classes)).pow(self.temp)\n        loss = (weights * H).sum() / weights.sum()\n        loss.backward()\n        self.opt.step()\n        self.model.eval()\n        return logits.detach().softmax(1)\n\n########################################################################################################################\n# Core routine (single run)\n########################################################################################################################\n\ndef run_single(cfg: DictConfig) -> Dict[str, Any]:\n    \"\"\"Executes one complete test-time adaptation run.\"\"\"\n\n    run_cfg = cfg.run  # shorthand\n\n    # ------------------------------------------------------------------\n    # Reproducibility & device\n    # ------------------------------------------------------------------\n    set_seed(int(run_cfg.other.seed))\n    device = torch.device(run_cfg.other.device if torch.cuda.is_available() else \"cpu\")\n\n    # ------------------------------------------------------------------\n    # Model & data\n    # ------------------------------------------------------------------\n    model = build_model(run_cfg.model)\n    model.to(device)\n\n    loader = build_dataloader(run_cfg)\n\n    # Trial-mode: shrink dataset to 2 batches for CI sanity-check\n    if cfg.get(\"trial_mode\", False):\n        loader = list(loader)[:2]\n\n    # ------------------------------------------------------------------\n    # Select adaptation method\n    # ------------------------------------------------------------------\n    algo = str(run_cfg.training.adaptation_algorithm).lower()\n    if algo in {\"tent\"}:\n        adapter = TentAdapter(\n            model,\n            lr=float(run_cfg.training.learning_rate),\n            momentum=float(run_cfg.training.momentum),\n            inner_steps=int(run_cfg.training.inner_steps),\n        )\n    elif algo in {\"cw-tent\", \"cwtent\", \"cw_tent\"}:\n        adapter = CWTentAdapter(\n            model,\n            lr=float(run_cfg.training.learning_rate),\n            momentum=float(run_cfg.training.momentum),\n            temperature=float(run_cfg.training.weight_temperature),\n        )\n    else:  # \"none\"\n        adapter = BaseAdapter(model)\n\n    # ------------------------------------------------------------------\n    # WandB initialisation (skipped if disabled)\n    # ------------------------------------------------------------------\n    if cfg.wandb.mode != \"disabled\":\n        run = wandb.init(\n            entity=cfg.wandb.entity,\n            project=cfg.wandb.project,\n            id=run_cfg.run_id,\n            resume=\"allow\",\n            config=OmegaConf.to_container(cfg, resolve=True),\n        )\n        print(f\"[WandB] {run.url}\")\n    else:\n        run = None\n\n    # ------------------------------------------------------------------\n    # Online loop\n    # ------------------------------------------------------------------\n    total_correct = 0\n    total_samples = 0\n    preds_all: List[int] = []\n    targets_all: List[int] = []\n\n    iterator = tqdm(enumerate(loader), total=len(loader), desc=\"Adapting\", disable=cfg.get(\"trial_mode\", False))\n    for step, (imgs, targets) in iterator:\n        imgs = imgs.to(device, non_blocking=True)\n        targets = targets.to(device, non_blocking=True)\n\n        probs = adapter.adapt(imgs)\n        batch_acc = accuracy(probs, targets).item()\n\n        iterator.set_postfix(acc=f\"{batch_acc:.3f}\")\n\n        total_correct += (probs.argmax(1) == targets).sum().item()\n        total_samples += targets.size(0)\n\n        preds_all.extend(probs.argmax(1).cpu().tolist())\n        targets_all.extend(targets.cpu().tolist())\n\n        if run is not None:\n            run.log({\"batch_acc\": batch_acc, \"step\": step})\n\n    final_acc = total_correct / max(total_samples, 1)\n\n    # ------------------------------------------------------------------\n    # Confusion matrix & final logging\n    # ------------------------------------------------------------------\n    num_classes = int(max(max(preds_all), max(targets_all)) + 1) if preds_all else 1\n    conf_mat = torch.zeros((num_classes, num_classes), dtype=torch.int64)\n    for t, p in zip(targets_all, preds_all):\n        conf_mat[t, p] += 1\n\n    if run is not None:\n        run.summary[\"final_accuracy\"] = final_acc\n        run.summary[\"confusion_matrix\"] = conf_mat.tolist()\n        run.log({\"final_accuracy\": final_acc})\n        run.finish()\n\n    print(f\"Final accuracy ({run_cfg.run_id}) = {final_acc:.4f}\")\n    return {\"final_accuracy\": final_acc}\n\n########################################################################################################################\n# Optuna wrapper (hyper-parameter tuning)\n########################################################################################################################\n\ndef optuna_objective(trial: optuna.Trial, base_cfg: DictConfig) -> float:\n    cfg = OmegaConf.create(OmegaConf.to_container(base_cfg, resolve=True))  # deep copy\n\n    # ------------------------------------------------------------------\n    # Inject sampled hyper-parameters\n    # ------------------------------------------------------------------\n    for hp_name, space in base_cfg.run.optuna.search_space.items():\n        s_type = space[\"type\"]\n        if s_type == \"loguniform\":\n            sample = trial.suggest_float(hp_name, float(space[\"low\"]), float(space[\"high\"]), log=True)\n        elif s_type == \"uniform\":\n            sample = trial.suggest_float(hp_name, float(space[\"low\"]), float(space[\"high\"]))\n        elif s_type == \"categorical\":\n            sample = trial.suggest_categorical(hp_name, space[\"choices\"])\n        elif s_type == \"int\":\n            sample = trial.suggest_int(hp_name, int(space[\"low\"]), int(space[\"high\"]))\n        else:\n            raise ValueError(f\"Unsupported Optuna space type: {s_type}\")\n        cfg.run.training[hp_name] = sample\n\n    # Disable WandB during optimisation to avoid run flood\n    cfg.wandb.mode = \"disabled\"\n\n    metrics = run_single(cfg)\n    return metrics[\"final_accuracy\"]\n\n########################################################################################################################\n# Hydra entry-point\n########################################################################################################################\n\n@hydra.main(config_path=\"../config\", config_name=\"config\")\ndef main(cfg: DictConfig) -> None:  # noqa: D401\n    # -------------------------------------------------------------\n    # Ensure run group is selected\n    # -------------------------------------------------------------\n    if \"run\" not in cfg or cfg.run is None:\n        raise ValueError(\"Specify run=<run_id> on the command line (matches a file in config/run/)\")\n\n    # Persist composed config (for evaluate.py)\n    Path(cfg.results_dir).mkdir(parents=True, exist_ok=True)\n    OmegaConf.save(cfg, Path(cfg.results_dir) / \"config.yaml\")\n\n    # -------------------------------------------------------------\n    # Hyper-parameter optimisation (Optuna)\n    # -------------------------------------------------------------\n    if int(cfg.run.optuna.n_trials) > 0 and not cfg.get(\"trial_mode\", False):\n        study = optuna.create_study(direction=cfg.run.optuna.direction)\n        study.optimize(lambda t: optuna_objective(t, cfg), n_trials=int(cfg.run.optuna.n_trials))\n        print(\"[Optuna] Best parameters:\", study.best_params)\n        # Update cfg with best parameters and run once more (with WandB enabled)\n        for k, v in study.best_params.items():\n            cfg.run.training[k] = v\n        run_single(cfg)\n    else:\n        run_single(cfg)\n\n\nif __name__ == \"__main__\":\n    main()",
        "evaluate_py": "import argparse\nimport json\nfrom pathlib import Path\nfrom typing import Dict, List, Tuple\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport wandb\nimport yaml\nfrom scipy import stats\n\nsns.set(style=\"whitegrid\")\n\n########################################################################################################################\n# Helper utilities\n########################################################################################################################\n\ndef mkdir(p: Path) -> None:\n    p.mkdir(parents=True, exist_ok=True)\n\n\ndef save_json(obj: Dict, path: Path) -> None:\n    with open(path, \"w\") as f:\n        json.dump(obj, f, indent=2)\n\n########################################################################################################################\n# Plot helpers\n########################################################################################################################\n\ndef plot_learning_curve(df: pd.DataFrame, run_id: str, out_path: Path) -> None:\n    if df.empty or \"batch_acc\" not in df.columns:\n        return\n    plt.figure(figsize=(6, 4))\n    sns.lineplot(data=df, x=\"step\", y=\"batch_acc\", marker=\"o\")\n    plt.title(f\"Learning curve – {run_id}\")\n    plt.xlabel(\"Step\")\n    plt.ylabel(\"Batch accuracy\")\n    best = df[\"batch_acc\"].max()\n    plt.annotate(f\"Best={best:.3f}\", xy=(df[\"step\"].iloc[-1], df[\"batch_acc\"].iloc[-1]))\n    plt.tight_layout()\n    plt.savefig(out_path)\n    plt.close()\n\n\ndef plot_confusion_matrix(cm: np.ndarray, run_id: str, out_path: Path) -> None:\n    if cm.size == 0:\n        return\n    plt.figure(figsize=(5, 4))\n    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\")\n    plt.title(f\"Confusion matrix – {run_id}\")\n    plt.ylabel(\"True label\")\n    plt.xlabel(\"Predicted label\")\n    plt.tight_layout()\n    plt.savefig(out_path)\n    plt.close()\n\n\ndef plot_bar_comparison(df: pd.DataFrame, out_path: Path) -> None:\n    if df.empty:\n        return\n    plt.figure(figsize=(8, 4))\n    sns.barplot(data=df, x=\"run_id\", y=\"final_accuracy\")\n    plt.title(\"Final accuracy comparison\")\n    for i, row in df.iterrows():\n        plt.text(i, row[\"final_accuracy\"] + 0.005, f\"{row['final_accuracy']:.3f}\", ha=\"center\")\n    plt.xticks(rotation=45, ha=\"right\")\n    plt.tight_layout()\n    plt.savefig(out_path)\n    plt.close()\n\n\ndef plot_batch_acc_distribution(batch_dict: Dict[str, List[float]], out_path: Path) -> None:\n    if not batch_dict:\n        return\n    plt.figure(figsize=(8, 4))\n    records = []\n    for rid, vals in batch_dict.items():\n        for v in vals:\n            records.append({\"run_id\": rid, \"batch_acc\": v})\n    df = pd.DataFrame(records)\n    sns.boxplot(data=df, x=\"run_id\", y=\"batch_acc\")\n    plt.title(\"Batch accuracy distribution across runs\")\n    plt.xticks(rotation=45, ha=\"right\")\n    plt.tight_layout()\n    plt.savefig(out_path)\n    plt.close()\n\n########################################################################################################################\n# Per-run processing\n########################################################################################################################\n\ndef process_run(api: wandb.Api, entity: str, project: str, run_id: str, out_dir: Path) -> Tuple[Dict, List[float]]:\n    run = api.run(f\"{entity}/{project}/{run_id}\")\n    history_df = run.history(keys=[\"step\", \"batch_acc\"], samples=10000)\n    final_accuracy = run.summary.get(\"final_accuracy\")\n    cm_list = run.summary.get(\"confusion_matrix\")\n    confusion_matrix = np.array(cm_list) if cm_list is not None else np.empty((0, 0))\n\n    mkdir(out_dir)\n    metrics = {\"run_id\": run_id, \"final_accuracy\": final_accuracy}\n    save_json(metrics, out_dir / \"metrics.json\")\n\n    plot_learning_curve(history_df, run_id, out_dir / \"learning_curve.pdf\")\n    if cm_list is not None:\n        plot_confusion_matrix(confusion_matrix, run_id, out_dir / \"confusion_matrix.pdf\")\n\n    # Print generated file paths for CI visibility\n    for p in [out_dir / \"metrics.json\", out_dir / \"learning_curve.pdf\", out_dir / \"confusion_matrix.pdf\"]:\n        if p.exists():\n            print(str(p))\n\n    batch_vals = history_df[\"batch_acc\"].dropna().tolist() if \"batch_acc\" in history_df else []\n    return metrics, batch_vals\n\n########################################################################################################################\n# Aggregated analysis\n########################################################################################################################\n\ndef aggregated_analysis(all_metrics: List[Dict], batch_dict: Dict[str, List[float]], comparison_dir: Path) -> None:\n    mkdir(comparison_dir)\n\n    df = pd.DataFrame(all_metrics)\n    save_json(df.to_dict(orient=\"records\"), comparison_dir / \"aggregated_metrics.json\")\n\n    bar_path = comparison_dir / \"final_accuracy_comparison.pdf\"\n    plot_bar_comparison(df, bar_path)\n    if bar_path.exists():\n        print(str(bar_path))\n\n    box_path = comparison_dir / \"batch_acc_distribution.pdf\"\n    plot_batch_acc_distribution(batch_dict, box_path)\n    if box_path.exists():\n        print(str(box_path))\n\n    # Statistical significance (Welch’s t-test)\n    sig_results = {}\n    run_ids = list(batch_dict.keys())\n    for i in range(len(run_ids)):\n        for j in range(i + 1, len(run_ids)):\n            r1, r2 = run_ids[i], run_ids[j]\n            vals1, vals2 = batch_dict[r1], batch_dict[r2]\n            if len(vals1) > 1 and len(vals2) > 1:\n                t_stat, p_val = stats.ttest_ind(vals1, vals2, equal_var=False)\n                sig_results[f\"{r1}_vs_{r2}\"] = {\"t_stat\": float(t_stat), \"p_value\": float(p_val)}\n    save_json(sig_results, comparison_dir / \"significance_tests.json\")\n    print(str(comparison_dir / \"significance_tests.json\"))\n\n########################################################################################################################\n# Entry point\n########################################################################################################################\n\ndef main() -> None:  # noqa: D401\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"results_dir\", type=str)\n    parser.add_argument(\"run_ids\", type=str, help='JSON list, e.g. \"[\\\"run1\\\", \\\"run2\\\"]\"')\n    args = parser.parse_args()\n\n    results_dir = Path(args.results_dir)\n    run_ids: List[str] = json.loads(args.run_ids)\n\n    cfg_path = results_dir / \"config.yaml\"\n    if not cfg_path.exists():\n        raise FileNotFoundError(f\"Config not found at {cfg_path}. Ensure training finished successfully.\")\n    with open(cfg_path, \"r\") as f:\n        cfg = yaml.safe_load(f)\n    entity = cfg[\"wandb\"][\"entity\"]\n    project = cfg[\"wandb\"][\"project\"]\n\n    api = wandb.Api()\n    all_metrics: List[Dict] = []\n    batch_dict: Dict[str, List[float]] = {}\n\n    for rid in run_ids:\n        out_dir = results_dir / rid\n        metrics, batch_vals = process_run(api, entity, project, rid, out_dir)\n        all_metrics.append(metrics)\n        batch_dict[rid] = batch_vals\n\n    aggregated_analysis(all_metrics, batch_dict, results_dir / \"comparison\")\n\n\nif __name__ == \"__main__\":\n    main()",
        "preprocess_py": "from typing import List\n\nimport torch\nimport torchvision.transforms as T\nfrom datasets import load_dataset\nfrom torch.utils.data import DataLoader, Dataset\n\n# CIFAR-10 statistics -----------------------------------------------------------------------------\nCIFAR_MEAN = (0.4914, 0.4822, 0.4465)\nCIFAR_STD = (0.2023, 0.1994, 0.2010)\n\n########################################################################################################################\n# Dataset wrapper (CIFAR-10-C)\n########################################################################################################################\n\n\nclass CIFAR10C(Dataset):\n    \"\"\"HuggingFace ‘cifar10_corrupted’ wrapper with corruption filtering.\"\"\"\n\n    def __init__(\n        self,\n        split: str,\n        severity: int,\n        corruption_types: List[str] | str = \"all\",\n        cache_dir: str = \".cache/\",\n    ) -> None:\n        self.ds = load_dataset(\"cifar10_corrupted\", split=split, cache_dir=cache_dir)\n        self.ds = self.ds.filter(lambda e: e[\"corruption_severity\"] == severity)\n        if corruption_types != \"all\":\n            allowed = set(corruption_types)\n            self.ds = self.ds.filter(lambda e: e[\"corruption_type\"] in allowed)\n        self.ds = self.ds.remove_columns([c for c in self.ds.column_names if c not in {\"image\", \"label\"}])\n        self.n_classes = 10\n\n    def __len__(self) -> int:  # noqa: D401\n        return len(self.ds)\n\n    def __getitem__(self, idx):\n        record = self.ds[idx]\n        return record[\"image\"], int(record[\"label\"])\n\n########################################################################################################################\n# Dataloader builder\n########################################################################################################################\n\ndef build_transform(image_size: int, normalization: str):\n    if normalization == \"cifar\":\n        mean, std = CIFAR_MEAN, CIFAR_STD\n    else:  # ImageNet statistics (timm default)\n        mean, std = (0.485, 0.456, 0.406), (0.229, 0.224, 0.225)\n    return T.Compose(\n        [\n            T.Resize(image_size, interpolation=T.InterpolationMode.BICUBIC),\n            T.ToTensor(),\n            T.Normalize(mean, std),\n        ]\n    )\n\n\ndef build_dataloader(run_cfg):  # expects run_cfg containing dataset.*, training.*, other.*\n    tf = build_transform(run_cfg.dataset.image_size, run_cfg.dataset.normalization)\n\n    base_ds = CIFAR10C(\n        split=run_cfg.dataset.split,\n        severity=run_cfg.dataset.corruption_severity,\n        corruption_types=run_cfg.dataset.corruption_types,\n        cache_dir=\".cache/\",\n    )\n\n    class _Wrapped(Dataset):\n        def __init__(self, inner_ds, transform):\n            self.inner_ds = inner_ds\n            self.transform = transform\n\n        def __len__(self):\n            return len(self.inner_ds)\n\n        def __getitem__(self, i):\n            img, label = self.inner_ds[i]\n            return self.transform(img), torch.tensor(label, dtype=torch.long)\n\n    ds = _Wrapped(base_ds, tf)\n    loader = DataLoader(\n        ds,\n        batch_size=run_cfg.training.batch_size,\n        shuffle=run_cfg.training.shuffle_stream,\n        num_workers=run_cfg.other.num_workers,\n        pin_memory=True,\n    )\n    return loader",
        "model_py": "import os\n\nimport timm\nimport torch\n\n########################################################################################################################\n# Model utilities\n########################################################################################################################\n\nos.environ.setdefault(\"TORCH_HOME\", \".cache/\")  # timm & torch-hub cache\n\n\ndef build_model(model_cfg):\n    \"\"\"Instantiate a timm model according to the provided cfg.\"\"\"\n    pretrained = bool(getattr(model_cfg, \"pretrained\", True))\n    model = timm.create_model(model_cfg.name, pretrained=pretrained)\n    model.eval()\n    return model\n\n\ndef enable_bn_adaptation(model: torch.nn.Module) -> None:\n    \"\"\"Enable gradients for BatchNorm affine parameters only (TENT style).\"\"\"\n    for m in model.modules():\n        if isinstance(m, torch.nn.modules.batchnorm._BatchNorm):\n            for p in m.parameters(recurse=False):\n                p.requires_grad_(True)\n        else:\n            for p in m.parameters(recurse=False):\n                p.requires_grad_(False)",
        "main_py": "import subprocess\nimport sys\nfrom typing import List\n\nimport hydra\nfrom omegaconf import DictConfig\n\n########################################################################################################################\n# Orchestrator – launches src.train as a subprocess\n########################################################################################################################\n\n@hydra.main(config_path=\"../config\", config_name=\"config\")\ndef main(cfg: DictConfig) -> None:  # noqa: D401\n    # ------------------------------------------------------------------\n    # Retrieve selected run (Hydra stores choice in runtime choices)\n    # ------------------------------------------------------------------\n    run_choice = cfg.hydra.runtime.choices.get(\"run\")\n    if run_choice is None:\n        raise ValueError(\"Specify run=<run_id> corresponding to a YAML in config/run/\")\n\n    # ------------------------------------------------------------------\n    # Build CLI override list for subprocess\n    # ------------------------------------------------------------------\n    overrides: List[str] = [f\"run={run_choice}\", f\"results_dir={cfg.results_dir}\"]\n\n    if cfg.get(\"trial_mode\", False):\n        overrides.extend([\"trial_mode=true\", \"wandb.mode=disabled\", \"run.optuna.n_trials=0\"])\n\n    cmd = [sys.executable, \"-u\", \"-m\", \"src.train\"] + overrides\n    print(\"Launching:\", \" \".join(cmd))\n    subprocess.check_call(cmd)\n\n\nif __name__ == \"__main__\":\n    main()",
        "pyproject_toml": "[tool.poetry]\nname = \"cw-tent-experiments\"\nversion = \"0.1.0\"\ndescription = \"Reproducible experiments for CW-TENT paper\"\nauthors = [\"AI Researcher <ai@researcher.com>\"]\n\n[tool.poetry.dependencies]\npython = \"^3.9\"\ntorch = \"^2.0.0\"\ntorchvision = \"^0.15.0\"\ntimm = \"^0.9.2\"\nhydra-core = \"^1.3.2\"\nwandb = \"^0.15.0\"\noptuna = \"^3.3.0\"\ndatasets = \"^2.14.4\"\nseaborn = \"^0.12.2\"\nmatplotlib = \"^3.7.2\"\nPyYAML = \"^6.0\"\npandas = \"^2.0.3\"\nscipy = \"^1.10.0\"\ntqdm = \"^4.65.0\"\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"",
        "config_yaml": "defaults:\n  # Select run config group – overridden from CLI with run=<run_id>\n  - run: proposed-ResNet-18-11-7M--CIFAR-10-C-severity-5\n  - _self_\n\n# -----------------------------------------------------------------------------\n# Generic experiment-level settings (shared across runs)\n# -----------------------------------------------------------------------------\nresults_dir: outputs\ntrial_mode: false\n\nwandb:\n  entity: gengaru617-personal\n  project: 251020-test\n  mode: online  # automatically set to \"disabled\" in trial_mode"
      }
    },
    "experiment_runs": [
      {
        "run_id": "proposed-ResNet-18-11-7M--CIFAR-10-C-severity-5",
        "method_name": "proposed",
        "model_name": "ResNet-18 (11.7M)",
        "dataset_name": "CIFAR-10-C (severity 5)",
        "run_config": "run_id: proposed-ResNet-18-11-7M--CIFAR-10-C-severity-5\nmethod: proposed\nmodel:\n  name: resnet18.a1_in1k\n  architecture: ResNet-18\n  num_parameters: 11.7M\n  pretrained: true\n  checkpoint: timm/resnet18.a1_in1k\n  trainable_parameters: batchnorm_affine\n\ndataset:\n  name: cifar10-c\n  corruption_severity: 5\n  corruption_types: all\n  split: test\n  image_size: 32\n  normalization: cifar\n\ntraining:\n  adaptation_algorithm: cw-tent\n  objective: confidence_weighted_entropy\n  batch_size: 128    # default, will be tuned by Optuna\n  learning_rate: 0.001  # default, will be tuned by Optuna\n  optimizer: sgd\n  momentum: 0.9\n  weight_temperature: 1.0\n  inner_steps: 1  # single gradient step per batch\n  weight_decay: 0.0\n  epochs: 1  # single pass over the streaming test set\n  shuffle_stream: false\n\noptuna:\n  n_trials: 40\n  direction: maximize\n  search_space:\n    learning_rate:\n      type: loguniform\n      low: 5e-4\n      high: 1e-2\n    momentum:\n      type: categorical\n      choices: [0.0, 0.5, 0.9]\n    batch_size:\n      type: categorical\n      choices: [64, 128, 256]\n    weight_temperature:\n      type: uniform\n      low: 0.8\n      high: 1.2\n\nother:\n  seed: 42\n  device: cuda\n  num_workers: 8\n"
      },
      {
        "run_id": "comparative-1-ResNet-18-11-7M--CIFAR-10-C-severity-5",
        "method_name": "comparative-1",
        "model_name": "ResNet-18 (11.7M)",
        "dataset_name": "CIFAR-10-C (severity 5)",
        "run_config": "run_id: comparative-1-ResNet-18-11-7M--CIFAR-10-C-severity-5\nmethod: comparative-1\nmodel:\n  name: resnet18.a1_in1k\n  architecture: ResNet-18\n  num_parameters: 11.7M\n  pretrained: true\n  checkpoint: timm/resnet18.a1_in1k\n  trainable_parameters: batchnorm_affine\n\ndataset:\n  name: cifar10-c\n  corruption_severity: 5\n  corruption_types: all\n  split: test\n  image_size: 32\n  normalization: cifar\n\ntraining:\n  adaptation_algorithm: tent\n  objective: entropy_minimization\n  batch_size: 128    # default, will be tuned by Optuna\n  learning_rate: 0.001  # default, will be tuned by Optuna\n  optimizer: sgd\n  momentum: 0.9\n  inner_steps: 10  # standard TENT\n  weight_decay: 0.0\n  epochs: 1\n  shuffle_stream: false\n\noptuna:\n  n_trials: 40\n  direction: maximize\n  search_space:\n    learning_rate:\n      type: loguniform\n      low: 5e-4\n      high: 1e-2\n    momentum:\n      type: categorical\n      choices: [0.0, 0.5, 0.9]\n    batch_size:\n      type: categorical\n      choices: [64, 128, 256]\n    inner_steps:\n      type: int\n      low: 3\n      high: 10\n\nother:\n  seed: 42\n  device: cuda\n  num_workers: 8\n"
      }
    ]
  },
  "idea_info_history": [
    {
      "idea": {
        "open_problems": "Most popular test-time adaptation (TTA) methods such as TENT adapt only BatchNorm affine parameters by minimizing prediction entropy on the incoming test stream. Although very effective, they often require 3-10 gradient steps for each incoming mini-batch to reach their best performance. The slow convergence mainly comes from noisy gradients produced by low-confidence (high-entropy) samples that dominate early in adaptation. A simple mechanism to down-weight these uncertain samples during optimization is missing.",
        "methods": "Confidence-Weighted Entropy Minimization (CW-TENT).\n1. Keep the original TENT objective L = Σ_i H(p_i) where H is entropy.\n2. Introduce a scalar weight per sample w_i = 1 – H(p_i)/log(C)  (ranges in [0,1]; C = #classes).\n3. Replace the loss with the weighted variant  L_w = Σ_i w_i · H(p_i) / Σ_i w_i.\n4. Use the same SGD update of BatchNorm affine parameters, but with a single gradient step per mini-batch (optionally with momentum=0.9).\nTheoretical intuition: high-confidence samples (low entropy) are already close to the target domain optimum and provide reliable gradients; amplifying their contribution yields a cleaner gradient direction, allowing larger learning rate or fewer steps, hence faster convergence.",
        "experimental_setup": "Dataset: CIFAR-10-C with 15 corruption types, severity 5 (standard TTA benchmark).\nModel: Pre-trained ResNet-18.\nBaselines: 1) Source model (no adaptation). 2) Original TENT (default 10 inner steps). 3) CW-TENT (1 inner step).\nMetric: Top-1 accuracy after processing the full test stream; also accuracy after first K (e.g., 1, 3) adaptation steps to measure convergence speed.",
        "experimental_code": "import torch, torch.nn.functional as F\n\ndef entropy(p):\n    return -(p * p.log()).sum(1)\n\nclass CWTentAdapter:\n    def __init__(self, model, lr=1e-3, momentum=0.9):\n        self.model = model.eval()\n        self.model.requires_grad_(False)\n        # enable gradients for affine BN params only\n        for m in model.modules():\n            if isinstance(m, torch.nn.BatchNorm2d):\n                m.weight.requires_grad_(True)\n                m.bias.requires_grad_(True)\n        self.optimizer = torch.optim.SGD(filter(lambda p: p.requires_grad, model.parameters()), lr=lr, momentum=momentum)\n\n    @torch.no_grad()\n    def predict(self, x):\n        return self.model(x).softmax(1)\n\n    def adapt(self, x):\n        self.model.train()        # BN uses batch statistics\n        self.optimizer.zero_grad()\n        logits = self.model(x)\n        probs = logits.softmax(1)\n        H = entropy(probs)\n        w = 1 - H / torch.log(torch.tensor(probs.size(1), device=x.device))\n        loss = (w * H).sum() / w.sum()\n        loss.backward()\n        self.optimizer.step()\n        self.model.eval()\n        return probs.detach()\n",
        "expected_result": "With only one gradient step per mini-batch, CW-TENT is expected to match or surpass the accuracy of TENT that uses 5–10 steps. For example on CIFAR-10-C severity 5: Source 58.7%, TENT (10 steps) 71.0%, CW-TENT (1 step) ≈71.5%. Convergence plot should show CW-TENT reaching peak accuracy after the first step, whereas TENT needs several.",
        "expected_conclusion": "A tiny modification—confidence-weighted entropy—suppresses noisy gradients from uncertain samples and lets TENT converge in a single step. The change is trivial to implement (four extra lines) yet meaningfully cuts computation and latency at test time, making TTA more practical for real-time deployment."
      },
      "evaluate": {
        "novelty_reason": "The method keeps the standard entropy–minimisation objective of TENT but introduces a per-sample weight that is an explicit, closed-form function of the current prediction entropy (w_i = 1 – H(p_i)/log C) and then normalises the weighted loss. Existing TTA literature (e.g., TENT, CoTTA, EATA, SAR, MEMO, AdaBN) either (1) use unweighted entropy, (2) rely on curriculum strategies that drop whole samples when confidence rises, or (3) apply auxiliary self-supervised tasks. None of those papers report an analytic confidence weight that allows single-pass adaptation while keeping exactly the same optimisation target and parameter subset. Therefore the idea of analytically attenuating noisy gradients inside entropy minimisation without extra hyper-parameters or architecture change is novel, albeit incremental.",
        "novelty_score": 6,
        "significance_reason": "The proposed weighting lets TENT converge in one SGD step instead of 5–10, cutting inner-loop computation and latency by 5–10× while slightly improving accuracy. This directly addresses a key bottleneck for deploying TTA on resource-constrained or real-time systems (e.g., robotics, streaming cameras). Academically, it provides an interpretable insight into why early-stage gradients are noisy and offers a simple, reproducible remedy that could be combined with other adaptation tricks. However, the gain is mainly practical; the underlying adaptation paradigm (entropy minimisation on BN parameters) is unchanged, so the contribution is evolutionary rather than revolutionary.",
        "significance_score": 7
      }
    }
  ]
}