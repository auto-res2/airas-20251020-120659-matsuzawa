name: Run Trial Experiment with Open Code

on:
  workflow_dispatch:
    inputs:
      run_ids:
        description: 'A JSON array of run_ids to process'
        required: true
      experiment_iteration:
        description: "Iteration count"
        required: true
      runner_type:
        description: 'Runner type (e.g., ["ubuntu-latest"], ["self-hosted", "A100"])'
        required: true
        default: '["ubuntu-latest"]'
      model_name:
        description: "Model to use"
        required: true
        default: 'anthropic/claude-sonnet-4-5-20250929'

permissions:
  id-token: write
  contents: write
  actions: write

defaults:
  run:
    shell: bash

jobs:
  setup:
    name: Setup for Sequential Run
    runs-on: ubuntu-latest
    outputs:
      current_run_id: ${{ steps.parse.outputs.current_run_id }}
      remaining_run_ids: ${{ steps.parse.outputs.remaining_run_ids }}
      is_empty: ${{ steps.parse.outputs.is_empty }}

    steps:
      - name: Parse run_ids list
        id: parse
        run: |
          RUN_IDS='${{ github.event.inputs.run_ids }}'
          
          if [[ $(echo "$RUN_IDS" | jq 'length') -eq 0 ]]; then
            echo "All run_ids have been processed."
            echo "is_empty=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_empty=false" >> "$GITHUB_OUTPUT"
            CURRENT_ID=$(echo "$RUN_IDS" | jq -r '.[0]')
            REMAINING_IDS=$(echo "$RUN_IDS" | jq '.[1:]')
            echo "current_run_id=$CURRENT_ID" >> "$GITHUB_OUTPUT"
            echo "remaining_run_ids=$REMAINING_IDS" >> "$GITHUB_OUTPUT"

            echo "Processing run_id: $CURRENT_ID"
            echo "Remaining run_ids: $REMAINING_IDS"
          fi


  run-trial-experiment:
    name: Run Trial for ${{ needs.setup.outputs.current_run_id }}
    needs: setup
    if: needs.setup.outputs.is_empty == 'false'
    runs-on: ${{ fromJSON(github.event.inputs.runner_type) }}
    timeout-minutes: 120

    outputs:
      experiment_passed: ${{ steps.check-result.outputs.passed }}
    
    env:
      RESULTS_DIR: ".research/iteration${{ github.event.inputs.experiment_iteration }}"
      RUN_ID: ${{ needs.setup.outputs.current_run_id }}

      SYNC_COMMAND: "uv sync"
      TRIAL_RUN_COMMAND_TEMPLATE: |
        set -e
        echo "=== [TRIAL RUN] Start for ${RUN_ID_PLACEHOLDER} at $(date -u) ===" | tee -a "$RESULTS_DIR/stdout.txt"

        uv run python -m src.main \
          run=${RUN_ID_PLACEHOLDER} \
          results_dir="$RESULTS_DIR" \
          wandb.mode=disabled \
          trial_mode=true \
          > >(tee -a "$RESULTS_DIR/stdout.txt") \
          2> >(tee -a "$RESULTS_DIR/stderr.txt" >&2)

        echo -e "=== [TRIAL RUN] PASSED for ${RUN_ID_PLACEHOLDER} at $(date -u) ===\n" | tee -a "$RESULTS_DIR/stdout.txt"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          python-version: "3.11"

      - name: Prepare results dir
        run: mkdir -p "$RESULTS_DIR"

      - name: Run trial experiment
        id: run-exp
        continue-on-error: true
        run: |
          set -o pipefail
          echo "=== [TRIAL RUN] Start for $RUN_ID at $(date -u) ===" | tee -a "$RESULTS_DIR/stdout.txt"
          uv run python -m src.main \
            run=$RUN_ID \
            results_dir="$RESULTS_DIR" \
            wandb.mode=disabled \
            trial_mode=true \
            > >(tee -a "$RESULTS_DIR/stdout.txt") \
            2> >(tee -a "$RESULTS_DIR/stderr.txt" >&2)
          echo "=== [TRIAL RUN] PASSED for $RUN_ID at $(date -u) ===" | tee -a "$RESULTS_DIR/stdout.txt"

      - name: Check result
        run: |
          if [[ "${{ steps.run-exp.outcome }}" == "success" && $(grep -q "=== \[TRIAL RUN\] PASSED" "$RESULTS_DIR/stdout.txt") ]]; then
            echo "✅ Trial passed for $RUN_ID"
            echo "passed=true" >> "$GITHUB_OUTPUT"
          else
            echo "❌ Trial failed for $RUN_ID"
            echo "passed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: trial-results-${{ github.run.id }}
          path: .research/

  fix-and-rerun:
    name: Fix and Re-run Trial
    needs: [setup, run-trial-experiment]
    if: needs.setup.outputs.is_empty == 'false' && needs.run-trial-experiment.outputs.experiment_passed == 'false'
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      SEARCH_HF_COMMAND: |
        curl -s -G \
          -H "Authorization: Bearer $HF_TOKEN" \
          --data-urlencode "search=${SEARCH_TERM}" \
          --data-urlencode "sort=likes" \
          --data-urlencode "limit=10" \
          --data-urlencode "direction=-1" \
          --data-urlencode "full=true" \
          "https://huggingface.co/api/${RESOURCE_TYPE}" \
        | jq -r '(.results // .) | map(select(.gated == false and .private == false and .disabled == false)) | .[0]?.id // empty'
      PROMPT: |
        Your task is to correct the code for the experiment associated with run ID ${{ github.event.inputs.run_id }}. 
        Your sole responsibility is to modify the code to ensure it is runnable; you are not to execute the experiment itself.
        You have been granted full tool access. 
        
        Guiding Principles:
        - Scope: Do not perform any Git operations like commit or push. Your only task is to fix the code to make it executable.
        - Method: When fixing errors, you MUST only modify existing files; do not create or delete any files.
        - Autonomy: Perform all correction steps autonomously. Do not ask for permission.
        - Resource Errors: If a Hugging Face resource is unavailable, you MUST find and implement a public alternative. To do this, you MUST first set two variables:
          1.  `RESOURCE_TYPE`: Set to either `"models"` or `"datasets"`.
          2.  `SEARCH_TERM`: Set to the resource name from the error to find a corrected or alternative ID.
          Then, execute `bash -c "$SEARCH_HF_COMMAND"` to get the best alternative ID and update the code.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download experiment results
        uses: actions/download-artifact@v4
        with:
          name: trial-results-${{ github.run.id }}
          path: .research/

      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install opencode
        run: |
          curl -fsSL https://opencode.ai/install | bash

      - name: Install bun
        run: npm install -g bun

      - name: Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install opencode
        run: |
          curl -fsSL https://opencode.ai/install | bash

      - name: Install bun
        run: npm install -g bun

      - name: Run OpenCode Fix
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          WANDB_API_KEY: ${{ secrets.WANDB_API_KEY }}
        run: |
          opencode run --model "${{ github.event.inputs.model_name }}" "Fix the code for run ID ${{ github.event.inputs.run_id }}"

      - name: Commit and push fix
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git add --update .

          if ! git diff --staged --quiet; then
            git commit -m "[CI] Automated fix for run_id=${{ github.event.inputs.run_id }}"
            for i in {1..5}; do
              git pull --rebase && git push && break
              echo "Push failed on attempt $i. Retrying in $((2**i)) seconds..."
              sleep $((2**i))
            done
          else
            echo "OpenCode made no changes to the code."
          fi

      - name: Trigger next iteration
        run: |
          echo "Re-running workflow"
          gh workflow run "${{ github.workflow }}" --ref ${{ github.ref }} \
            -f run_id="${{ github.event.inputs.run_id }}" \
            -f experiment_iteration="${{ github.event.inputs.experiment_iteration }}" \
            -f runner_type='${{ github.event.inputs.runner_type }}' \
            -f model_name="${{ github.event.inputs.model_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  trigger-next-run:
    name: Trigger Next Run in Sequence
    needs: [setup, run-trial-experiment]
    if: needs.setup.outputs.is_empty == 'false' && needs.run-trial-experiment.outputs.experiment_passed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Commit and push successful trial result
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git add .research/
          if ! git diff --staged --quiet; then
            git commit -m "[CI] Add successful trial results for run_id=${{ needs.setup.outputs.current_run_id }}"
            git push
          fi

      - name: Trigger workflow with remaining list
        run: |
          REMAINING_IDS='${{ needs.setup.outputs.remaining_run_ids }}'
          if [[ $(echo "$REMAINING_IDS" | jq 'length') -eq 0 ]]; then
            echo "Successfully completed all run_ids."
          else
            echo "Triggering next run with remaining run_ids: $REMAINING_IDS"
            gh workflow run "${{ github.workflow }}" --ref ${{ github.ref }} \
              -f run_ids="$REMAINING_IDS" \
              -f experiment_iteration="${{ github.event.inputs.experiment_iteration }}" \
              -f runner_type='${{ github.event.inputs.runner_type }}' \
              -f model_name='${{ github.event.inputs.model_name }}'
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
